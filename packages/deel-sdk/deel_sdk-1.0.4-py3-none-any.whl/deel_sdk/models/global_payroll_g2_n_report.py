# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({})
class GlobalPayrollG2NReport(BaseModel):
    """GlobalPayrollG2NReport

    :param net_pay: net_pay, defaults to None
    :type net_pay: str, optional
    :param ee_loans: ee_loans, defaults to None
    :type ee_loans: str, optional
    :param contract_id: contract_id, defaults to None
    :type contract_id: str, optional
    :param annual_bonus: annual_bonus, defaults to None
    :type annual_bonus: float, optional
    :param car_allowance: car_allowance, defaults to None
    :type car_allowance: float, optional
    :param esp_deduction: esp_deduction, defaults to None
    :type esp_deduction: float, optional
    :param employee_name: employee_name, defaults to None
    :type employee_name: str, optional
    :param employer_cost: employer_cost, defaults to None
    :type employer_cost: str, optional
    :param funding_amount: funding_amount, defaults to None
    :type funding_amount: float, optional
    :param home_allowance: home_allowance, defaults to None
    :type home_allowance: str, optional
    :param ee_income_tax: ee_income_tax, defaults to None
    :type ee_income_tax: str, optional
    :param employee_number: employee_number, defaults to None
    :type employee_number: float, optional
    :param backdated_salary: backdated_salary, defaults to None
    :type backdated_salary: str, optional
    :param employer_contribution: employer_contribution, defaults to None
    :type employer_contribution: str, optional
    :param er_occupational_risk: er_occupational_risk, defaults to None
    :type er_occupational_risk: str, optional
    :param employment_status_tag_internal: employment_status_tag_internal, defaults to None
    :type employment_status_tag_internal: str, optional
    :param employee_job_title: employee_job_title, defaults to None
    :type employee_job_title: str, optional
    :param employee_division: employee_division, defaults to None
    :type employee_division: str, optional
    :param employee_department: employee_department, defaults to None
    :type employee_department: str, optional
    :param pension_contribution: pension_contribution, defaults to None
    :type pension_contribution: float, optional
    :param cost_center: cost_center, defaults to None
    :type cost_center: str, optional
    """

    def __init__(
        self,
        net_pay: str = None,
        ee_loans: str = None,
        contract_id: str = None,
        annual_bonus: float = None,
        car_allowance: float = None,
        esp_deduction: float = None,
        employee_name: str = None,
        employer_cost: str = None,
        funding_amount: float = None,
        home_allowance: str = None,
        ee_income_tax: str = None,
        employee_number: float = None,
        backdated_salary: str = None,
        employer_contribution: str = None,
        er_occupational_risk: str = None,
        employment_status_tag_internal: str = None,
        employee_job_title: str = None,
        employee_division: str = None,
        employee_department: str = None,
        pension_contribution: float = None,
        cost_center: str = None,
    ):
        if net_pay is not None:
            self.net_pay = net_pay
        if ee_loans is not None:
            self.ee_loans = ee_loans
        if contract_id is not None:
            self.contract_id = contract_id
        if annual_bonus is not None:
            self.annual_bonus = annual_bonus
        if car_allowance is not None:
            self.car_allowance = car_allowance
        if esp_deduction is not None:
            self.esp_deduction = esp_deduction
        if employee_name is not None:
            self.employee_name = employee_name
        if employer_cost is not None:
            self.employer_cost = employer_cost
        if funding_amount is not None:
            self.funding_amount = funding_amount
        if home_allowance is not None:
            self.home_allowance = home_allowance
        if ee_income_tax is not None:
            self.ee_income_tax = ee_income_tax
        if employee_number is not None:
            self.employee_number = employee_number
        if backdated_salary is not None:
            self.backdated_salary = backdated_salary
        if employer_contribution is not None:
            self.employer_contribution = employer_contribution
        if er_occupational_risk is not None:
            self.er_occupational_risk = er_occupational_risk
        if employment_status_tag_internal is not None:
            self.employment_status_tag_internal = employment_status_tag_internal
        if employee_job_title is not None:
            self.employee_job_title = employee_job_title
        if employee_division is not None:
            self.employee_division = employee_division
        if employee_department is not None:
            self.employee_department = employee_department
        if pension_contribution is not None:
            self.pension_contribution = pension_contribution
        if cost_center is not None:
            self.cost_center = cost_center
