# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class PatchWebhookRequestStatus(Enum):
    """An enumeration representing different categories.

    :cvar ENABLED: "enabled"
    :vartype ENABLED: str
    :cvar DISABLED: "disabled"
    :vartype DISABLED: str
    """

    ENABLED = "enabled"
    DISABLED = "disabled"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PatchWebhookRequestStatus._member_map_.values())
        )


@JsonMap({})
class PatchWebhookRequest(BaseModel):
    """PatchWebhookRequest

    :param name: Webhook subscription name.
    :type name: str
    :param description: Webhook subscription description.
    :type description: str
    :param status: Status of webhook.
    :type status: PatchWebhookRequestStatus
    :param url: Endpoint to receive webhook.
    :type url: str
    :param signing_key: The webhook's signing key, used to generate webhook signatures.
    :type signing_key: str
    :param api_version: Deel API version. Currently Deel accepts v1 or v2 version., defaults to None
    :type api_version: str, optional
    :param events: The list of events to enable for this subscription.
    :type events: List[str]
    """

    def __init__(
        self,
        name: str,
        description: str,
        status: PatchWebhookRequestStatus,
        url: str,
        signing_key: str,
        events: List[str],
        api_version: str = None,
    ):
        self.name = name
        self.description = description
        self.status = self._enum_matching(
            status, PatchWebhookRequestStatus.list(), "status"
        )
        self.url = url
        self.signing_key = signing_key
        if api_version is not None:
            self.api_version = api_version
        self.events = events
