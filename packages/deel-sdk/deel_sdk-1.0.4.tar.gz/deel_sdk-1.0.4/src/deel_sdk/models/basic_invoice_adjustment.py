# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .identifier_value import IdentifierValue, IdentifierValueGuard
from .invoice_adjustment_type_enum import InvoiceAdjustmentTypeEnum
from .invoice_adjustment_status_enum import InvoiceAdjustmentStatusEnum
from .file_attachment_info import FileAttachmentInfo
from .contract_type_enum import ContractTypeEnum


@JsonMap({})
class BasicInvoiceAdjustmentWorksheet(BaseModel):
    """BasicInvoiceAdjustmentWorksheet

    :param weeks: weeks
    :type weeks: float
    :param days: days
    :type days: float
    :param hours: hours
    :type hours: float
    :param minutes: minutes
    :type minutes: float
    """

    def __init__(self, weeks: float, days: float, hours: float, minutes: float):
        self.weeks = weeks
        self.days = days
        self.hours = hours
        self.minutes = minutes


@JsonMap({"id_": "id"})
class BasicInvoiceAdjustmentReviewedBy(BaseModel):
    """BasicInvoiceAdjustmentReviewedBy

    :param id_: id_
    :type id_: IdentifierValue
    :param full_name: full_name
    :type full_name: str
    :param reviewed_at: reviewed_at
    :type reviewed_at: str
    :param remarks: remarks
    :type remarks: str
    """

    def __init__(
        self, id_: IdentifierValue, full_name: str, reviewed_at: str, remarks: str
    ):
        self.id_ = IdentifierValueGuard.return_one_of(id_)
        self.full_name = full_name
        self.reviewed_at = reviewed_at
        self.remarks = remarks


@JsonMap({"id_": "id", "type_": "type"})
class BasicInvoiceAdjustmentContract(BaseModel):
    """BasicInvoiceAdjustmentContract

    :param id_: id_
    :type id_: str
    :param title: title
    :type title: str
    :param type_: Type of a contract
    :type type_: ContractTypeEnum
    """

    def __init__(self, id_: str, title: str, type_: ContractTypeEnum):
        self.id_ = id_
        self.title = title
        self.type_ = self._enum_matching(type_, ContractTypeEnum.list(), "type_")


@JsonMap({})
class BasicInvoiceAdjustmentPaymentCycle(BaseModel):
    """BasicInvoiceAdjustmentPaymentCycle

    :param start_date: Long date-time format following ISO-8601
    :type start_date: str
    :param end_date: Long date-time format following ISO-8601
    :type end_date: str
    """

    def __init__(self, start_date: str, end_date: str):
        self.start_date = start_date
        self.end_date = end_date


@JsonMap({"id_": "id"})
class BasicInvoiceAdjustmentReportedBy(BaseModel):
    """BasicInvoiceAdjustmentReportedBy

    :param id_: id_
    :type id_: IdentifierValue
    :param full_name: full_name
    :type full_name: str
    """

    def __init__(self, id_: IdentifierValue, full_name: str):
        self.id_ = IdentifierValueGuard.return_one_of(id_)
        self.full_name = full_name


@JsonMap({"id_": "id", "type_": "type"})
class BasicInvoiceAdjustment(BaseModel):
    """BasicInvoiceAdjustment

    :param id_: id_
    :type id_: IdentifierValue
    :param type_: Type of invoice adjustment.
    :type type_: InvoiceAdjustmentTypeEnum
    :param status: status of invoice adjustment
    :type status: InvoiceAdjustmentStatusEnum
    :param description: description
    :type description: str
    :param date_submitted: Long date-time format following ISO-8601
    :type date_submitted: str
    :param currency_code: currency_code
    :type currency_code: str
    :param invoice_id: invoice_id, defaults to None
    :type invoice_id: float, optional
    :param quantity: quantity
    :type quantity: float
    :param total_amount: total_amount
    :type total_amount: str
    :param created_at: Long date-time format following ISO-8601
    :type created_at: str
    :param scale: scale, defaults to None
    :type scale: str, optional
    :param custom_scale: custom_scale, defaults to None
    :type custom_scale: str, optional
    :param attachment: This object is used for linking file attachments to your records.
    :type attachment: FileAttachmentInfo
    :param worksheet: worksheet
    :type worksheet: BasicInvoiceAdjustmentWorksheet
    :param reviewed_by: reviewed_by
    :type reviewed_by: BasicInvoiceAdjustmentReviewedBy
    :param contract: contract
    :type contract: BasicInvoiceAdjustmentContract
    :param payment_cycle: payment_cycle
    :type payment_cycle: BasicInvoiceAdjustmentPaymentCycle
    :param reported_by: reported_by
    :type reported_by: BasicInvoiceAdjustmentReportedBy
    """

    def __init__(
        self,
        id_: IdentifierValue,
        type_: InvoiceAdjustmentTypeEnum,
        status: InvoiceAdjustmentStatusEnum,
        description: str,
        date_submitted: str,
        currency_code: str,
        quantity: float,
        total_amount: str,
        created_at: str,
        attachment: FileAttachmentInfo,
        worksheet: BasicInvoiceAdjustmentWorksheet,
        reviewed_by: BasicInvoiceAdjustmentReviewedBy,
        contract: BasicInvoiceAdjustmentContract,
        payment_cycle: BasicInvoiceAdjustmentPaymentCycle,
        reported_by: BasicInvoiceAdjustmentReportedBy,
        invoice_id: float = None,
        scale: str = None,
        custom_scale: str = None,
    ):
        self.id_ = IdentifierValueGuard.return_one_of(id_)
        self.type_ = self._enum_matching(
            type_, InvoiceAdjustmentTypeEnum.list(), "type_"
        )
        self.status = self._enum_matching(
            status, InvoiceAdjustmentStatusEnum.list(), "status"
        )
        self.description = description
        self.date_submitted = date_submitted
        self.currency_code = self._pattern_matching(
            currency_code, "^[A-Z]{3}$", "currency_code"
        )
        if invoice_id is not None:
            self.invoice_id = invoice_id
        self.quantity = quantity
        self.total_amount = total_amount
        self.created_at = created_at
        if scale is not None:
            self.scale = scale
        if custom_scale is not None:
            self.custom_scale = custom_scale
        self.attachment = self._define_object(attachment, FileAttachmentInfo)
        self.worksheet = self._define_object(worksheet, BasicInvoiceAdjustmentWorksheet)
        self.reviewed_by = self._define_object(
            reviewed_by, BasicInvoiceAdjustmentReviewedBy
        )
        self.contract = self._define_object(contract, BasicInvoiceAdjustmentContract)
        self.payment_cycle = self._define_object(
            payment_cycle, BasicInvoiceAdjustmentPaymentCycle
        )
        self.reported_by = self._define_object(
            reported_by, BasicInvoiceAdjustmentReportedBy
        )
