{"version":3,"file":"chunks/45669.aebab90a75eaa4b818f7.min.js","mappings":"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","sources":["webpack://plone.staticresources/./node_modules/tinymce/plugins/autoresize/index.js","webpack://plone.staticresources/./node_modules/tinymce/plugins/autoresize/plugin.js"],"sourcesContent":["// Exports the \"autoresize\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/autoresize')\n//   ES2015:\n//     import 'tinymce/plugins/autoresize'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.0.1 (2024-04-10)\n */\n\n(function () {\n    'use strict';\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.Env');\n\n    const fireResizeEditor = editor => editor.dispatch('ResizeEditor');\n\n    const option = name => editor => editor.options.get(name);\n    const register$1 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('autoresize_overflow_padding', {\n        processor: 'number',\n        default: 1\n      });\n      registerOption('autoresize_bottom_margin', {\n        processor: 'number',\n        default: 50\n      });\n    };\n    const getMinHeight = option('min_height');\n    const getMaxHeight = option('max_height');\n    const getAutoResizeOverflowPadding = option('autoresize_overflow_padding');\n    const getAutoResizeBottomMargin = option('autoresize_bottom_margin');\n\n    const isFullscreen = editor => editor.plugins.fullscreen && editor.plugins.fullscreen.isFullscreen();\n    const toggleScrolling = (editor, state) => {\n      const body = editor.getBody();\n      if (body) {\n        body.style.overflowY = state ? '' : 'hidden';\n        if (!state) {\n          body.scrollTop = 0;\n        }\n      }\n    };\n    const parseCssValueToInt = (dom, elm, name, computed) => {\n      var _a;\n      const value = parseInt((_a = dom.getStyle(elm, name, computed)) !== null && _a !== void 0 ? _a : '', 10);\n      return isNaN(value) ? 0 : value;\n    };\n    const shouldScrollIntoView = trigger => {\n      if ((trigger === null || trigger === void 0 ? void 0 : trigger.type.toLowerCase()) === 'setcontent') {\n        const setContentEvent = trigger;\n        return setContentEvent.selection === true || setContentEvent.paste === true;\n      } else {\n        return false;\n      }\n    };\n    const resize = (editor, oldSize, trigger, getExtraMarginBottom) => {\n      var _a;\n      const dom = editor.dom;\n      const doc = editor.getDoc();\n      if (!doc) {\n        return;\n      }\n      if (isFullscreen(editor)) {\n        toggleScrolling(editor, true);\n        return;\n      }\n      const docEle = doc.documentElement;\n      const resizeBottomMargin = getExtraMarginBottom ? getExtraMarginBottom() : getAutoResizeOverflowPadding(editor);\n      const minHeight = (_a = getMinHeight(editor)) !== null && _a !== void 0 ? _a : editor.getElement().offsetHeight;\n      let resizeHeight = minHeight;\n      const marginTop = parseCssValueToInt(dom, docEle, 'margin-top', true);\n      const marginBottom = parseCssValueToInt(dom, docEle, 'margin-bottom', true);\n      let contentHeight = docEle.offsetHeight + marginTop + marginBottom + resizeBottomMargin;\n      if (contentHeight < 0) {\n        contentHeight = 0;\n      }\n      const containerHeight = editor.getContainer().offsetHeight;\n      const contentAreaHeight = editor.getContentAreaContainer().offsetHeight;\n      const chromeHeight = containerHeight - contentAreaHeight;\n      if (contentHeight + chromeHeight > minHeight) {\n        resizeHeight = contentHeight + chromeHeight;\n      }\n      const maxHeight = getMaxHeight(editor);\n      if (maxHeight && resizeHeight > maxHeight) {\n        resizeHeight = maxHeight;\n        toggleScrolling(editor, true);\n      } else {\n        toggleScrolling(editor, false);\n      }\n      if (resizeHeight !== oldSize.get()) {\n        const deltaSize = resizeHeight - oldSize.get();\n        dom.setStyle(editor.getContainer(), 'height', resizeHeight + 'px');\n        oldSize.set(resizeHeight);\n        fireResizeEditor(editor);\n        if (global.browser.isSafari() && (global.os.isMacOS() || global.os.isiOS())) {\n          const win = editor.getWin();\n          win.scrollTo(win.pageXOffset, win.pageYOffset);\n        }\n        if (editor.hasFocus() && shouldScrollIntoView(trigger)) {\n          editor.selection.scrollIntoView();\n        }\n        if ((global.browser.isSafari() || global.browser.isChromium()) && deltaSize < 0) {\n          resize(editor, oldSize, trigger, getExtraMarginBottom);\n        }\n      }\n    };\n    const setup = (editor, oldSize) => {\n      let getExtraMarginBottom = () => getAutoResizeBottomMargin(editor);\n      let resizeCounter;\n      let sizeAfterFirstResize;\n      editor.on('init', e => {\n        resizeCounter = 0;\n        const overflowPadding = getAutoResizeOverflowPadding(editor);\n        const dom = editor.dom;\n        dom.setStyles(editor.getDoc().documentElement, { height: 'auto' });\n        if (global.browser.isEdge() || global.browser.isIE()) {\n          dom.setStyles(editor.getBody(), {\n            'paddingLeft': overflowPadding,\n            'paddingRight': overflowPadding,\n            'min-height': 0\n          });\n        } else {\n          dom.setStyles(editor.getBody(), {\n            paddingLeft: overflowPadding,\n            paddingRight: overflowPadding\n          });\n        }\n        resize(editor, oldSize, e, getExtraMarginBottom);\n        resizeCounter += 1;\n      });\n      editor.on('NodeChange SetContent keyup FullscreenStateChanged ResizeContent', e => {\n        if (resizeCounter === 1) {\n          sizeAfterFirstResize = editor.getContainer().offsetHeight;\n          resize(editor, oldSize, e, getExtraMarginBottom);\n          resizeCounter += 1;\n        } else if (resizeCounter === 2) {\n          const isLooping = sizeAfterFirstResize < editor.getContainer().offsetHeight;\n          if (isLooping) {\n            const dom = editor.dom;\n            const doc = editor.getDoc();\n            dom.setStyles(doc.documentElement, { 'min-height': 0 });\n            dom.setStyles(editor.getBody(), { 'min-height': 'inherit' });\n          }\n          getExtraMarginBottom = isLooping ? constant(0) : getExtraMarginBottom;\n          resizeCounter += 1;\n        } else {\n          resize(editor, oldSize, e, getExtraMarginBottom);\n        }\n      });\n    };\n\n    const register = (editor, oldSize) => {\n      editor.addCommand('mceAutoResize', () => {\n        resize(editor, oldSize);\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('autoresize', editor => {\n        register$1(editor);\n        if (!editor.options.isSet('resize')) {\n          editor.options.set('resize', false);\n        }\n        if (!editor.inline) {\n          const oldSize = Cell(0);\n          register(editor, oldSize);\n          setup(editor, oldSize);\n        }\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","tinymce","util","Tools","resolve","global","option","name","editor","options","get","getMinHeight","getMaxHeight","getAutoResizeOverflowPadding","getAutoResizeBottomMargin","toggleScrolling","state","body","getBody","style","overflowY","scrollTop","parseCssValueToInt","dom","elm","computed","_a","value","parseInt","getStyle","isNaN","resize","oldSize","trigger","getExtraMarginBottom","doc","getDoc","plugins","fullscreen","isFullscreen","docEle","documentElement","resizeBottomMargin","minHeight","getElement","offsetHeight","resizeHeight","marginTop","marginBottom","contentHeight","chromeHeight","getContainer","getContentAreaContainer","maxHeight","deltaSize","setStyle","set","dispatch","fireResizeEditor","browser","isSafari","os","isMacOS","isiOS","win","getWin","scrollTo","pageXOffset","pageYOffset","hasFocus","type","toLowerCase","setContentEvent","selection","paste","shouldScrollIntoView","scrollIntoView","isChromium","add","registerOption","register","processor","default","register$1","isSet","inline","initial","v","Cell","addCommand","resizeCounter","sizeAfterFirstResize","on","e","overflowPadding","setStyles","height","isEdge","isIE","paddingLeft","paddingRight","isLooping","setup"],"sourceRoot":""}