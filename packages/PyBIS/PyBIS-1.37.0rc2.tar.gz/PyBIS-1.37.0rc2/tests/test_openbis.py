#   Copyright ETH 2018 - 2023 ZÃ¼rich, Scientific IT Services
# 
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
#   
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
import re
import time

import pytest

from pybis import Openbis


def test_token(openbis_instance):
    assert openbis_instance.token is not None
    assert openbis_instance.is_token_valid(openbis_instance.token) is True
    assert openbis_instance.is_session_active() is True


def http_only():
    with pytest.raises(Exception):
        new_instance = Openbis("http://localhost")
        assert new_instance is None

    new_instance = Openbis(
        url="http://localhost",
        allow_http_but_do_not_use_this_in_production_and_only_within_safe_networks=True,
    )
    assert new_instance is not None


def test_cached_token(other_openbis_instance):
    assert other_openbis_instance.is_token_valid() is True

    other_openbis_instance.logout()
    assert other_openbis_instance.is_token_valid() is False


def test_create_perm_id(openbis_instance):
    permId = openbis_instance.create_permId()
    assert permId is not None
    m = re.search("([0-9]){17}-([0-9]*)", permId)
    ts = m.group(0)
    assert ts is not None
    count = m.group(1)
    assert count is not None


def test_get_samples_update_in_transaction(openbis_instance):
    """
        Update samples in transaction without overriding parents/children
    """
    name_suffix = str(time.time())

    st = openbis_instance.new_sample_type('TEST_YEAST',
                                          'YEAST-',
                                          autoGeneratedCode=True,
                                          description="some new yest type for test")
    st.save()
    st.assign_property('$name')

    # Create new space
    space = openbis_instance.new_space(code='space_name' + name_suffix, description='')
    space.save()

    # Create new project
    project = space.new_project(code='project_code' + name_suffix)
    project.save()

    # Create new experiment
    experiment = openbis_instance.new_experiment(
        code='MY_NEW_EXPERIMENT',
        type='COLLECTION',
        project=project.code
    )
    experiment.save()

    # Create parent sample
    sample1 = openbis_instance.new_sample(
        type='TEST_YEAST',
        space=space.code,
        experiment=experiment.identifier,
        parents=[],
        children=[],
        props={"$name": "sample1"}
    )
    sample1.save()

    # Create child sample
    sample2 = openbis_instance.new_sample(
        type='TEST_YEAST',
        space=space.code,
        experiment=experiment.identifier,
        parents=[sample1],
        children=[],
        props={"$name": "sample2"}
    )
    sample2.save()

    # Verify samples parent/child relationship
    sample1 = openbis_instance.get_sample(
        sample_ident=sample1.identifier,
        space=space.code,
        props="*"
    )
    sample2 = openbis_instance.get_sample(
        sample_ident=sample2.identifier,
        space=space.code,
        props="*"
    )
    assert sample1.children == [sample2.identifier]
    assert sample2.parents == [sample1.identifier]

    trans = openbis_instance.new_transaction()
    # get samples that have parents and update name
    samples = openbis_instance.get_samples(space=space.code, props="*", withParents="*")
    for sample in samples:
        sample.props["$name"] = 'new name for sample2'
        trans.add(sample)
    # get samples that have children and update name
    samples = openbis_instance.get_samples(space=space.code, props="*", withChildren="*")
    for sample in samples:
        sample.props["$name"] = 'new name for sample1'
        trans.add(sample)
    trans.commit()

    # Verify that name has been changed and parent/child relationship remains
    sample1 = openbis_instance.get_sample(
        sample_ident=sample1.identifier,
        space=space.code,
        props="*"
    )
    sample2 = openbis_instance.get_sample(
        sample_ident=sample2.identifier,
        space=space.code,
        props="*"
    )
    assert sample1.props["$name"] == 'new name for sample1'
    assert sample1.children == [sample2.identifier]
    assert sample2.props["$name"] == 'new name for sample2'
    assert sample2.parents == [sample1.identifier]

    trans = openbis_instance.new_transaction()
    # get samples with attributes and change name
    samples = openbis_instance.get_samples(space=space.code, attrs=["parents", "children"])
    for sample in samples:
        sample.props["$name"] = "default name"
        trans.add(sample)
    trans.commit()

    # Verify that name has been changed and parent/child relationship remains
    sample1 = openbis_instance.get_sample(
        sample_ident=sample1.identifier,
        space=space.code,
        props="*"
    )
    sample2 = openbis_instance.get_sample(
        sample_ident=sample2.identifier,
        space=space.code,
        props="*"
    )
    assert sample1.props["$name"] == 'default name'
    assert sample1.children == [sample2.identifier]
    assert sample2.props["$name"] == 'default name'
    assert sample2.parents == [sample1.identifier]

    sample3 = openbis_instance.new_sample(
        type='TEST_YEAST',
        space=space.code,
        experiment=experiment.identifier,
        parents=[],
        children=[],
        props={"$name": "sample3"}
    )
    sample3.save()

    trans = openbis_instance.new_transaction()
    # get sample1 without attributes and add sample3 as a parent
    samples = openbis_instance.get_samples(space=space.code, identifier=sample1.identifier)
    for sample in samples:
        sample.add_parents([sample3.identifier])
        trans.add(sample)
    # get sample2 without attributes and remove sample1 as a parent
    samples = openbis_instance.get_samples(space=space.code, identifier=sample2.identifier)
    for sample in samples:
        sample.del_parents([sample1.identifier])
        trans.add(sample)
    trans.commit()

    # Verify changes
    sample1 = openbis_instance.get_sample(
        sample_ident=sample1.identifier,
        space=space.code,
        props="*"
    )
    sample2 = openbis_instance.get_sample(
        sample_ident=sample2.identifier,
        space=space.code,
        props="*"
    )
    sample3 = openbis_instance.get_sample(
        sample_ident=sample3.identifier,
        space=space.code,
        props="*"
    )
    assert sample1.children == []
    assert sample1.parents == [sample3.identifier]
    assert sample2.parents == []
    assert sample3.children == [sample1.identifier]


def test_failed_second_login_raises_exception(openbis_instance):
    """
        Logins to openBIS using wrong username/password, PyBIS should raise exception
    """
    assert openbis_instance.is_session_active() is True

    try:
        openbis_instance.login('non_existing_username_for_test', 'abcdef')
        # Login should fail at this point
        assert False
    except ValueError as e:
        assert str(e) == "login to openBIS failed"


def test_set_token_accepts_personal_access_token_object(openbis_instance):
    """
        Verifies that set_token method accepts both permId and PersonalAccessToken object
    """
    assert openbis_instance.is_session_active() is True

    pat = openbis_instance.get_or_create_personal_access_token(sessionName="Project A")

    openbis_instance.set_token(pat, save_token=True)
    openbis_instance.set_token(pat.permId, save_token=True)



def test_vocabulary_remove():
    from pybis import Openbis
    def get_instance(url=None):
        base_url = "http://localhost:8888/openbis"
        # base_url = "http://localhost:8080/openbis"
        # base_url = "https://alaskowski:8443/openbis"
        base_url = "https://openbis-sis-ci-sprint.ethz.ch/"
        # base_url = "https://local.openbis.ch/"
        # base_url = "https://openbis-vorholt.ethz.ch/"
        if url is None:
            url = base_url
        openbis_instance = Openbis(
            url=url,
            verify_certificates=False,
            allow_http_but_do_not_use_this_in_production_and_only_within_safe_networks=True
        )
        username = 'testid' # admin alaskowski alaskowski@ethz.ch
        password = 'changeit' # changeit 123456789
        token = '$pat-admin-240429121950090x6C8667597CB66B2CF7A9B2A45742BFC7'
        token = '$pat-testid-240429123135430x84B88BCE995A512AC6317E34F52EC47E'
        openbis_instance.set_token(token)
        # token = openbis_instance.login(username, password)
        print(token)
        return openbis_instance

    o = get_instance()
    name_suffix = str(time.time())

    # exp = o.get_experiment_type('$MY_COLLECTION')
    # exp = o.get_experiment_type('COLLECTION')
    # pa = exp.get_property_assignments()
    # print(pa)

    # trans = o.new_transaction()
    # test = o.get_sample("/MATERIALS/RESOURCE_PARENTS/S22")
    # trans.add(test)
    # test = o.get_sample("/MATERIALS/RESOURCE_PARENTS/S23")
    # trans.add(test)
    # trans.commit()

    # trans = o.new_transaction()
    # test = o.get_sample("/ALASKOWSKI/TEST_PROJECT/STR58")
    # trans.add(test)
    # test = o.get_sample("/ALASKOWSKI/TEST_PROJECT/STR59")
    # trans.add(test)
    # trans.commit()

    # samp = o.new_sample(type='STRAIN', collection='/ALASKOWSKI/TEST_PROJECT/TEST_PROJECT_EXP_1')
    # samp.props['$name'] = 'test_name2'
    # samp.save()

    # sp = o.new_space(code="MY_SPACE")
    # sp.save()

    # samp = o.get_samples()

    # settings_sample = o.get_sample("/ELN_SETTINGS/GENERAL_ELN_SETTINGS")

    # term = o.get_terms('$DEFAULT_COLLECTION_VIEWS')[0]
    # term.label = 'my_label_new'
    # term.save()
    #
    # sample = o.new_sample(type='ENTRY', experiment='/DEFAULT/DEFAULT/DEFAULT')
    # sample.save()
    # #
    # ds = o.new_dataset(type="RAW_DATA",
    #     sample=sample,
    #     files=['/home/alaskowski/PREMISE/download_test'])
    # ds.save()
    # ds.download(destination='/home/alaskowski/PREMISE/download_test')


    # ds = o.get_dataset('20240418152709712-24')
    # ds.download(destination='/home/alaskowski/PREMISE/download_test')

    # import json
    # eln_settings = json.loads(settings_sample.props['$eln_settings'])
    # eln_settings['inventorySpaces'] += ['MY_SPACE']
    # settings_sample.props['$eln_settings'] = json.dumps(eln_settings)
    # settings_sample.save()

    # o.execute_custom_dss_service('madices', ['a', 'b', 'c'])


    # o._get_username()
    # o.unmount('~/openbis-sis-ci-sprint.ethz.ch')
    # o.mount()
    # done = 1





