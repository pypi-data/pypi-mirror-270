# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from frequenz.api.electricity_trading.v1 import electricity_trading_pb2 as frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2


class ElectricityTradingServiceStub(object):
    """Service providing operations related to order management.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGridpoolOrder = channel.unary_unary(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/CreateGridpoolOrder',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CreateGridpoolOrderRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CreateGridpoolOrderResponse.FromString,
                )
        self.UpdateGridpoolOrder = channel.unary_unary(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/UpdateGridpoolOrder',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.UpdateGridpoolOrderRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.UpdateGridpoolOrderResponse.FromString,
                )
        self.CancelGridpoolOrder = channel.unary_unary(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/CancelGridpoolOrder',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelGridpoolOrderRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelGridpoolOrderResponse.FromString,
                )
        self.CancelAllGridpoolOrders = channel.unary_unary(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/CancelAllGridpoolOrders',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelAllGridpoolOrdersRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelAllGridpoolOrdersResponse.FromString,
                )
        self.GetGridpoolOrder = channel.unary_unary(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/GetGridpoolOrder',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.GetGridpoolOrderRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.GetGridpoolOrderResponse.FromString,
                )
        self.ListGridpoolOrders = channel.unary_unary(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ListGridpoolOrders',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolOrdersRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolOrdersResponse.FromString,
                )
        self.ReceiveGridpoolOrdersStream = channel.unary_stream(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ReceiveGridpoolOrdersStream',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolOrdersStreamRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolOrdersStreamResponse.FromString,
                )
        self.ListGridpoolTrades = channel.unary_unary(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ListGridpoolTrades',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolTradesRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolTradesResponse.FromString,
                )
        self.ReceiveGridpoolTradesStream = channel.unary_stream(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ReceiveGridpoolTradesStream',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolTradesStreamRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolTradesStreamResponse.FromString,
                )
        self.ListPublicTrades = channel.unary_unary(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ListPublicTrades',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListPublicTradesRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListPublicTradesResponse.FromString,
                )
        self.ReceivePublicTradesStream = channel.unary_stream(
                '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ReceivePublicTradesStream',
                request_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceivePublicTradesStreamRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceivePublicTradesStreamResponse.FromString,
                )


class ElectricityTradingServiceServicer(object):
    """Service providing operations related to order management.
    """

    def CreateGridpoolOrder(self, request, context):
        """Creates a new order for a given Gridpool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGridpoolOrder(self, request, context):
        """Updates an existing order for a given Gridpool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelGridpoolOrder(self, request, context):
        """Cancels an existing order for a given Gridpool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelAllGridpoolOrders(self, request, context):
        """Cancels all open orders for a given Gridpool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGridpoolOrder(self, request, context):
        """Fetches the details of a specific order for a given Gridpool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGridpoolOrders(self, request, context):
        """Lists all the orders for a given Gridpool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveGridpoolOrdersStream(self, request, context):
        """Stream order updates for a given Gridpool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGridpoolTrades(self, request, context):
        """Lists all trades for a given Gridpool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveGridpoolTradesStream(self, request, context):
        """Stream trades for a given Gridpool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPublicTrades(self, request, context):
        """Lists all historic public trades.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceivePublicTradesStream(self, request, context):
        """Stream all historic public trades.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ElectricityTradingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGridpoolOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGridpoolOrder,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CreateGridpoolOrderRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CreateGridpoolOrderResponse.SerializeToString,
            ),
            'UpdateGridpoolOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGridpoolOrder,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.UpdateGridpoolOrderRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.UpdateGridpoolOrderResponse.SerializeToString,
            ),
            'CancelGridpoolOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelGridpoolOrder,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelGridpoolOrderRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelGridpoolOrderResponse.SerializeToString,
            ),
            'CancelAllGridpoolOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelAllGridpoolOrders,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelAllGridpoolOrdersRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelAllGridpoolOrdersResponse.SerializeToString,
            ),
            'GetGridpoolOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGridpoolOrder,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.GetGridpoolOrderRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.GetGridpoolOrderResponse.SerializeToString,
            ),
            'ListGridpoolOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGridpoolOrders,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolOrdersRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolOrdersResponse.SerializeToString,
            ),
            'ReceiveGridpoolOrdersStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveGridpoolOrdersStream,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolOrdersStreamRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolOrdersStreamResponse.SerializeToString,
            ),
            'ListGridpoolTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGridpoolTrades,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolTradesRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolTradesResponse.SerializeToString,
            ),
            'ReceiveGridpoolTradesStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveGridpoolTradesStream,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolTradesStreamRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolTradesStreamResponse.SerializeToString,
            ),
            'ListPublicTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPublicTrades,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListPublicTradesRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListPublicTradesResponse.SerializeToString,
            ),
            'ReceivePublicTradesStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceivePublicTradesStream,
                    request_deserializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceivePublicTradesStreamRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceivePublicTradesStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ElectricityTradingService(object):
    """Service providing operations related to order management.
    """

    @staticmethod
    def CreateGridpoolOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/CreateGridpoolOrder',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CreateGridpoolOrderRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CreateGridpoolOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGridpoolOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/UpdateGridpoolOrder',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.UpdateGridpoolOrderRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.UpdateGridpoolOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelGridpoolOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/CancelGridpoolOrder',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelGridpoolOrderRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelGridpoolOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelAllGridpoolOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/CancelAllGridpoolOrders',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelAllGridpoolOrdersRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.CancelAllGridpoolOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGridpoolOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/GetGridpoolOrder',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.GetGridpoolOrderRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.GetGridpoolOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGridpoolOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ListGridpoolOrders',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolOrdersRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveGridpoolOrdersStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ReceiveGridpoolOrdersStream',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolOrdersStreamRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolOrdersStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGridpoolTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ListGridpoolTrades',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolTradesRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListGridpoolTradesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveGridpoolTradesStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ReceiveGridpoolTradesStream',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolTradesStreamRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceiveGridpoolTradesStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPublicTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ListPublicTrades',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListPublicTradesRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ListPublicTradesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceivePublicTradesStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/frequenz.api.electricity_trading.electricity_trading.v1.ElectricityTradingService/ReceivePublicTradesStream',
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceivePublicTradesStreamRequest.SerializeToString,
            frequenz_dot_api_dot_electricity__trading_dot_v1_dot_electricity__trading__pb2.ReceivePublicTradesStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
