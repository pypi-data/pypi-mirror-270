# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NotificationArgs', 'Notification']

@pulumi.input_type
class NotificationArgs:
    def __init__(__self__, *,
                 config_contract: pulumi.Input[str],
                 implementation: pulumi.Input[str],
                 on_movie_delete: pulumi.Input[bool],
                 access_token: Optional[pulumi.Input[str]] = None,
                 access_token_secret: Optional[pulumi.Input[str]] = None,
                 always_update: Optional[pulumi.Input[bool]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 app_token: Optional[pulumi.Input[str]] = None,
                 arguments: Optional[pulumi.Input[str]] = None,
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 auth_username: Optional[pulumi.Input[str]] = None,
                 author: Optional[pulumi.Input[str]] = None,
                 avatar: Optional[pulumi.Input[str]] = None,
                 bccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bot_token: Optional[pulumi.Input[str]] = None,
                 ccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 channel_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 chat_id: Optional[pulumi.Input[str]] = None,
                 clean_library: Optional[pulumi.Input[bool]] = None,
                 click_url: Optional[pulumi.Input[str]] = None,
                 configuration_key: Optional[pulumi.Input[str]] = None,
                 consumer_key: Optional[pulumi.Input[str]] = None,
                 consumer_secret: Optional[pulumi.Input[str]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 device_names: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direct_message: Optional[pulumi.Input[bool]] = None,
                 display_time: Optional[pulumi.Input[int]] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 expire: Optional[pulumi.Input[int]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 grab_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 import_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 map_from: Optional[pulumi.Input[str]] = None,
                 map_to: Optional[pulumi.Input[str]] = None,
                 mention: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_type: Optional[pulumi.Input[int]] = None,
                 notify: Optional[pulumi.Input[bool]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 on_manual_interaction_required: Optional[pulumi.Input[bool]] = None,
                 on_movie_added: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 send_silently: Optional[pulumi.Input[bool]] = None,
                 sender_domain: Optional[pulumi.Input[str]] = None,
                 sender_id: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 sign_in: Optional[pulumi.Input[str]] = None,
                 sound: Optional[pulumi.Input[str]] = None,
                 stateless_urls: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 use_encryption: Optional[pulumi.Input[int]] = None,
                 use_eu_endpoint: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 user_key: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 web_hook_url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Notification resource.
        :param pulumi.Input[str] config_contract: Notification configuration template.
        :param pulumi.Input[str] implementation: Notification implementation name.
        :param pulumi.Input[bool] on_movie_delete: On movie delete flag.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] access_token_secret: Access token secret.
        :param pulumi.Input[bool] always_update: Always update flag.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] app_token: App token.
        :param pulumi.Input[str] arguments: Arguments.
        :param pulumi.Input[str] auth_password: Password.
        :param pulumi.Input[str] auth_token: Auth token.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] auth_username: Username.
        :param pulumi.Input[str] author: Author.
        :param pulumi.Input[str] avatar: Avatar.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bccs: Bcc.
        :param pulumi.Input[str] bot_token: Bot token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ccs: Cc.
        :param pulumi.Input[str] channel: Channel.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_tags: Channel tags.
        :param pulumi.Input[str] chat_id: Chat ID.
        :param pulumi.Input[bool] clean_library: Clean library flag.
        :param pulumi.Input[str] click_url: Click URL.
        :param pulumi.Input[str] configuration_key: Configuration key.
        :param pulumi.Input[str] consumer_key: Consumer key.
        :param pulumi.Input[str] consumer_secret: Consumer secret.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] device_ids: Device IDs.
        :param pulumi.Input[str] device_names: Device names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] devices: Devices.
        :param pulumi.Input[bool] direct_message: Direct message flag.
        :param pulumi.Input[int] display_time: Display time.
        :param pulumi.Input[str] event: Event.
        :param pulumi.Input[int] expire: Expire.
        :param pulumi.Input[str] expires: Expires.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_tags: Specific tags.
        :param pulumi.Input[str] from_: From.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] grab_fields: Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[str] icon: Icon.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] import_fields: Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[str] key: Key.
        :param pulumi.Input[str] map_from: Map From.
        :param pulumi.Input[str] map_to: Map To.
        :param pulumi.Input[str] mention: Mention.
        :param pulumi.Input[int] method: Method. `1` POST, `2` PUT.
        :param pulumi.Input[str] name: Notification name.
        :param pulumi.Input[int] notification_type: Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
        :param pulumi.Input[bool] notify: Notify flag.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_grab: On grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[bool] on_manual_interaction_required: On manual interaction required flag.
        :param pulumi.Input[bool] on_movie_added: On movie added flag.
        :param pulumi.Input[bool] on_movie_file_delete: On movie file delete flag.
        :param pulumi.Input[bool] on_movie_file_delete_for_upgrade: On movie file delete for upgrade flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[str] password: password.
        :param pulumi.Input[str] path: Path.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recipients: Recipients.
        :param pulumi.Input[str] refresh_token: Refresh token.
        :param pulumi.Input[int] retry: Retry.
        :param pulumi.Input[bool] send_silently: Add silently flag.
        :param pulumi.Input[str] sender_domain: Sender domain.
        :param pulumi.Input[str] sender_id: Sender ID.
        :param pulumi.Input[str] server: server.
        :param pulumi.Input[str] server_url: Server url.
        :param pulumi.Input[str] sign_in: Sign in.
        :param pulumi.Input[str] sound: Sound.
        :param pulumi.Input[str] stateless_urls: Stateless URLs.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] token: Token.
        :param pulumi.Input[str] topic_id: Topic ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: Topics.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: To.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[str] url: URL.
        :param pulumi.Input[int] use_encryption: Require encryption. `0` Preferred, `1` Always, `2` Never.
        :param pulumi.Input[bool] use_eu_endpoint: Use EU endpoint flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        :param pulumi.Input[str] user_key: User key.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] web_hook_url: Web hook url.
        """
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "on_movie_delete", on_movie_delete)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if access_token_secret is not None:
            pulumi.set(__self__, "access_token_secret", access_token_secret)
        if always_update is not None:
            pulumi.set(__self__, "always_update", always_update)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_token is not None:
            pulumi.set(__self__, "app_token", app_token)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if auth_password is not None:
            pulumi.set(__self__, "auth_password", auth_password)
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if auth_user is not None:
            pulumi.set(__self__, "auth_user", auth_user)
        if auth_username is not None:
            pulumi.set(__self__, "auth_username", auth_username)
        if author is not None:
            pulumi.set(__self__, "author", author)
        if avatar is not None:
            pulumi.set(__self__, "avatar", avatar)
        if bccs is not None:
            pulumi.set(__self__, "bccs", bccs)
        if bot_token is not None:
            pulumi.set(__self__, "bot_token", bot_token)
        if ccs is not None:
            pulumi.set(__self__, "ccs", ccs)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channel_tags is not None:
            pulumi.set(__self__, "channel_tags", channel_tags)
        if chat_id is not None:
            pulumi.set(__self__, "chat_id", chat_id)
        if clean_library is not None:
            pulumi.set(__self__, "clean_library", clean_library)
        if click_url is not None:
            pulumi.set(__self__, "click_url", click_url)
        if configuration_key is not None:
            pulumi.set(__self__, "configuration_key", configuration_key)
        if consumer_key is not None:
            pulumi.set(__self__, "consumer_key", consumer_key)
        if consumer_secret is not None:
            pulumi.set(__self__, "consumer_secret", consumer_secret)
        if device_ids is not None:
            pulumi.set(__self__, "device_ids", device_ids)
        if device_names is not None:
            pulumi.set(__self__, "device_names", device_names)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if direct_message is not None:
            pulumi.set(__self__, "direct_message", direct_message)
        if display_time is not None:
            pulumi.set(__self__, "display_time", display_time)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if field_tags is not None:
            pulumi.set(__self__, "field_tags", field_tags)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if grab_fields is not None:
            pulumi.set(__self__, "grab_fields", grab_fields)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if import_fields is not None:
            pulumi.set(__self__, "import_fields", import_fields)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if map_from is not None:
            pulumi.set(__self__, "map_from", map_from)
        if map_to is not None:
            pulumi.set(__self__, "map_to", map_to)
        if mention is not None:
            pulumi.set(__self__, "mention", mention)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if notify is not None:
            pulumi.set(__self__, "notify", notify)
        if on_application_update is not None:
            pulumi.set(__self__, "on_application_update", on_application_update)
        if on_download is not None:
            pulumi.set(__self__, "on_download", on_download)
        if on_grab is not None:
            pulumi.set(__self__, "on_grab", on_grab)
        if on_health_issue is not None:
            pulumi.set(__self__, "on_health_issue", on_health_issue)
        if on_health_restored is not None:
            pulumi.set(__self__, "on_health_restored", on_health_restored)
        if on_manual_interaction_required is not None:
            pulumi.set(__self__, "on_manual_interaction_required", on_manual_interaction_required)
        if on_movie_added is not None:
            pulumi.set(__self__, "on_movie_added", on_movie_added)
        if on_movie_file_delete is not None:
            pulumi.set(__self__, "on_movie_file_delete", on_movie_file_delete)
        if on_movie_file_delete_for_upgrade is not None:
            pulumi.set(__self__, "on_movie_file_delete_for_upgrade", on_movie_file_delete_for_upgrade)
        if on_rename is not None:
            pulumi.set(__self__, "on_rename", on_rename)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if send_silently is not None:
            pulumi.set(__self__, "send_silently", send_silently)
        if sender_domain is not None:
            pulumi.set(__self__, "sender_domain", sender_domain)
        if sender_id is not None:
            pulumi.set(__self__, "sender_id", sender_id)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if sign_in is not None:
            pulumi.set(__self__, "sign_in", sign_in)
        if sound is not None:
            pulumi.set(__self__, "sound", sound)
        if stateless_urls is not None:
            pulumi.set(__self__, "stateless_urls", stateless_urls)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if update_library is not None:
            pulumi.set(__self__, "update_library", update_library)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if use_encryption is not None:
            pulumi.set(__self__, "use_encryption", use_encryption)
        if use_eu_endpoint is not None:
            pulumi.set(__self__, "use_eu_endpoint", use_eu_endpoint)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)
        if user_key is not None:
            pulumi.set(__self__, "user_key", user_key)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if web_hook_url is not None:
            pulumi.set(__self__, "web_hook_url", web_hook_url)

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> pulumi.Input[str]:
        """
        Notification configuration template.
        """
        return pulumi.get(self, "config_contract")

    @config_contract.setter
    def config_contract(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_contract", value)

    @property
    @pulumi.getter
    def implementation(self) -> pulumi.Input[str]:
        """
        Notification implementation name.
        """
        return pulumi.get(self, "implementation")

    @implementation.setter
    def implementation(self, value: pulumi.Input[str]):
        pulumi.set(self, "implementation", value)

    @property
    @pulumi.getter(name="onMovieDelete")
    def on_movie_delete(self) -> pulumi.Input[bool]:
        """
        On movie delete flag.
        """
        return pulumi.get(self, "on_movie_delete")

    @on_movie_delete.setter
    def on_movie_delete(self, value: pulumi.Input[bool]):
        pulumi.set(self, "on_movie_delete", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="accessTokenSecret")
    def access_token_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Access token secret.
        """
        return pulumi.get(self, "access_token_secret")

    @access_token_secret.setter
    def access_token_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_secret", value)

    @property
    @pulumi.getter(name="alwaysUpdate")
    def always_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Always update flag.
        """
        return pulumi.get(self, "always_update")

    @always_update.setter
    def always_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_update", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> Optional[pulumi.Input[str]]:
        """
        App token.
        """
        return pulumi.get(self, "app_token")

    @app_token.setter
    def app_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_token", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        """
        Arguments.
        """
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "auth_password")

    @auth_password.setter
    def auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password", value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        Auth token.
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> Optional[pulumi.Input[str]]:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @auth_user.setter
    def auth_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_user", value)

    @property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "auth_username")

    @auth_username.setter
    def auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_username", value)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        Author.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def avatar(self) -> Optional[pulumi.Input[str]]:
        """
        Avatar.
        """
        return pulumi.get(self, "avatar")

    @avatar.setter
    def avatar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar", value)

    @property
    @pulumi.getter
    def bccs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Bcc.
        """
        return pulumi.get(self, "bccs")

    @bccs.setter
    def bccs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bccs", value)

    @property
    @pulumi.getter(name="botToken")
    def bot_token(self) -> Optional[pulumi.Input[str]]:
        """
        Bot token.
        """
        return pulumi.get(self, "bot_token")

    @bot_token.setter
    def bot_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bot_token", value)

    @property
    @pulumi.getter
    def ccs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cc.
        """
        return pulumi.get(self, "ccs")

    @ccs.setter
    def ccs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ccs", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[str]]:
        """
        Channel.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="channelTags")
    def channel_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Channel tags.
        """
        return pulumi.get(self, "channel_tags")

    @channel_tags.setter
    def channel_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_tags", value)

    @property
    @pulumi.getter(name="chatId")
    def chat_id(self) -> Optional[pulumi.Input[str]]:
        """
        Chat ID.
        """
        return pulumi.get(self, "chat_id")

    @chat_id.setter
    def chat_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chat_id", value)

    @property
    @pulumi.getter(name="cleanLibrary")
    def clean_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Clean library flag.
        """
        return pulumi.get(self, "clean_library")

    @clean_library.setter
    def clean_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clean_library", value)

    @property
    @pulumi.getter(name="clickUrl")
    def click_url(self) -> Optional[pulumi.Input[str]]:
        """
        Click URL.
        """
        return pulumi.get(self, "click_url")

    @click_url.setter
    def click_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "click_url", value)

    @property
    @pulumi.getter(name="configurationKey")
    def configuration_key(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration key.
        """
        return pulumi.get(self, "configuration_key")

    @configuration_key.setter
    def configuration_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_key", value)

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> Optional[pulumi.Input[str]]:
        """
        Consumer key.
        """
        return pulumi.get(self, "consumer_key")

    @consumer_key.setter
    def consumer_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_key", value)

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Consumer secret.
        """
        return pulumi.get(self, "consumer_secret")

    @consumer_secret.setter
    def consumer_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_secret", value)

    @property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Device IDs.
        """
        return pulumi.get(self, "device_ids")

    @device_ids.setter
    def device_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_ids", value)

    @property
    @pulumi.getter(name="deviceNames")
    def device_names(self) -> Optional[pulumi.Input[str]]:
        """
        Device names.
        """
        return pulumi.get(self, "device_names")

    @device_names.setter
    def device_names(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_names", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Devices.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="directMessage")
    def direct_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Direct message flag.
        """
        return pulumi.get(self, "direct_message")

    @direct_message.setter
    def direct_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "direct_message", value)

    @property
    @pulumi.getter(name="displayTime")
    def display_time(self) -> Optional[pulumi.Input[int]]:
        """
        Display time.
        """
        return pulumi.get(self, "display_time")

    @display_time.setter
    def display_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "display_time", value)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input[str]]:
        """
        Event.
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter
    def expire(self) -> Optional[pulumi.Input[int]]:
        """
        Expire.
        """
        return pulumi.get(self, "expire")

    @expire.setter
    def expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specific tags.
        """
        return pulumi.get(self, "field_tags")

    @field_tags.setter
    def field_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "field_tags", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        From.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter(name="grabFields")
    def grab_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.
        """
        return pulumi.get(self, "grab_fields")

    @grab_fields.setter
    def grab_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "grab_fields", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        Icon.
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="importFields")
    def import_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        """
        return pulumi.get(self, "import_fields")

    @import_fields.setter
    def import_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "import_fields", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="mapFrom")
    def map_from(self) -> Optional[pulumi.Input[str]]:
        """
        Map From.
        """
        return pulumi.get(self, "map_from")

    @map_from.setter
    def map_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_from", value)

    @property
    @pulumi.getter(name="mapTo")
    def map_to(self) -> Optional[pulumi.Input[str]]:
        """
        Map To.
        """
        return pulumi.get(self, "map_to")

    @map_to.setter
    def map_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_to", value)

    @property
    @pulumi.getter
    def mention(self) -> Optional[pulumi.Input[str]]:
        """
        Mention.
        """
        return pulumi.get(self, "mention")

    @mention.setter
    def mention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mention", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[int]]:
        """
        Method. `1` POST, `2` PUT.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Notification name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[pulumi.Input[int]]:
        """
        Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
        """
        return pulumi.get(self, "notification_type")

    @notification_type.setter
    def notification_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notification_type", value)

    @property
    @pulumi.getter
    def notify(self) -> Optional[pulumi.Input[bool]]:
        """
        Notify flag.
        """
        return pulumi.get(self, "notify")

    @notify.setter
    def notify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify", value)

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> Optional[pulumi.Input[bool]]:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @on_application_update.setter
    def on_application_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_application_update", value)

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> Optional[pulumi.Input[bool]]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @on_download.setter
    def on_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_download", value)

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> Optional[pulumi.Input[bool]]:
        """
        On grab flag.
        """
        return pulumi.get(self, "on_grab")

    @on_grab.setter
    def on_grab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_grab", value)

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> Optional[pulumi.Input[bool]]:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @on_health_issue.setter
    def on_health_issue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_issue", value)

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> Optional[pulumi.Input[bool]]:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @on_health_restored.setter
    def on_health_restored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_restored", value)

    @property
    @pulumi.getter(name="onManualInteractionRequired")
    def on_manual_interaction_required(self) -> Optional[pulumi.Input[bool]]:
        """
        On manual interaction required flag.
        """
        return pulumi.get(self, "on_manual_interaction_required")

    @on_manual_interaction_required.setter
    def on_manual_interaction_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_manual_interaction_required", value)

    @property
    @pulumi.getter(name="onMovieAdded")
    def on_movie_added(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie added flag.
        """
        return pulumi.get(self, "on_movie_added")

    @on_movie_added.setter
    def on_movie_added(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_added", value)

    @property
    @pulumi.getter(name="onMovieFileDelete")
    def on_movie_file_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie file delete flag.
        """
        return pulumi.get(self, "on_movie_file_delete")

    @on_movie_file_delete.setter
    def on_movie_file_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_file_delete", value)

    @property
    @pulumi.getter(name="onMovieFileDeleteForUpgrade")
    def on_movie_file_delete_for_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie file delete for upgrade flag.
        """
        return pulumi.get(self, "on_movie_file_delete_for_upgrade")

    @on_movie_file_delete_for_upgrade.setter
    def on_movie_file_delete_for_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_file_delete_for_upgrade", value)

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> Optional[pulumi.Input[bool]]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @on_rename.setter
    def on_rename(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_rename", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Recipients.
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input[int]]:
        """
        Retry.
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter(name="sendSilently")
    def send_silently(self) -> Optional[pulumi.Input[bool]]:
        """
        Add silently flag.
        """
        return pulumi.get(self, "send_silently")

    @send_silently.setter
    def send_silently(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_silently", value)

    @property
    @pulumi.getter(name="senderDomain")
    def sender_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Sender domain.
        """
        return pulumi.get(self, "sender_domain")

    @sender_domain.setter
    def sender_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sender_domain", value)

    @property
    @pulumi.getter(name="senderId")
    def sender_id(self) -> Optional[pulumi.Input[str]]:
        """
        Sender ID.
        """
        return pulumi.get(self, "sender_id")

    @sender_id.setter
    def sender_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sender_id", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        """
        Server url.
        """
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)

    @property
    @pulumi.getter(name="signIn")
    def sign_in(self) -> Optional[pulumi.Input[str]]:
        """
        Sign in.
        """
        return pulumi.get(self, "sign_in")

    @sign_in.setter
    def sign_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in", value)

    @property
    @pulumi.getter
    def sound(self) -> Optional[pulumi.Input[str]]:
        """
        Sound.
        """
        return pulumi.get(self, "sound")

    @sound.setter
    def sound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sound", value)

    @property
    @pulumi.getter(name="statelessUrls")
    def stateless_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Stateless URLs.
        """
        return pulumi.get(self, "stateless_urls")

    @stateless_urls.setter
    def stateless_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stateless_urls", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Token.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Topic ID.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter
    def topics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Topics.
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topics", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        To.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @update_library.setter
    def update_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_library", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="useEncryption")
    def use_encryption(self) -> Optional[pulumi.Input[int]]:
        """
        Require encryption. `0` Preferred, `1` Always, `2` Never.
        """
        return pulumi.get(self, "use_encryption")

    @use_encryption.setter
    def use_encryption(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "use_encryption", value)

    @property
    @pulumi.getter(name="useEuEndpoint")
    def use_eu_endpoint(self) -> Optional[pulumi.Input[bool]]:
        """
        Use EU endpoint flag.
        """
        return pulumi.get(self, "use_eu_endpoint")

    @use_eu_endpoint.setter
    def use_eu_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_eu_endpoint", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)

    @property
    @pulumi.getter(name="userKey")
    def user_key(self) -> Optional[pulumi.Input[str]]:
        """
        User key.
        """
        return pulumi.get(self, "user_key")

    @user_key.setter
    def user_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_key", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="webHookUrl")
    def web_hook_url(self) -> Optional[pulumi.Input[str]]:
        """
        Web hook url.
        """
        return pulumi.get(self, "web_hook_url")

    @web_hook_url.setter
    def web_hook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_hook_url", value)


@pulumi.input_type
class _NotificationState:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 access_token_secret: Optional[pulumi.Input[str]] = None,
                 always_update: Optional[pulumi.Input[bool]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 app_token: Optional[pulumi.Input[str]] = None,
                 arguments: Optional[pulumi.Input[str]] = None,
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 auth_username: Optional[pulumi.Input[str]] = None,
                 author: Optional[pulumi.Input[str]] = None,
                 avatar: Optional[pulumi.Input[str]] = None,
                 bccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bot_token: Optional[pulumi.Input[str]] = None,
                 ccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 channel_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 chat_id: Optional[pulumi.Input[str]] = None,
                 clean_library: Optional[pulumi.Input[bool]] = None,
                 click_url: Optional[pulumi.Input[str]] = None,
                 config_contract: Optional[pulumi.Input[str]] = None,
                 configuration_key: Optional[pulumi.Input[str]] = None,
                 consumer_key: Optional[pulumi.Input[str]] = None,
                 consumer_secret: Optional[pulumi.Input[str]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 device_names: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direct_message: Optional[pulumi.Input[bool]] = None,
                 display_time: Optional[pulumi.Input[int]] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 expire: Optional[pulumi.Input[int]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 grab_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 implementation: Optional[pulumi.Input[str]] = None,
                 import_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 map_from: Optional[pulumi.Input[str]] = None,
                 map_to: Optional[pulumi.Input[str]] = None,
                 mention: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_type: Optional[pulumi.Input[int]] = None,
                 notify: Optional[pulumi.Input[bool]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 on_manual_interaction_required: Optional[pulumi.Input[bool]] = None,
                 on_movie_added: Optional[pulumi.Input[bool]] = None,
                 on_movie_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 send_silently: Optional[pulumi.Input[bool]] = None,
                 sender_domain: Optional[pulumi.Input[str]] = None,
                 sender_id: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 sign_in: Optional[pulumi.Input[str]] = None,
                 sound: Optional[pulumi.Input[str]] = None,
                 stateless_urls: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 use_encryption: Optional[pulumi.Input[int]] = None,
                 use_eu_endpoint: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 user_key: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 web_hook_url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Notification resources.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] access_token_secret: Access token secret.
        :param pulumi.Input[bool] always_update: Always update flag.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] app_token: App token.
        :param pulumi.Input[str] arguments: Arguments.
        :param pulumi.Input[str] auth_password: Password.
        :param pulumi.Input[str] auth_token: Auth token.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] auth_username: Username.
        :param pulumi.Input[str] author: Author.
        :param pulumi.Input[str] avatar: Avatar.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bccs: Bcc.
        :param pulumi.Input[str] bot_token: Bot token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ccs: Cc.
        :param pulumi.Input[str] channel: Channel.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_tags: Channel tags.
        :param pulumi.Input[str] chat_id: Chat ID.
        :param pulumi.Input[bool] clean_library: Clean library flag.
        :param pulumi.Input[str] click_url: Click URL.
        :param pulumi.Input[str] config_contract: Notification configuration template.
        :param pulumi.Input[str] configuration_key: Configuration key.
        :param pulumi.Input[str] consumer_key: Consumer key.
        :param pulumi.Input[str] consumer_secret: Consumer secret.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] device_ids: Device IDs.
        :param pulumi.Input[str] device_names: Device names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] devices: Devices.
        :param pulumi.Input[bool] direct_message: Direct message flag.
        :param pulumi.Input[int] display_time: Display time.
        :param pulumi.Input[str] event: Event.
        :param pulumi.Input[int] expire: Expire.
        :param pulumi.Input[str] expires: Expires.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_tags: Specific tags.
        :param pulumi.Input[str] from_: From.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] grab_fields: Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[str] icon: Icon.
        :param pulumi.Input[str] implementation: Notification implementation name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] import_fields: Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[str] key: Key.
        :param pulumi.Input[str] map_from: Map From.
        :param pulumi.Input[str] map_to: Map To.
        :param pulumi.Input[str] mention: Mention.
        :param pulumi.Input[int] method: Method. `1` POST, `2` PUT.
        :param pulumi.Input[str] name: Notification name.
        :param pulumi.Input[int] notification_type: Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
        :param pulumi.Input[bool] notify: Notify flag.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_grab: On grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[bool] on_manual_interaction_required: On manual interaction required flag.
        :param pulumi.Input[bool] on_movie_added: On movie added flag.
        :param pulumi.Input[bool] on_movie_delete: On movie delete flag.
        :param pulumi.Input[bool] on_movie_file_delete: On movie file delete flag.
        :param pulumi.Input[bool] on_movie_file_delete_for_upgrade: On movie file delete for upgrade flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[str] password: password.
        :param pulumi.Input[str] path: Path.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recipients: Recipients.
        :param pulumi.Input[str] refresh_token: Refresh token.
        :param pulumi.Input[int] retry: Retry.
        :param pulumi.Input[bool] send_silently: Add silently flag.
        :param pulumi.Input[str] sender_domain: Sender domain.
        :param pulumi.Input[str] sender_id: Sender ID.
        :param pulumi.Input[str] server: server.
        :param pulumi.Input[str] server_url: Server url.
        :param pulumi.Input[str] sign_in: Sign in.
        :param pulumi.Input[str] sound: Sound.
        :param pulumi.Input[str] stateless_urls: Stateless URLs.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] token: Token.
        :param pulumi.Input[str] topic_id: Topic ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: Topics.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: To.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[str] url: URL.
        :param pulumi.Input[int] use_encryption: Require encryption. `0` Preferred, `1` Always, `2` Never.
        :param pulumi.Input[bool] use_eu_endpoint: Use EU endpoint flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        :param pulumi.Input[str] user_key: User key.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] web_hook_url: Web hook url.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if access_token_secret is not None:
            pulumi.set(__self__, "access_token_secret", access_token_secret)
        if always_update is not None:
            pulumi.set(__self__, "always_update", always_update)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_token is not None:
            pulumi.set(__self__, "app_token", app_token)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if auth_password is not None:
            pulumi.set(__self__, "auth_password", auth_password)
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if auth_user is not None:
            pulumi.set(__self__, "auth_user", auth_user)
        if auth_username is not None:
            pulumi.set(__self__, "auth_username", auth_username)
        if author is not None:
            pulumi.set(__self__, "author", author)
        if avatar is not None:
            pulumi.set(__self__, "avatar", avatar)
        if bccs is not None:
            pulumi.set(__self__, "bccs", bccs)
        if bot_token is not None:
            pulumi.set(__self__, "bot_token", bot_token)
        if ccs is not None:
            pulumi.set(__self__, "ccs", ccs)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channel_tags is not None:
            pulumi.set(__self__, "channel_tags", channel_tags)
        if chat_id is not None:
            pulumi.set(__self__, "chat_id", chat_id)
        if clean_library is not None:
            pulumi.set(__self__, "clean_library", clean_library)
        if click_url is not None:
            pulumi.set(__self__, "click_url", click_url)
        if config_contract is not None:
            pulumi.set(__self__, "config_contract", config_contract)
        if configuration_key is not None:
            pulumi.set(__self__, "configuration_key", configuration_key)
        if consumer_key is not None:
            pulumi.set(__self__, "consumer_key", consumer_key)
        if consumer_secret is not None:
            pulumi.set(__self__, "consumer_secret", consumer_secret)
        if device_ids is not None:
            pulumi.set(__self__, "device_ids", device_ids)
        if device_names is not None:
            pulumi.set(__self__, "device_names", device_names)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if direct_message is not None:
            pulumi.set(__self__, "direct_message", direct_message)
        if display_time is not None:
            pulumi.set(__self__, "display_time", display_time)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if field_tags is not None:
            pulumi.set(__self__, "field_tags", field_tags)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if grab_fields is not None:
            pulumi.set(__self__, "grab_fields", grab_fields)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if implementation is not None:
            pulumi.set(__self__, "implementation", implementation)
        if import_fields is not None:
            pulumi.set(__self__, "import_fields", import_fields)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if map_from is not None:
            pulumi.set(__self__, "map_from", map_from)
        if map_to is not None:
            pulumi.set(__self__, "map_to", map_to)
        if mention is not None:
            pulumi.set(__self__, "mention", mention)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if notify is not None:
            pulumi.set(__self__, "notify", notify)
        if on_application_update is not None:
            pulumi.set(__self__, "on_application_update", on_application_update)
        if on_download is not None:
            pulumi.set(__self__, "on_download", on_download)
        if on_grab is not None:
            pulumi.set(__self__, "on_grab", on_grab)
        if on_health_issue is not None:
            pulumi.set(__self__, "on_health_issue", on_health_issue)
        if on_health_restored is not None:
            pulumi.set(__self__, "on_health_restored", on_health_restored)
        if on_manual_interaction_required is not None:
            pulumi.set(__self__, "on_manual_interaction_required", on_manual_interaction_required)
        if on_movie_added is not None:
            pulumi.set(__self__, "on_movie_added", on_movie_added)
        if on_movie_delete is not None:
            pulumi.set(__self__, "on_movie_delete", on_movie_delete)
        if on_movie_file_delete is not None:
            pulumi.set(__self__, "on_movie_file_delete", on_movie_file_delete)
        if on_movie_file_delete_for_upgrade is not None:
            pulumi.set(__self__, "on_movie_file_delete_for_upgrade", on_movie_file_delete_for_upgrade)
        if on_rename is not None:
            pulumi.set(__self__, "on_rename", on_rename)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if send_silently is not None:
            pulumi.set(__self__, "send_silently", send_silently)
        if sender_domain is not None:
            pulumi.set(__self__, "sender_domain", sender_domain)
        if sender_id is not None:
            pulumi.set(__self__, "sender_id", sender_id)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if sign_in is not None:
            pulumi.set(__self__, "sign_in", sign_in)
        if sound is not None:
            pulumi.set(__self__, "sound", sound)
        if stateless_urls is not None:
            pulumi.set(__self__, "stateless_urls", stateless_urls)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if update_library is not None:
            pulumi.set(__self__, "update_library", update_library)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if use_encryption is not None:
            pulumi.set(__self__, "use_encryption", use_encryption)
        if use_eu_endpoint is not None:
            pulumi.set(__self__, "use_eu_endpoint", use_eu_endpoint)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)
        if user_key is not None:
            pulumi.set(__self__, "user_key", user_key)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if web_hook_url is not None:
            pulumi.set(__self__, "web_hook_url", web_hook_url)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="accessTokenSecret")
    def access_token_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Access token secret.
        """
        return pulumi.get(self, "access_token_secret")

    @access_token_secret.setter
    def access_token_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_secret", value)

    @property
    @pulumi.getter(name="alwaysUpdate")
    def always_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Always update flag.
        """
        return pulumi.get(self, "always_update")

    @always_update.setter
    def always_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_update", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> Optional[pulumi.Input[str]]:
        """
        App token.
        """
        return pulumi.get(self, "app_token")

    @app_token.setter
    def app_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_token", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        """
        Arguments.
        """
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "auth_password")

    @auth_password.setter
    def auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password", value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        Auth token.
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> Optional[pulumi.Input[str]]:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @auth_user.setter
    def auth_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_user", value)

    @property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "auth_username")

    @auth_username.setter
    def auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_username", value)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        Author.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def avatar(self) -> Optional[pulumi.Input[str]]:
        """
        Avatar.
        """
        return pulumi.get(self, "avatar")

    @avatar.setter
    def avatar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar", value)

    @property
    @pulumi.getter
    def bccs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Bcc.
        """
        return pulumi.get(self, "bccs")

    @bccs.setter
    def bccs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bccs", value)

    @property
    @pulumi.getter(name="botToken")
    def bot_token(self) -> Optional[pulumi.Input[str]]:
        """
        Bot token.
        """
        return pulumi.get(self, "bot_token")

    @bot_token.setter
    def bot_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bot_token", value)

    @property
    @pulumi.getter
    def ccs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cc.
        """
        return pulumi.get(self, "ccs")

    @ccs.setter
    def ccs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ccs", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[str]]:
        """
        Channel.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="channelTags")
    def channel_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Channel tags.
        """
        return pulumi.get(self, "channel_tags")

    @channel_tags.setter
    def channel_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_tags", value)

    @property
    @pulumi.getter(name="chatId")
    def chat_id(self) -> Optional[pulumi.Input[str]]:
        """
        Chat ID.
        """
        return pulumi.get(self, "chat_id")

    @chat_id.setter
    def chat_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chat_id", value)

    @property
    @pulumi.getter(name="cleanLibrary")
    def clean_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Clean library flag.
        """
        return pulumi.get(self, "clean_library")

    @clean_library.setter
    def clean_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clean_library", value)

    @property
    @pulumi.getter(name="clickUrl")
    def click_url(self) -> Optional[pulumi.Input[str]]:
        """
        Click URL.
        """
        return pulumi.get(self, "click_url")

    @click_url.setter
    def click_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "click_url", value)

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> Optional[pulumi.Input[str]]:
        """
        Notification configuration template.
        """
        return pulumi.get(self, "config_contract")

    @config_contract.setter
    def config_contract(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_contract", value)

    @property
    @pulumi.getter(name="configurationKey")
    def configuration_key(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration key.
        """
        return pulumi.get(self, "configuration_key")

    @configuration_key.setter
    def configuration_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_key", value)

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> Optional[pulumi.Input[str]]:
        """
        Consumer key.
        """
        return pulumi.get(self, "consumer_key")

    @consumer_key.setter
    def consumer_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_key", value)

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Consumer secret.
        """
        return pulumi.get(self, "consumer_secret")

    @consumer_secret.setter
    def consumer_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_secret", value)

    @property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Device IDs.
        """
        return pulumi.get(self, "device_ids")

    @device_ids.setter
    def device_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_ids", value)

    @property
    @pulumi.getter(name="deviceNames")
    def device_names(self) -> Optional[pulumi.Input[str]]:
        """
        Device names.
        """
        return pulumi.get(self, "device_names")

    @device_names.setter
    def device_names(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_names", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Devices.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="directMessage")
    def direct_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Direct message flag.
        """
        return pulumi.get(self, "direct_message")

    @direct_message.setter
    def direct_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "direct_message", value)

    @property
    @pulumi.getter(name="displayTime")
    def display_time(self) -> Optional[pulumi.Input[int]]:
        """
        Display time.
        """
        return pulumi.get(self, "display_time")

    @display_time.setter
    def display_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "display_time", value)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input[str]]:
        """
        Event.
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter
    def expire(self) -> Optional[pulumi.Input[int]]:
        """
        Expire.
        """
        return pulumi.get(self, "expire")

    @expire.setter
    def expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specific tags.
        """
        return pulumi.get(self, "field_tags")

    @field_tags.setter
    def field_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "field_tags", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        From.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter(name="grabFields")
    def grab_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.
        """
        return pulumi.get(self, "grab_fields")

    @grab_fields.setter
    def grab_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "grab_fields", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        Icon.
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def implementation(self) -> Optional[pulumi.Input[str]]:
        """
        Notification implementation name.
        """
        return pulumi.get(self, "implementation")

    @implementation.setter
    def implementation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "implementation", value)

    @property
    @pulumi.getter(name="importFields")
    def import_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        """
        return pulumi.get(self, "import_fields")

    @import_fields.setter
    def import_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "import_fields", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="mapFrom")
    def map_from(self) -> Optional[pulumi.Input[str]]:
        """
        Map From.
        """
        return pulumi.get(self, "map_from")

    @map_from.setter
    def map_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_from", value)

    @property
    @pulumi.getter(name="mapTo")
    def map_to(self) -> Optional[pulumi.Input[str]]:
        """
        Map To.
        """
        return pulumi.get(self, "map_to")

    @map_to.setter
    def map_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_to", value)

    @property
    @pulumi.getter
    def mention(self) -> Optional[pulumi.Input[str]]:
        """
        Mention.
        """
        return pulumi.get(self, "mention")

    @mention.setter
    def mention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mention", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[int]]:
        """
        Method. `1` POST, `2` PUT.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Notification name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[pulumi.Input[int]]:
        """
        Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
        """
        return pulumi.get(self, "notification_type")

    @notification_type.setter
    def notification_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notification_type", value)

    @property
    @pulumi.getter
    def notify(self) -> Optional[pulumi.Input[bool]]:
        """
        Notify flag.
        """
        return pulumi.get(self, "notify")

    @notify.setter
    def notify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify", value)

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> Optional[pulumi.Input[bool]]:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @on_application_update.setter
    def on_application_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_application_update", value)

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> Optional[pulumi.Input[bool]]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @on_download.setter
    def on_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_download", value)

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> Optional[pulumi.Input[bool]]:
        """
        On grab flag.
        """
        return pulumi.get(self, "on_grab")

    @on_grab.setter
    def on_grab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_grab", value)

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> Optional[pulumi.Input[bool]]:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @on_health_issue.setter
    def on_health_issue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_issue", value)

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> Optional[pulumi.Input[bool]]:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @on_health_restored.setter
    def on_health_restored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_restored", value)

    @property
    @pulumi.getter(name="onManualInteractionRequired")
    def on_manual_interaction_required(self) -> Optional[pulumi.Input[bool]]:
        """
        On manual interaction required flag.
        """
        return pulumi.get(self, "on_manual_interaction_required")

    @on_manual_interaction_required.setter
    def on_manual_interaction_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_manual_interaction_required", value)

    @property
    @pulumi.getter(name="onMovieAdded")
    def on_movie_added(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie added flag.
        """
        return pulumi.get(self, "on_movie_added")

    @on_movie_added.setter
    def on_movie_added(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_added", value)

    @property
    @pulumi.getter(name="onMovieDelete")
    def on_movie_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie delete flag.
        """
        return pulumi.get(self, "on_movie_delete")

    @on_movie_delete.setter
    def on_movie_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_delete", value)

    @property
    @pulumi.getter(name="onMovieFileDelete")
    def on_movie_file_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie file delete flag.
        """
        return pulumi.get(self, "on_movie_file_delete")

    @on_movie_file_delete.setter
    def on_movie_file_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_file_delete", value)

    @property
    @pulumi.getter(name="onMovieFileDeleteForUpgrade")
    def on_movie_file_delete_for_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie file delete for upgrade flag.
        """
        return pulumi.get(self, "on_movie_file_delete_for_upgrade")

    @on_movie_file_delete_for_upgrade.setter
    def on_movie_file_delete_for_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_file_delete_for_upgrade", value)

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> Optional[pulumi.Input[bool]]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @on_rename.setter
    def on_rename(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_rename", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Recipients.
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input[int]]:
        """
        Retry.
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter(name="sendSilently")
    def send_silently(self) -> Optional[pulumi.Input[bool]]:
        """
        Add silently flag.
        """
        return pulumi.get(self, "send_silently")

    @send_silently.setter
    def send_silently(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_silently", value)

    @property
    @pulumi.getter(name="senderDomain")
    def sender_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Sender domain.
        """
        return pulumi.get(self, "sender_domain")

    @sender_domain.setter
    def sender_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sender_domain", value)

    @property
    @pulumi.getter(name="senderId")
    def sender_id(self) -> Optional[pulumi.Input[str]]:
        """
        Sender ID.
        """
        return pulumi.get(self, "sender_id")

    @sender_id.setter
    def sender_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sender_id", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        """
        Server url.
        """
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)

    @property
    @pulumi.getter(name="signIn")
    def sign_in(self) -> Optional[pulumi.Input[str]]:
        """
        Sign in.
        """
        return pulumi.get(self, "sign_in")

    @sign_in.setter
    def sign_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in", value)

    @property
    @pulumi.getter
    def sound(self) -> Optional[pulumi.Input[str]]:
        """
        Sound.
        """
        return pulumi.get(self, "sound")

    @sound.setter
    def sound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sound", value)

    @property
    @pulumi.getter(name="statelessUrls")
    def stateless_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Stateless URLs.
        """
        return pulumi.get(self, "stateless_urls")

    @stateless_urls.setter
    def stateless_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stateless_urls", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Token.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Topic ID.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter
    def topics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Topics.
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topics", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        To.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @update_library.setter
    def update_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_library", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="useEncryption")
    def use_encryption(self) -> Optional[pulumi.Input[int]]:
        """
        Require encryption. `0` Preferred, `1` Always, `2` Never.
        """
        return pulumi.get(self, "use_encryption")

    @use_encryption.setter
    def use_encryption(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "use_encryption", value)

    @property
    @pulumi.getter(name="useEuEndpoint")
    def use_eu_endpoint(self) -> Optional[pulumi.Input[bool]]:
        """
        Use EU endpoint flag.
        """
        return pulumi.get(self, "use_eu_endpoint")

    @use_eu_endpoint.setter
    def use_eu_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_eu_endpoint", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)

    @property
    @pulumi.getter(name="userKey")
    def user_key(self) -> Optional[pulumi.Input[str]]:
        """
        User key.
        """
        return pulumi.get(self, "user_key")

    @user_key.setter
    def user_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_key", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="webHookUrl")
    def web_hook_url(self) -> Optional[pulumi.Input[str]]:
        """
        Web hook url.
        """
        return pulumi.get(self, "web_hook_url")

    @web_hook_url.setter
    def web_hook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_hook_url", value)


class Notification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 access_token_secret: Optional[pulumi.Input[str]] = None,
                 always_update: Optional[pulumi.Input[bool]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 app_token: Optional[pulumi.Input[str]] = None,
                 arguments: Optional[pulumi.Input[str]] = None,
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 auth_username: Optional[pulumi.Input[str]] = None,
                 author: Optional[pulumi.Input[str]] = None,
                 avatar: Optional[pulumi.Input[str]] = None,
                 bccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bot_token: Optional[pulumi.Input[str]] = None,
                 ccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 channel_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 chat_id: Optional[pulumi.Input[str]] = None,
                 clean_library: Optional[pulumi.Input[bool]] = None,
                 click_url: Optional[pulumi.Input[str]] = None,
                 config_contract: Optional[pulumi.Input[str]] = None,
                 configuration_key: Optional[pulumi.Input[str]] = None,
                 consumer_key: Optional[pulumi.Input[str]] = None,
                 consumer_secret: Optional[pulumi.Input[str]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 device_names: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direct_message: Optional[pulumi.Input[bool]] = None,
                 display_time: Optional[pulumi.Input[int]] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 expire: Optional[pulumi.Input[int]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 grab_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 implementation: Optional[pulumi.Input[str]] = None,
                 import_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 map_from: Optional[pulumi.Input[str]] = None,
                 map_to: Optional[pulumi.Input[str]] = None,
                 mention: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_type: Optional[pulumi.Input[int]] = None,
                 notify: Optional[pulumi.Input[bool]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 on_manual_interaction_required: Optional[pulumi.Input[bool]] = None,
                 on_movie_added: Optional[pulumi.Input[bool]] = None,
                 on_movie_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 send_silently: Optional[pulumi.Input[bool]] = None,
                 sender_domain: Optional[pulumi.Input[str]] = None,
                 sender_id: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 sign_in: Optional[pulumi.Input[str]] = None,
                 sound: Optional[pulumi.Input[str]] = None,
                 stateless_urls: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 use_encryption: Optional[pulumi.Input[int]] = None,
                 use_eu_endpoint: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 user_key: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 web_hook_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        <!-- subcategory:Notifications -->
        Notification resource.
        For more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.notifications.Notification("example",
            config_contract="CustomScriptSettings",
            implementation="CustomScript",
            include_health_warnings=False,
            on_application_update=False,
            on_download=True,
            on_grab=False,
            on_health_issue=False,
            on_movie_added=False,
            on_movie_delete=False,
            on_movie_file_delete=False,
            on_movie_file_delete_for_upgrade=True,
            on_rename=False,
            on_upgrade=True,
            path="/scripts/radarr.sh")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:Notifications/notification:Notification example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] access_token_secret: Access token secret.
        :param pulumi.Input[bool] always_update: Always update flag.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] app_token: App token.
        :param pulumi.Input[str] arguments: Arguments.
        :param pulumi.Input[str] auth_password: Password.
        :param pulumi.Input[str] auth_token: Auth token.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] auth_username: Username.
        :param pulumi.Input[str] author: Author.
        :param pulumi.Input[str] avatar: Avatar.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bccs: Bcc.
        :param pulumi.Input[str] bot_token: Bot token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ccs: Cc.
        :param pulumi.Input[str] channel: Channel.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_tags: Channel tags.
        :param pulumi.Input[str] chat_id: Chat ID.
        :param pulumi.Input[bool] clean_library: Clean library flag.
        :param pulumi.Input[str] click_url: Click URL.
        :param pulumi.Input[str] config_contract: Notification configuration template.
        :param pulumi.Input[str] configuration_key: Configuration key.
        :param pulumi.Input[str] consumer_key: Consumer key.
        :param pulumi.Input[str] consumer_secret: Consumer secret.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] device_ids: Device IDs.
        :param pulumi.Input[str] device_names: Device names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] devices: Devices.
        :param pulumi.Input[bool] direct_message: Direct message flag.
        :param pulumi.Input[int] display_time: Display time.
        :param pulumi.Input[str] event: Event.
        :param pulumi.Input[int] expire: Expire.
        :param pulumi.Input[str] expires: Expires.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_tags: Specific tags.
        :param pulumi.Input[str] from_: From.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] grab_fields: Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[str] icon: Icon.
        :param pulumi.Input[str] implementation: Notification implementation name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] import_fields: Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[str] key: Key.
        :param pulumi.Input[str] map_from: Map From.
        :param pulumi.Input[str] map_to: Map To.
        :param pulumi.Input[str] mention: Mention.
        :param pulumi.Input[int] method: Method. `1` POST, `2` PUT.
        :param pulumi.Input[str] name: Notification name.
        :param pulumi.Input[int] notification_type: Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
        :param pulumi.Input[bool] notify: Notify flag.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_grab: On grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[bool] on_manual_interaction_required: On manual interaction required flag.
        :param pulumi.Input[bool] on_movie_added: On movie added flag.
        :param pulumi.Input[bool] on_movie_delete: On movie delete flag.
        :param pulumi.Input[bool] on_movie_file_delete: On movie file delete flag.
        :param pulumi.Input[bool] on_movie_file_delete_for_upgrade: On movie file delete for upgrade flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[str] password: password.
        :param pulumi.Input[str] path: Path.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recipients: Recipients.
        :param pulumi.Input[str] refresh_token: Refresh token.
        :param pulumi.Input[int] retry: Retry.
        :param pulumi.Input[bool] send_silently: Add silently flag.
        :param pulumi.Input[str] sender_domain: Sender domain.
        :param pulumi.Input[str] sender_id: Sender ID.
        :param pulumi.Input[str] server: server.
        :param pulumi.Input[str] server_url: Server url.
        :param pulumi.Input[str] sign_in: Sign in.
        :param pulumi.Input[str] sound: Sound.
        :param pulumi.Input[str] stateless_urls: Stateless URLs.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] token: Token.
        :param pulumi.Input[str] topic_id: Topic ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: Topics.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: To.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[str] url: URL.
        :param pulumi.Input[int] use_encryption: Require encryption. `0` Preferred, `1` Always, `2` Never.
        :param pulumi.Input[bool] use_eu_endpoint: Use EU endpoint flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        :param pulumi.Input[str] user_key: User key.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] web_hook_url: Web hook url.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Notifications -->
        Notification resource.
        For more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.notifications.Notification("example",
            config_contract="CustomScriptSettings",
            implementation="CustomScript",
            include_health_warnings=False,
            on_application_update=False,
            on_download=True,
            on_grab=False,
            on_health_issue=False,
            on_movie_added=False,
            on_movie_delete=False,
            on_movie_file_delete=False,
            on_movie_file_delete_for_upgrade=True,
            on_rename=False,
            on_upgrade=True,
            path="/scripts/radarr.sh")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:Notifications/notification:Notification example 1
        ```

        :param str resource_name: The name of the resource.
        :param NotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 access_token_secret: Optional[pulumi.Input[str]] = None,
                 always_update: Optional[pulumi.Input[bool]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 app_token: Optional[pulumi.Input[str]] = None,
                 arguments: Optional[pulumi.Input[str]] = None,
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 auth_username: Optional[pulumi.Input[str]] = None,
                 author: Optional[pulumi.Input[str]] = None,
                 avatar: Optional[pulumi.Input[str]] = None,
                 bccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bot_token: Optional[pulumi.Input[str]] = None,
                 ccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 channel_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 chat_id: Optional[pulumi.Input[str]] = None,
                 clean_library: Optional[pulumi.Input[bool]] = None,
                 click_url: Optional[pulumi.Input[str]] = None,
                 config_contract: Optional[pulumi.Input[str]] = None,
                 configuration_key: Optional[pulumi.Input[str]] = None,
                 consumer_key: Optional[pulumi.Input[str]] = None,
                 consumer_secret: Optional[pulumi.Input[str]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 device_names: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direct_message: Optional[pulumi.Input[bool]] = None,
                 display_time: Optional[pulumi.Input[int]] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 expire: Optional[pulumi.Input[int]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 grab_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 implementation: Optional[pulumi.Input[str]] = None,
                 import_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 map_from: Optional[pulumi.Input[str]] = None,
                 map_to: Optional[pulumi.Input[str]] = None,
                 mention: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_type: Optional[pulumi.Input[int]] = None,
                 notify: Optional[pulumi.Input[bool]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 on_manual_interaction_required: Optional[pulumi.Input[bool]] = None,
                 on_movie_added: Optional[pulumi.Input[bool]] = None,
                 on_movie_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 send_silently: Optional[pulumi.Input[bool]] = None,
                 sender_domain: Optional[pulumi.Input[str]] = None,
                 sender_id: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 sign_in: Optional[pulumi.Input[str]] = None,
                 sound: Optional[pulumi.Input[str]] = None,
                 stateless_urls: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 use_encryption: Optional[pulumi.Input[int]] = None,
                 use_eu_endpoint: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 user_key: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 web_hook_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotificationArgs.__new__(NotificationArgs)

            __props__.__dict__["access_token"] = access_token
            __props__.__dict__["access_token_secret"] = access_token_secret
            __props__.__dict__["always_update"] = always_update
            __props__.__dict__["api_key"] = None if api_key is None else pulumi.Output.secret(api_key)
            __props__.__dict__["app_token"] = None if app_token is None else pulumi.Output.secret(app_token)
            __props__.__dict__["arguments"] = arguments
            __props__.__dict__["auth_password"] = None if auth_password is None else pulumi.Output.secret(auth_password)
            __props__.__dict__["auth_token"] = auth_token
            __props__.__dict__["auth_user"] = auth_user
            __props__.__dict__["auth_username"] = auth_username
            __props__.__dict__["author"] = author
            __props__.__dict__["avatar"] = avatar
            __props__.__dict__["bccs"] = bccs
            __props__.__dict__["bot_token"] = bot_token
            __props__.__dict__["ccs"] = ccs
            __props__.__dict__["channel"] = channel
            __props__.__dict__["channel_tags"] = channel_tags
            __props__.__dict__["chat_id"] = chat_id
            __props__.__dict__["clean_library"] = clean_library
            __props__.__dict__["click_url"] = click_url
            if config_contract is None and not opts.urn:
                raise TypeError("Missing required property 'config_contract'")
            __props__.__dict__["config_contract"] = config_contract
            __props__.__dict__["configuration_key"] = None if configuration_key is None else pulumi.Output.secret(configuration_key)
            __props__.__dict__["consumer_key"] = consumer_key
            __props__.__dict__["consumer_secret"] = None if consumer_secret is None else pulumi.Output.secret(consumer_secret)
            __props__.__dict__["device_ids"] = device_ids
            __props__.__dict__["device_names"] = device_names
            __props__.__dict__["devices"] = devices
            __props__.__dict__["direct_message"] = direct_message
            __props__.__dict__["display_time"] = display_time
            __props__.__dict__["event"] = event
            __props__.__dict__["expire"] = expire
            __props__.__dict__["expires"] = expires
            __props__.__dict__["field_tags"] = field_tags
            __props__.__dict__["from_"] = from_
            __props__.__dict__["grab_fields"] = grab_fields
            __props__.__dict__["host"] = host
            __props__.__dict__["icon"] = icon
            if implementation is None and not opts.urn:
                raise TypeError("Missing required property 'implementation'")
            __props__.__dict__["implementation"] = implementation
            __props__.__dict__["import_fields"] = import_fields
            __props__.__dict__["include_health_warnings"] = include_health_warnings
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["key"] = key
            __props__.__dict__["map_from"] = map_from
            __props__.__dict__["map_to"] = map_to
            __props__.__dict__["mention"] = mention
            __props__.__dict__["method"] = method
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_type"] = notification_type
            __props__.__dict__["notify"] = notify
            __props__.__dict__["on_application_update"] = on_application_update
            __props__.__dict__["on_download"] = on_download
            __props__.__dict__["on_grab"] = on_grab
            __props__.__dict__["on_health_issue"] = on_health_issue
            __props__.__dict__["on_health_restored"] = on_health_restored
            __props__.__dict__["on_manual_interaction_required"] = on_manual_interaction_required
            __props__.__dict__["on_movie_added"] = on_movie_added
            if on_movie_delete is None and not opts.urn:
                raise TypeError("Missing required property 'on_movie_delete'")
            __props__.__dict__["on_movie_delete"] = on_movie_delete
            __props__.__dict__["on_movie_file_delete"] = on_movie_file_delete
            __props__.__dict__["on_movie_file_delete_for_upgrade"] = on_movie_file_delete_for_upgrade
            __props__.__dict__["on_rename"] = on_rename
            __props__.__dict__["on_upgrade"] = on_upgrade
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["path"] = path
            __props__.__dict__["port"] = port
            __props__.__dict__["priority"] = priority
            __props__.__dict__["recipients"] = recipients
            __props__.__dict__["refresh_token"] = refresh_token
            __props__.__dict__["retry"] = retry
            __props__.__dict__["send_silently"] = send_silently
            __props__.__dict__["sender_domain"] = sender_domain
            __props__.__dict__["sender_id"] = sender_id
            __props__.__dict__["server"] = server
            __props__.__dict__["server_url"] = server_url
            __props__.__dict__["sign_in"] = sign_in
            __props__.__dict__["sound"] = sound
            __props__.__dict__["stateless_urls"] = stateless_urls
            __props__.__dict__["tags"] = tags
            __props__.__dict__["token"] = token
            __props__.__dict__["topic_id"] = topic_id
            __props__.__dict__["topics"] = topics
            __props__.__dict__["tos"] = tos
            __props__.__dict__["update_library"] = update_library
            __props__.__dict__["url"] = url
            __props__.__dict__["use_encryption"] = use_encryption
            __props__.__dict__["use_eu_endpoint"] = use_eu_endpoint
            __props__.__dict__["use_ssl"] = use_ssl
            __props__.__dict__["user_key"] = user_key
            __props__.__dict__["username"] = username
            __props__.__dict__["web_hook_url"] = web_hook_url
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKey", "appToken", "authPassword", "configurationKey", "consumerSecret", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Notification, __self__).__init__(
            'radarr:Notifications/notification:Notification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token: Optional[pulumi.Input[str]] = None,
            access_token_secret: Optional[pulumi.Input[str]] = None,
            always_update: Optional[pulumi.Input[bool]] = None,
            api_key: Optional[pulumi.Input[str]] = None,
            app_token: Optional[pulumi.Input[str]] = None,
            arguments: Optional[pulumi.Input[str]] = None,
            auth_password: Optional[pulumi.Input[str]] = None,
            auth_token: Optional[pulumi.Input[str]] = None,
            auth_user: Optional[pulumi.Input[str]] = None,
            auth_username: Optional[pulumi.Input[str]] = None,
            author: Optional[pulumi.Input[str]] = None,
            avatar: Optional[pulumi.Input[str]] = None,
            bccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            bot_token: Optional[pulumi.Input[str]] = None,
            ccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            channel: Optional[pulumi.Input[str]] = None,
            channel_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            chat_id: Optional[pulumi.Input[str]] = None,
            clean_library: Optional[pulumi.Input[bool]] = None,
            click_url: Optional[pulumi.Input[str]] = None,
            config_contract: Optional[pulumi.Input[str]] = None,
            configuration_key: Optional[pulumi.Input[str]] = None,
            consumer_key: Optional[pulumi.Input[str]] = None,
            consumer_secret: Optional[pulumi.Input[str]] = None,
            device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            device_names: Optional[pulumi.Input[str]] = None,
            devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            direct_message: Optional[pulumi.Input[bool]] = None,
            display_time: Optional[pulumi.Input[int]] = None,
            event: Optional[pulumi.Input[str]] = None,
            expire: Optional[pulumi.Input[int]] = None,
            expires: Optional[pulumi.Input[str]] = None,
            field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            from_: Optional[pulumi.Input[str]] = None,
            grab_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            host: Optional[pulumi.Input[str]] = None,
            icon: Optional[pulumi.Input[str]] = None,
            implementation: Optional[pulumi.Input[str]] = None,
            import_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            include_health_warnings: Optional[pulumi.Input[bool]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            map_from: Optional[pulumi.Input[str]] = None,
            map_to: Optional[pulumi.Input[str]] = None,
            mention: Optional[pulumi.Input[str]] = None,
            method: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notification_type: Optional[pulumi.Input[int]] = None,
            notify: Optional[pulumi.Input[bool]] = None,
            on_application_update: Optional[pulumi.Input[bool]] = None,
            on_download: Optional[pulumi.Input[bool]] = None,
            on_grab: Optional[pulumi.Input[bool]] = None,
            on_health_issue: Optional[pulumi.Input[bool]] = None,
            on_health_restored: Optional[pulumi.Input[bool]] = None,
            on_manual_interaction_required: Optional[pulumi.Input[bool]] = None,
            on_movie_added: Optional[pulumi.Input[bool]] = None,
            on_movie_delete: Optional[pulumi.Input[bool]] = None,
            on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
            on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
            on_rename: Optional[pulumi.Input[bool]] = None,
            on_upgrade: Optional[pulumi.Input[bool]] = None,
            password: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            refresh_token: Optional[pulumi.Input[str]] = None,
            retry: Optional[pulumi.Input[int]] = None,
            send_silently: Optional[pulumi.Input[bool]] = None,
            sender_domain: Optional[pulumi.Input[str]] = None,
            sender_id: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            server_url: Optional[pulumi.Input[str]] = None,
            sign_in: Optional[pulumi.Input[str]] = None,
            sound: Optional[pulumi.Input[str]] = None,
            stateless_urls: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            token: Optional[pulumi.Input[str]] = None,
            topic_id: Optional[pulumi.Input[str]] = None,
            topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            update_library: Optional[pulumi.Input[bool]] = None,
            url: Optional[pulumi.Input[str]] = None,
            use_encryption: Optional[pulumi.Input[int]] = None,
            use_eu_endpoint: Optional[pulumi.Input[bool]] = None,
            use_ssl: Optional[pulumi.Input[bool]] = None,
            user_key: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            web_hook_url: Optional[pulumi.Input[str]] = None) -> 'Notification':
        """
        Get an existing Notification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] access_token_secret: Access token secret.
        :param pulumi.Input[bool] always_update: Always update flag.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] app_token: App token.
        :param pulumi.Input[str] arguments: Arguments.
        :param pulumi.Input[str] auth_password: Password.
        :param pulumi.Input[str] auth_token: Auth token.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] auth_username: Username.
        :param pulumi.Input[str] author: Author.
        :param pulumi.Input[str] avatar: Avatar.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bccs: Bcc.
        :param pulumi.Input[str] bot_token: Bot token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ccs: Cc.
        :param pulumi.Input[str] channel: Channel.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_tags: Channel tags.
        :param pulumi.Input[str] chat_id: Chat ID.
        :param pulumi.Input[bool] clean_library: Clean library flag.
        :param pulumi.Input[str] click_url: Click URL.
        :param pulumi.Input[str] config_contract: Notification configuration template.
        :param pulumi.Input[str] configuration_key: Configuration key.
        :param pulumi.Input[str] consumer_key: Consumer key.
        :param pulumi.Input[str] consumer_secret: Consumer secret.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] device_ids: Device IDs.
        :param pulumi.Input[str] device_names: Device names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] devices: Devices.
        :param pulumi.Input[bool] direct_message: Direct message flag.
        :param pulumi.Input[int] display_time: Display time.
        :param pulumi.Input[str] event: Event.
        :param pulumi.Input[int] expire: Expire.
        :param pulumi.Input[str] expires: Expires.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_tags: Specific tags.
        :param pulumi.Input[str] from_: From.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] grab_fields: Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[str] icon: Icon.
        :param pulumi.Input[str] implementation: Notification implementation name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] import_fields: Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[str] key: Key.
        :param pulumi.Input[str] map_from: Map From.
        :param pulumi.Input[str] map_to: Map To.
        :param pulumi.Input[str] mention: Mention.
        :param pulumi.Input[int] method: Method. `1` POST, `2` PUT.
        :param pulumi.Input[str] name: Notification name.
        :param pulumi.Input[int] notification_type: Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
        :param pulumi.Input[bool] notify: Notify flag.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_grab: On grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[bool] on_manual_interaction_required: On manual interaction required flag.
        :param pulumi.Input[bool] on_movie_added: On movie added flag.
        :param pulumi.Input[bool] on_movie_delete: On movie delete flag.
        :param pulumi.Input[bool] on_movie_file_delete: On movie file delete flag.
        :param pulumi.Input[bool] on_movie_file_delete_for_upgrade: On movie file delete for upgrade flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[str] password: password.
        :param pulumi.Input[str] path: Path.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recipients: Recipients.
        :param pulumi.Input[str] refresh_token: Refresh token.
        :param pulumi.Input[int] retry: Retry.
        :param pulumi.Input[bool] send_silently: Add silently flag.
        :param pulumi.Input[str] sender_domain: Sender domain.
        :param pulumi.Input[str] sender_id: Sender ID.
        :param pulumi.Input[str] server: server.
        :param pulumi.Input[str] server_url: Server url.
        :param pulumi.Input[str] sign_in: Sign in.
        :param pulumi.Input[str] sound: Sound.
        :param pulumi.Input[str] stateless_urls: Stateless URLs.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] token: Token.
        :param pulumi.Input[str] topic_id: Topic ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: Topics.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: To.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[str] url: URL.
        :param pulumi.Input[int] use_encryption: Require encryption. `0` Preferred, `1` Always, `2` Never.
        :param pulumi.Input[bool] use_eu_endpoint: Use EU endpoint flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        :param pulumi.Input[str] user_key: User key.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] web_hook_url: Web hook url.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotificationState.__new__(_NotificationState)

        __props__.__dict__["access_token"] = access_token
        __props__.__dict__["access_token_secret"] = access_token_secret
        __props__.__dict__["always_update"] = always_update
        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["app_token"] = app_token
        __props__.__dict__["arguments"] = arguments
        __props__.__dict__["auth_password"] = auth_password
        __props__.__dict__["auth_token"] = auth_token
        __props__.__dict__["auth_user"] = auth_user
        __props__.__dict__["auth_username"] = auth_username
        __props__.__dict__["author"] = author
        __props__.__dict__["avatar"] = avatar
        __props__.__dict__["bccs"] = bccs
        __props__.__dict__["bot_token"] = bot_token
        __props__.__dict__["ccs"] = ccs
        __props__.__dict__["channel"] = channel
        __props__.__dict__["channel_tags"] = channel_tags
        __props__.__dict__["chat_id"] = chat_id
        __props__.__dict__["clean_library"] = clean_library
        __props__.__dict__["click_url"] = click_url
        __props__.__dict__["config_contract"] = config_contract
        __props__.__dict__["configuration_key"] = configuration_key
        __props__.__dict__["consumer_key"] = consumer_key
        __props__.__dict__["consumer_secret"] = consumer_secret
        __props__.__dict__["device_ids"] = device_ids
        __props__.__dict__["device_names"] = device_names
        __props__.__dict__["devices"] = devices
        __props__.__dict__["direct_message"] = direct_message
        __props__.__dict__["display_time"] = display_time
        __props__.__dict__["event"] = event
        __props__.__dict__["expire"] = expire
        __props__.__dict__["expires"] = expires
        __props__.__dict__["field_tags"] = field_tags
        __props__.__dict__["from_"] = from_
        __props__.__dict__["grab_fields"] = grab_fields
        __props__.__dict__["host"] = host
        __props__.__dict__["icon"] = icon
        __props__.__dict__["implementation"] = implementation
        __props__.__dict__["import_fields"] = import_fields
        __props__.__dict__["include_health_warnings"] = include_health_warnings
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["key"] = key
        __props__.__dict__["map_from"] = map_from
        __props__.__dict__["map_to"] = map_to
        __props__.__dict__["mention"] = mention
        __props__.__dict__["method"] = method
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_type"] = notification_type
        __props__.__dict__["notify"] = notify
        __props__.__dict__["on_application_update"] = on_application_update
        __props__.__dict__["on_download"] = on_download
        __props__.__dict__["on_grab"] = on_grab
        __props__.__dict__["on_health_issue"] = on_health_issue
        __props__.__dict__["on_health_restored"] = on_health_restored
        __props__.__dict__["on_manual_interaction_required"] = on_manual_interaction_required
        __props__.__dict__["on_movie_added"] = on_movie_added
        __props__.__dict__["on_movie_delete"] = on_movie_delete
        __props__.__dict__["on_movie_file_delete"] = on_movie_file_delete
        __props__.__dict__["on_movie_file_delete_for_upgrade"] = on_movie_file_delete_for_upgrade
        __props__.__dict__["on_rename"] = on_rename
        __props__.__dict__["on_upgrade"] = on_upgrade
        __props__.__dict__["password"] = password
        __props__.__dict__["path"] = path
        __props__.__dict__["port"] = port
        __props__.__dict__["priority"] = priority
        __props__.__dict__["recipients"] = recipients
        __props__.__dict__["refresh_token"] = refresh_token
        __props__.__dict__["retry"] = retry
        __props__.__dict__["send_silently"] = send_silently
        __props__.__dict__["sender_domain"] = sender_domain
        __props__.__dict__["sender_id"] = sender_id
        __props__.__dict__["server"] = server
        __props__.__dict__["server_url"] = server_url
        __props__.__dict__["sign_in"] = sign_in
        __props__.__dict__["sound"] = sound
        __props__.__dict__["stateless_urls"] = stateless_urls
        __props__.__dict__["tags"] = tags
        __props__.__dict__["token"] = token
        __props__.__dict__["topic_id"] = topic_id
        __props__.__dict__["topics"] = topics
        __props__.__dict__["tos"] = tos
        __props__.__dict__["update_library"] = update_library
        __props__.__dict__["url"] = url
        __props__.__dict__["use_encryption"] = use_encryption
        __props__.__dict__["use_eu_endpoint"] = use_eu_endpoint
        __props__.__dict__["use_ssl"] = use_ssl
        __props__.__dict__["user_key"] = user_key
        __props__.__dict__["username"] = username
        __props__.__dict__["web_hook_url"] = web_hook_url
        return Notification(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[str]:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accessTokenSecret")
    def access_token_secret(self) -> pulumi.Output[str]:
        """
        Access token secret.
        """
        return pulumi.get(self, "access_token_secret")

    @property
    @pulumi.getter(name="alwaysUpdate")
    def always_update(self) -> pulumi.Output[bool]:
        """
        Always update flag.
        """
        return pulumi.get(self, "always_update")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[str]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> pulumi.Output[str]:
        """
        App token.
        """
        return pulumi.get(self, "app_token")

    @property
    @pulumi.getter
    def arguments(self) -> pulumi.Output[str]:
        """
        Arguments.
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> pulumi.Output[str]:
        """
        Password.
        """
        return pulumi.get(self, "auth_password")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Output[str]:
        """
        Auth token.
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> pulumi.Output[str]:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> pulumi.Output[str]:
        """
        Username.
        """
        return pulumi.get(self, "auth_username")

    @property
    @pulumi.getter
    def author(self) -> pulumi.Output[str]:
        """
        Author.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def avatar(self) -> pulumi.Output[str]:
        """
        Avatar.
        """
        return pulumi.get(self, "avatar")

    @property
    @pulumi.getter
    def bccs(self) -> pulumi.Output[Sequence[str]]:
        """
        Bcc.
        """
        return pulumi.get(self, "bccs")

    @property
    @pulumi.getter(name="botToken")
    def bot_token(self) -> pulumi.Output[str]:
        """
        Bot token.
        """
        return pulumi.get(self, "bot_token")

    @property
    @pulumi.getter
    def ccs(self) -> pulumi.Output[Sequence[str]]:
        """
        Cc.
        """
        return pulumi.get(self, "ccs")

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Output[str]:
        """
        Channel.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelTags")
    def channel_tags(self) -> pulumi.Output[Sequence[str]]:
        """
        Channel tags.
        """
        return pulumi.get(self, "channel_tags")

    @property
    @pulumi.getter(name="chatId")
    def chat_id(self) -> pulumi.Output[str]:
        """
        Chat ID.
        """
        return pulumi.get(self, "chat_id")

    @property
    @pulumi.getter(name="cleanLibrary")
    def clean_library(self) -> pulumi.Output[bool]:
        """
        Clean library flag.
        """
        return pulumi.get(self, "clean_library")

    @property
    @pulumi.getter(name="clickUrl")
    def click_url(self) -> pulumi.Output[str]:
        """
        Click URL.
        """
        return pulumi.get(self, "click_url")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> pulumi.Output[str]:
        """
        Notification configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="configurationKey")
    def configuration_key(self) -> pulumi.Output[str]:
        """
        Configuration key.
        """
        return pulumi.get(self, "configuration_key")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> pulumi.Output[str]:
        """
        Consumer key.
        """
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> pulumi.Output[str]:
        """
        Consumer secret.
        """
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Device IDs.
        """
        return pulumi.get(self, "device_ids")

    @property
    @pulumi.getter(name="deviceNames")
    def device_names(self) -> pulumi.Output[str]:
        """
        Device names.
        """
        return pulumi.get(self, "device_names")

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Sequence[str]]:
        """
        Devices.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="directMessage")
    def direct_message(self) -> pulumi.Output[bool]:
        """
        Direct message flag.
        """
        return pulumi.get(self, "direct_message")

    @property
    @pulumi.getter(name="displayTime")
    def display_time(self) -> pulumi.Output[int]:
        """
        Display time.
        """
        return pulumi.get(self, "display_time")

    @property
    @pulumi.getter
    def event(self) -> pulumi.Output[str]:
        """
        Event.
        """
        return pulumi.get(self, "event")

    @property
    @pulumi.getter
    def expire(self) -> pulumi.Output[int]:
        """
        Expire.
        """
        return pulumi.get(self, "expire")

    @property
    @pulumi.getter
    def expires(self) -> pulumi.Output[str]:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> pulumi.Output[Sequence[str]]:
        """
        Specific tags.
        """
        return pulumi.get(self, "field_tags")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Output[str]:
        """
        From.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="grabFields")
    def grab_fields(self) -> pulumi.Output[Sequence[int]]:
        """
        Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.
        """
        return pulumi.get(self, "grab_fields")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def icon(self) -> pulumi.Output[str]:
        """
        Icon.
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def implementation(self) -> pulumi.Output[str]:
        """
        Notification implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="importFields")
    def import_fields(self) -> pulumi.Output[Sequence[int]]:
        """
        Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        """
        return pulumi.get(self, "import_fields")

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> pulumi.Output[bool]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="mapFrom")
    def map_from(self) -> pulumi.Output[str]:
        """
        Map From.
        """
        return pulumi.get(self, "map_from")

    @property
    @pulumi.getter(name="mapTo")
    def map_to(self) -> pulumi.Output[str]:
        """
        Map To.
        """
        return pulumi.get(self, "map_to")

    @property
    @pulumi.getter
    def mention(self) -> pulumi.Output[str]:
        """
        Mention.
        """
        return pulumi.get(self, "mention")

    @property
    @pulumi.getter
    def method(self) -> pulumi.Output[int]:
        """
        Method. `1` POST, `2` PUT.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Notification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> pulumi.Output[int]:
        """
        Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
        """
        return pulumi.get(self, "notification_type")

    @property
    @pulumi.getter
    def notify(self) -> pulumi.Output[bool]:
        """
        Notify flag.
        """
        return pulumi.get(self, "notify")

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> pulumi.Output[bool]:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> pulumi.Output[bool]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> pulumi.Output[bool]:
        """
        On grab flag.
        """
        return pulumi.get(self, "on_grab")

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> pulumi.Output[bool]:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> pulumi.Output[bool]:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @property
    @pulumi.getter(name="onManualInteractionRequired")
    def on_manual_interaction_required(self) -> pulumi.Output[bool]:
        """
        On manual interaction required flag.
        """
        return pulumi.get(self, "on_manual_interaction_required")

    @property
    @pulumi.getter(name="onMovieAdded")
    def on_movie_added(self) -> pulumi.Output[bool]:
        """
        On movie added flag.
        """
        return pulumi.get(self, "on_movie_added")

    @property
    @pulumi.getter(name="onMovieDelete")
    def on_movie_delete(self) -> pulumi.Output[bool]:
        """
        On movie delete flag.
        """
        return pulumi.get(self, "on_movie_delete")

    @property
    @pulumi.getter(name="onMovieFileDelete")
    def on_movie_file_delete(self) -> pulumi.Output[bool]:
        """
        On movie file delete flag.
        """
        return pulumi.get(self, "on_movie_file_delete")

    @property
    @pulumi.getter(name="onMovieFileDeleteForUpgrade")
    def on_movie_file_delete_for_upgrade(self) -> pulumi.Output[bool]:
        """
        On movie file delete for upgrade flag.
        """
        return pulumi.get(self, "on_movie_file_delete_for_upgrade")

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> pulumi.Output[bool]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> pulumi.Output[bool]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        Path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def recipients(self) -> pulumi.Output[Sequence[str]]:
        """
        Recipients.
        """
        return pulumi.get(self, "recipients")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Output[str]:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter
    def retry(self) -> pulumi.Output[int]:
        """
        Retry.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="sendSilently")
    def send_silently(self) -> pulumi.Output[bool]:
        """
        Add silently flag.
        """
        return pulumi.get(self, "send_silently")

    @property
    @pulumi.getter(name="senderDomain")
    def sender_domain(self) -> pulumi.Output[str]:
        """
        Sender domain.
        """
        return pulumi.get(self, "sender_domain")

    @property
    @pulumi.getter(name="senderId")
    def sender_id(self) -> pulumi.Output[str]:
        """
        Sender ID.
        """
        return pulumi.get(self, "sender_id")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> pulumi.Output[str]:
        """
        Server url.
        """
        return pulumi.get(self, "server_url")

    @property
    @pulumi.getter(name="signIn")
    def sign_in(self) -> pulumi.Output[str]:
        """
        Sign in.
        """
        return pulumi.get(self, "sign_in")

    @property
    @pulumi.getter
    def sound(self) -> pulumi.Output[str]:
        """
        Sound.
        """
        return pulumi.get(self, "sound")

    @property
    @pulumi.getter(name="statelessUrls")
    def stateless_urls(self) -> pulumi.Output[str]:
        """
        Stateless URLs.
        """
        return pulumi.get(self, "stateless_urls")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        Token.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        Topic ID.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter
    def topics(self) -> pulumi.Output[Sequence[str]]:
        """
        Topics.
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Output[Sequence[str]]:
        """
        To.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> pulumi.Output[bool]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="useEncryption")
    def use_encryption(self) -> pulumi.Output[int]:
        """
        Require encryption. `0` Preferred, `1` Always, `2` Never.
        """
        return pulumi.get(self, "use_encryption")

    @property
    @pulumi.getter(name="useEuEndpoint")
    def use_eu_endpoint(self) -> pulumi.Output[bool]:
        """
        Use EU endpoint flag.
        """
        return pulumi.get(self, "use_eu_endpoint")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> pulumi.Output[bool]:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter(name="userKey")
    def user_key(self) -> pulumi.Output[str]:
        """
        User key.
        """
        return pulumi.get(self, "user_key")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="webHookUrl")
    def web_hook_url(self) -> pulumi.Output[str]:
        """
        Web hook url.
        """
        return pulumi.get(self, "web_hook_url")

