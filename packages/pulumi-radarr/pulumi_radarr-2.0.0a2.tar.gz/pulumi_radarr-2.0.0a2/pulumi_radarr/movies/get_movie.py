# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMovieResult',
    'AwaitableGetMovieResult',
    'get_movie',
    'get_movie_output',
]

@pulumi.output_type
class GetMovieResult:
    """
    A collection of values returned by getMovie.
    """
    def __init__(__self__, genres=None, id=None, imdb_id=None, is_available=None, minimum_availability=None, monitored=None, original_language=None, original_title=None, overview=None, path=None, quality_profile_id=None, status=None, tags=None, title=None, tmdb_id=None, website=None, year=None, youtube_trailer_id=None):
        if genres and not isinstance(genres, list):
            raise TypeError("Expected argument 'genres' to be a list")
        pulumi.set(__self__, "genres", genres)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if imdb_id and not isinstance(imdb_id, str):
            raise TypeError("Expected argument 'imdb_id' to be a str")
        pulumi.set(__self__, "imdb_id", imdb_id)
        if is_available and not isinstance(is_available, bool):
            raise TypeError("Expected argument 'is_available' to be a bool")
        pulumi.set(__self__, "is_available", is_available)
        if minimum_availability and not isinstance(minimum_availability, str):
            raise TypeError("Expected argument 'minimum_availability' to be a str")
        pulumi.set(__self__, "minimum_availability", minimum_availability)
        if monitored and not isinstance(monitored, bool):
            raise TypeError("Expected argument 'monitored' to be a bool")
        pulumi.set(__self__, "monitored", monitored)
        if original_language and not isinstance(original_language, dict):
            raise TypeError("Expected argument 'original_language' to be a dict")
        pulumi.set(__self__, "original_language", original_language)
        if original_title and not isinstance(original_title, str):
            raise TypeError("Expected argument 'original_title' to be a str")
        pulumi.set(__self__, "original_title", original_title)
        if overview and not isinstance(overview, str):
            raise TypeError("Expected argument 'overview' to be a str")
        pulumi.set(__self__, "overview", overview)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if quality_profile_id and not isinstance(quality_profile_id, int):
            raise TypeError("Expected argument 'quality_profile_id' to be a int")
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)
        if tmdb_id and not isinstance(tmdb_id, int):
            raise TypeError("Expected argument 'tmdb_id' to be a int")
        pulumi.set(__self__, "tmdb_id", tmdb_id)
        if website and not isinstance(website, str):
            raise TypeError("Expected argument 'website' to be a str")
        pulumi.set(__self__, "website", website)
        if year and not isinstance(year, int):
            raise TypeError("Expected argument 'year' to be a int")
        pulumi.set(__self__, "year", year)
        if youtube_trailer_id and not isinstance(youtube_trailer_id, str):
            raise TypeError("Expected argument 'youtube_trailer_id' to be a str")
        pulumi.set(__self__, "youtube_trailer_id", youtube_trailer_id)

    @property
    @pulumi.getter
    def genres(self) -> Sequence[str]:
        """
        List genres.
        """
        return pulumi.get(self, "genres")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Movie ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imdbId")
    def imdb_id(self) -> str:
        """
        IMDB ID.
        """
        return pulumi.get(self, "imdb_id")

    @property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> bool:
        """
        Availability flag.
        """
        return pulumi.get(self, "is_available")

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> str:
        """
        Minimum availability.
        Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
        """
        return pulumi.get(self, "minimum_availability")

    @property
    @pulumi.getter
    def monitored(self) -> bool:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @property
    @pulumi.getter(name="originalLanguage")
    def original_language(self) -> 'outputs.GetMovieOriginalLanguageResult':
        """
        Origina language.
        """
        return pulumi.get(self, "original_language")

    @property
    @pulumi.getter(name="originalTitle")
    def original_title(self) -> str:
        """
        Movie original title.
        """
        return pulumi.get(self, "original_title")

    @property
    @pulumi.getter
    def overview(self) -> str:
        """
        Overview.
        """
        return pulumi.get(self, "overview")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Full movie path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Movie status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Movie title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="tmdbId")
    def tmdb_id(self) -> int:
        """
        TMDB ID.
        """
        return pulumi.get(self, "tmdb_id")

    @property
    @pulumi.getter
    def website(self) -> str:
        """
        Website.
        """
        return pulumi.get(self, "website")

    @property
    @pulumi.getter
    def year(self) -> int:
        """
        Year.
        """
        return pulumi.get(self, "year")

    @property
    @pulumi.getter(name="youtubeTrailerId")
    def youtube_trailer_id(self) -> str:
        """
        Youtube trailer ID.
        """
        return pulumi.get(self, "youtube_trailer_id")


class AwaitableGetMovieResult(GetMovieResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMovieResult(
            genres=self.genres,
            id=self.id,
            imdb_id=self.imdb_id,
            is_available=self.is_available,
            minimum_availability=self.minimum_availability,
            monitored=self.monitored,
            original_language=self.original_language,
            original_title=self.original_title,
            overview=self.overview,
            path=self.path,
            quality_profile_id=self.quality_profile_id,
            status=self.status,
            tags=self.tags,
            title=self.title,
            tmdb_id=self.tmdb_id,
            website=self.website,
            year=self.year,
            youtube_trailer_id=self.youtube_trailer_id)


def get_movie(tmdb_id: Optional[int] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMovieResult:
    """
    <!-- subcategory:Movies -->
    Single Movie.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_radarr as radarr

    example = radarr.Movies.get_movie(tmdb_id=123)
    ```


    :param int tmdb_id: TMDB ID.
    """
    __args__ = dict()
    __args__['tmdbId'] = tmdb_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('radarr:Movies/getMovie:getMovie', __args__, opts=opts, typ=GetMovieResult).value

    return AwaitableGetMovieResult(
        genres=pulumi.get(__ret__, 'genres'),
        id=pulumi.get(__ret__, 'id'),
        imdb_id=pulumi.get(__ret__, 'imdb_id'),
        is_available=pulumi.get(__ret__, 'is_available'),
        minimum_availability=pulumi.get(__ret__, 'minimum_availability'),
        monitored=pulumi.get(__ret__, 'monitored'),
        original_language=pulumi.get(__ret__, 'original_language'),
        original_title=pulumi.get(__ret__, 'original_title'),
        overview=pulumi.get(__ret__, 'overview'),
        path=pulumi.get(__ret__, 'path'),
        quality_profile_id=pulumi.get(__ret__, 'quality_profile_id'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        title=pulumi.get(__ret__, 'title'),
        tmdb_id=pulumi.get(__ret__, 'tmdb_id'),
        website=pulumi.get(__ret__, 'website'),
        year=pulumi.get(__ret__, 'year'),
        youtube_trailer_id=pulumi.get(__ret__, 'youtube_trailer_id'))


@_utilities.lift_output_func(get_movie)
def get_movie_output(tmdb_id: Optional[pulumi.Input[int]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMovieResult]:
    """
    <!-- subcategory:Movies -->
    Single Movie.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_radarr as radarr

    example = radarr.Movies.get_movie(tmdb_id=123)
    ```


    :param int tmdb_id: TMDB ID.
    """
    ...
