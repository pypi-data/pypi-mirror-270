# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ImportListArgs', 'ImportList']

@pulumi.input_type
class ImportListArgs:
    def __init__(__self__, *,
                 config_contract: pulumi.Input[str],
                 list_type: pulumi.Input[str],
                 minimum_availability: pulumi.Input[str],
                 monitor: pulumi.Input[str],
                 quality_profile_id: pulumi.Input[int],
                 root_folder_path: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 cast: Optional[pulumi.Input[bool]] = None,
                 cast_director: Optional[pulumi.Input[bool]] = None,
                 cast_producer: Optional[pulumi.Input[bool]] = None,
                 cast_sound: Optional[pulumi.Input[bool]] = None,
                 cast_writing: Optional[pulumi.Input[bool]] = None,
                 certification: Optional[pulumi.Input[str]] = None,
                 company_id: Optional[pulumi.Input[str]] = None,
                 enable_auto: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_genre_ids: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 genres: Optional[pulumi.Input[str]] = None,
                 implementation: Optional[pulumi.Input[str]] = None,
                 include_genre_ids: Optional[pulumi.Input[str]] = None,
                 keyword_id: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[int]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 list_id: Optional[pulumi.Input[str]] = None,
                 list_order: Optional[pulumi.Input[int]] = None,
                 listname: Optional[pulumi.Input[str]] = None,
                 min_score: Optional[pulumi.Input[int]] = None,
                 min_vote_average: Optional[pulumi.Input[str]] = None,
                 min_votes: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_active: Optional[pulumi.Input[bool]] = None,
                 person_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 rating: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 search_on_add: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[int]] = None,
                 tag_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tmdb_certification: Optional[pulumi.Input[str]] = None,
                 tmdb_list_type: Optional[pulumi.Input[int]] = None,
                 trakt_additional_parameters: Optional[pulumi.Input[str]] = None,
                 trakt_list_type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 url_base: Optional[pulumi.Input[str]] = None,
                 user_list_type: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 years: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ImportList resource.
        :param pulumi.Input[str] config_contract: ImportList configuration template.
        :param pulumi.Input[str] list_type: List type.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
        :param pulumi.Input[str] monitor: Should monitor.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] root_folder_path: Root folder path.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] account_id: Account ID.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] base_url: Base URL.
        :param pulumi.Input[bool] cast: Include cast.
        :param pulumi.Input[bool] cast_director: Include cast director.
        :param pulumi.Input[bool] cast_producer: Include cast producer.
        :param pulumi.Input[bool] cast_sound: Include cast sound.
        :param pulumi.Input[bool] cast_writing: Include cast writing.
        :param pulumi.Input[str] certification: Certification.
        :param pulumi.Input[str] company_id: Company ID.
        :param pulumi.Input[bool] enable_auto: Enable automatic add flag.
        :param pulumi.Input[bool] enabled: Enabled flag.
        :param pulumi.Input[str] exclude_genre_ids: Exclude genre IDs.
        :param pulumi.Input[str] expires: Expires.
        :param pulumi.Input[str] genres: Genres.
        :param pulumi.Input[str] implementation: ImportList implementation name.
        :param pulumi.Input[str] include_genre_ids: Include genre IDs.
        :param pulumi.Input[str] keyword_id: Keyword ID.
        :param pulumi.Input[int] language_code: Language code.
        :param pulumi.Input[int] limit: limit.
        :param pulumi.Input[str] link: Link.
        :param pulumi.Input[str] list_id: List ID.
        :param pulumi.Input[int] list_order: List order.
        :param pulumi.Input[str] listname: List name.
        :param pulumi.Input[int] min_score: Min score.
        :param pulumi.Input[str] min_vote_average: Min vote average.
        :param pulumi.Input[str] min_votes: Min votes.
        :param pulumi.Input[str] name: Import List name.
        :param pulumi.Input[bool] only_active: Only active.
        :param pulumi.Input[str] person_id: Person ID.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] profile_ids: Profile IDs.
        :param pulumi.Input[str] rating: Rating.
        :param pulumi.Input[str] refresh_token: Refresh token.
        :param pulumi.Input[bool] search_on_add: Search on add flag.
        :param pulumi.Input[int] source: Source.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tag_ids: Tag IDs.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] tmdb_certification: Certification.
        :param pulumi.Input[int] tmdb_list_type: TMDB list type.
        :param pulumi.Input[str] trakt_additional_parameters: Trakt additional parameters.
        :param pulumi.Input[int] trakt_list_type: Trakt list type.
        :param pulumi.Input[str] url: URL.
        :param pulumi.Input[str] url_base: Base URL.
        :param pulumi.Input[int] user_list_type: User list type.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] years: Years.
        """
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "list_type", list_type)
        pulumi.set(__self__, "minimum_availability", minimum_availability)
        pulumi.set(__self__, "monitor", monitor)
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if auth_user is not None:
            pulumi.set(__self__, "auth_user", auth_user)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)
        if cast is not None:
            pulumi.set(__self__, "cast", cast)
        if cast_director is not None:
            pulumi.set(__self__, "cast_director", cast_director)
        if cast_producer is not None:
            pulumi.set(__self__, "cast_producer", cast_producer)
        if cast_sound is not None:
            pulumi.set(__self__, "cast_sound", cast_sound)
        if cast_writing is not None:
            pulumi.set(__self__, "cast_writing", cast_writing)
        if certification is not None:
            pulumi.set(__self__, "certification", certification)
        if company_id is not None:
            pulumi.set(__self__, "company_id", company_id)
        if enable_auto is not None:
            pulumi.set(__self__, "enable_auto", enable_auto)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_genre_ids is not None:
            pulumi.set(__self__, "exclude_genre_ids", exclude_genre_ids)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if genres is not None:
            pulumi.set(__self__, "genres", genres)
        if implementation is not None:
            pulumi.set(__self__, "implementation", implementation)
        if include_genre_ids is not None:
            pulumi.set(__self__, "include_genre_ids", include_genre_ids)
        if keyword_id is not None:
            pulumi.set(__self__, "keyword_id", keyword_id)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if list_id is not None:
            pulumi.set(__self__, "list_id", list_id)
        if list_order is not None:
            pulumi.set(__self__, "list_order", list_order)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if min_score is not None:
            pulumi.set(__self__, "min_score", min_score)
        if min_vote_average is not None:
            pulumi.set(__self__, "min_vote_average", min_vote_average)
        if min_votes is not None:
            pulumi.set(__self__, "min_votes", min_votes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if only_active is not None:
            pulumi.set(__self__, "only_active", only_active)
        if person_id is not None:
            pulumi.set(__self__, "person_id", person_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile_ids is not None:
            pulumi.set(__self__, "profile_ids", profile_ids)
        if rating is not None:
            pulumi.set(__self__, "rating", rating)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if search_on_add is not None:
            pulumi.set(__self__, "search_on_add", search_on_add)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tag_ids is not None:
            pulumi.set(__self__, "tag_ids", tag_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tmdb_certification is not None:
            pulumi.set(__self__, "tmdb_certification", tmdb_certification)
        if tmdb_list_type is not None:
            pulumi.set(__self__, "tmdb_list_type", tmdb_list_type)
        if trakt_additional_parameters is not None:
            pulumi.set(__self__, "trakt_additional_parameters", trakt_additional_parameters)
        if trakt_list_type is not None:
            pulumi.set(__self__, "trakt_list_type", trakt_list_type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)
        if user_list_type is not None:
            pulumi.set(__self__, "user_list_type", user_list_type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if years is not None:
            pulumi.set(__self__, "years", years)

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> pulumi.Input[str]:
        """
        ImportList configuration template.
        """
        return pulumi.get(self, "config_contract")

    @config_contract.setter
    def config_contract(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_contract", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> pulumi.Input[str]:
        """
        List type.
        """
        return pulumi.get(self, "list_type")

    @list_type.setter
    def list_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "list_type", value)

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> pulumi.Input[str]:
        """
        Minimum availability.
        """
        return pulumi.get(self, "minimum_availability")

    @minimum_availability.setter
    def minimum_availability(self, value: pulumi.Input[str]):
        pulumi.set(self, "minimum_availability", value)

    @property
    @pulumi.getter
    def monitor(self) -> pulumi.Input[str]:
        """
        Should monitor.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> pulumi.Input[int]:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @quality_profile_id.setter
    def quality_profile_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "quality_profile_id", value)

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> pulumi.Input[str]:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @root_folder_path.setter
    def root_folder_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "root_folder_path", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> Optional[pulumi.Input[str]]:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @auth_user.setter
    def auth_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_user", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter
    def cast(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast.
        """
        return pulumi.get(self, "cast")

    @cast.setter
    def cast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast", value)

    @property
    @pulumi.getter(name="castDirector")
    def cast_director(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast director.
        """
        return pulumi.get(self, "cast_director")

    @cast_director.setter
    def cast_director(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast_director", value)

    @property
    @pulumi.getter(name="castProducer")
    def cast_producer(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast producer.
        """
        return pulumi.get(self, "cast_producer")

    @cast_producer.setter
    def cast_producer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast_producer", value)

    @property
    @pulumi.getter(name="castSound")
    def cast_sound(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast sound.
        """
        return pulumi.get(self, "cast_sound")

    @cast_sound.setter
    def cast_sound(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast_sound", value)

    @property
    @pulumi.getter(name="castWriting")
    def cast_writing(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast writing.
        """
        return pulumi.get(self, "cast_writing")

    @cast_writing.setter
    def cast_writing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast_writing", value)

    @property
    @pulumi.getter
    def certification(self) -> Optional[pulumi.Input[str]]:
        """
        Certification.
        """
        return pulumi.get(self, "certification")

    @certification.setter
    def certification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certification", value)

    @property
    @pulumi.getter(name="companyId")
    def company_id(self) -> Optional[pulumi.Input[str]]:
        """
        Company ID.
        """
        return pulumi.get(self, "company_id")

    @company_id.setter
    def company_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_id", value)

    @property
    @pulumi.getter(name="enableAuto")
    def enable_auto(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_auto")

    @enable_auto.setter
    def enable_auto(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeGenreIds")
    def exclude_genre_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Exclude genre IDs.
        """
        return pulumi.get(self, "exclude_genre_ids")

    @exclude_genre_ids.setter
    def exclude_genre_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_genre_ids", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter
    def genres(self) -> Optional[pulumi.Input[str]]:
        """
        Genres.
        """
        return pulumi.get(self, "genres")

    @genres.setter
    def genres(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "genres", value)

    @property
    @pulumi.getter
    def implementation(self) -> Optional[pulumi.Input[str]]:
        """
        ImportList implementation name.
        """
        return pulumi.get(self, "implementation")

    @implementation.setter
    def implementation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "implementation", value)

    @property
    @pulumi.getter(name="includeGenreIds")
    def include_genre_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Include genre IDs.
        """
        return pulumi.get(self, "include_genre_ids")

    @include_genre_ids.setter
    def include_genre_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_genre_ids", value)

    @property
    @pulumi.getter(name="keywordId")
    def keyword_id(self) -> Optional[pulumi.Input[str]]:
        """
        Keyword ID.
        """
        return pulumi.get(self, "keyword_id")

    @keyword_id.setter
    def keyword_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyword_id", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[int]]:
        """
        Language code.
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        limit.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        Link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> Optional[pulumi.Input[str]]:
        """
        List ID.
        """
        return pulumi.get(self, "list_id")

    @list_id.setter
    def list_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list_id", value)

    @property
    @pulumi.getter(name="listOrder")
    def list_order(self) -> Optional[pulumi.Input[int]]:
        """
        List order.
        """
        return pulumi.get(self, "list_order")

    @list_order.setter
    def list_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "list_order", value)

    @property
    @pulumi.getter
    def listname(self) -> Optional[pulumi.Input[str]]:
        """
        List name.
        """
        return pulumi.get(self, "listname")

    @listname.setter
    def listname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listname", value)

    @property
    @pulumi.getter(name="minScore")
    def min_score(self) -> Optional[pulumi.Input[int]]:
        """
        Min score.
        """
        return pulumi.get(self, "min_score")

    @min_score.setter
    def min_score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_score", value)

    @property
    @pulumi.getter(name="minVoteAverage")
    def min_vote_average(self) -> Optional[pulumi.Input[str]]:
        """
        Min vote average.
        """
        return pulumi.get(self, "min_vote_average")

    @min_vote_average.setter
    def min_vote_average(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_vote_average", value)

    @property
    @pulumi.getter(name="minVotes")
    def min_votes(self) -> Optional[pulumi.Input[str]]:
        """
        Min votes.
        """
        return pulumi.get(self, "min_votes")

    @min_votes.setter
    def min_votes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_votes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onlyActive")
    def only_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Only active.
        """
        return pulumi.get(self, "only_active")

    @only_active.setter
    def only_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_active", value)

    @property
    @pulumi.getter(name="personId")
    def person_id(self) -> Optional[pulumi.Input[str]]:
        """
        Person ID.
        """
        return pulumi.get(self, "person_id")

    @person_id.setter
    def person_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "person_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="profileIds")
    def profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Profile IDs.
        """
        return pulumi.get(self, "profile_ids")

    @profile_ids.setter
    def profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "profile_ids", value)

    @property
    @pulumi.getter
    def rating(self) -> Optional[pulumi.Input[str]]:
        """
        Rating.
        """
        return pulumi.get(self, "rating")

    @rating.setter
    def rating(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rating", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="searchOnAdd")
    def search_on_add(self) -> Optional[pulumi.Input[bool]]:
        """
        Search on add flag.
        """
        return pulumi.get(self, "search_on_add")

    @search_on_add.setter
    def search_on_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "search_on_add", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[int]]:
        """
        Source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Tag IDs.
        """
        return pulumi.get(self, "tag_ids")

    @tag_ids.setter
    def tag_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tag_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tmdbCertification")
    def tmdb_certification(self) -> Optional[pulumi.Input[str]]:
        """
        Certification.
        """
        return pulumi.get(self, "tmdb_certification")

    @tmdb_certification.setter
    def tmdb_certification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmdb_certification", value)

    @property
    @pulumi.getter(name="tmdbListType")
    def tmdb_list_type(self) -> Optional[pulumi.Input[int]]:
        """
        TMDB list type.
        """
        return pulumi.get(self, "tmdb_list_type")

    @tmdb_list_type.setter
    def tmdb_list_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tmdb_list_type", value)

    @property
    @pulumi.getter(name="traktAdditionalParameters")
    def trakt_additional_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Trakt additional parameters.
        """
        return pulumi.get(self, "trakt_additional_parameters")

    @trakt_additional_parameters.setter
    def trakt_additional_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trakt_additional_parameters", value)

    @property
    @pulumi.getter(name="traktListType")
    def trakt_list_type(self) -> Optional[pulumi.Input[int]]:
        """
        Trakt list type.
        """
        return pulumi.get(self, "trakt_list_type")

    @trakt_list_type.setter
    def trakt_list_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trakt_list_type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[pulumi.Input[str]]:
        """
        Base URL.
        """
        return pulumi.get(self, "url_base")

    @url_base.setter
    def url_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_base", value)

    @property
    @pulumi.getter(name="userListType")
    def user_list_type(self) -> Optional[pulumi.Input[int]]:
        """
        User list type.
        """
        return pulumi.get(self, "user_list_type")

    @user_list_type.setter
    def user_list_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_list_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def years(self) -> Optional[pulumi.Input[str]]:
        """
        Years.
        """
        return pulumi.get(self, "years")

    @years.setter
    def years(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "years", value)


@pulumi.input_type
class _ImportListState:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 cast: Optional[pulumi.Input[bool]] = None,
                 cast_director: Optional[pulumi.Input[bool]] = None,
                 cast_producer: Optional[pulumi.Input[bool]] = None,
                 cast_sound: Optional[pulumi.Input[bool]] = None,
                 cast_writing: Optional[pulumi.Input[bool]] = None,
                 certification: Optional[pulumi.Input[str]] = None,
                 company_id: Optional[pulumi.Input[str]] = None,
                 config_contract: Optional[pulumi.Input[str]] = None,
                 enable_auto: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_genre_ids: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 genres: Optional[pulumi.Input[str]] = None,
                 implementation: Optional[pulumi.Input[str]] = None,
                 include_genre_ids: Optional[pulumi.Input[str]] = None,
                 keyword_id: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[int]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 list_id: Optional[pulumi.Input[str]] = None,
                 list_order: Optional[pulumi.Input[int]] = None,
                 list_type: Optional[pulumi.Input[str]] = None,
                 listname: Optional[pulumi.Input[str]] = None,
                 min_score: Optional[pulumi.Input[int]] = None,
                 min_vote_average: Optional[pulumi.Input[str]] = None,
                 min_votes: Optional[pulumi.Input[str]] = None,
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_active: Optional[pulumi.Input[bool]] = None,
                 person_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 rating: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 root_folder_path: Optional[pulumi.Input[str]] = None,
                 search_on_add: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[int]] = None,
                 tag_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tmdb_certification: Optional[pulumi.Input[str]] = None,
                 tmdb_list_type: Optional[pulumi.Input[int]] = None,
                 trakt_additional_parameters: Optional[pulumi.Input[str]] = None,
                 trakt_list_type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 url_base: Optional[pulumi.Input[str]] = None,
                 user_list_type: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 years: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ImportList resources.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] account_id: Account ID.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] base_url: Base URL.
        :param pulumi.Input[bool] cast: Include cast.
        :param pulumi.Input[bool] cast_director: Include cast director.
        :param pulumi.Input[bool] cast_producer: Include cast producer.
        :param pulumi.Input[bool] cast_sound: Include cast sound.
        :param pulumi.Input[bool] cast_writing: Include cast writing.
        :param pulumi.Input[str] certification: Certification.
        :param pulumi.Input[str] company_id: Company ID.
        :param pulumi.Input[str] config_contract: ImportList configuration template.
        :param pulumi.Input[bool] enable_auto: Enable automatic add flag.
        :param pulumi.Input[bool] enabled: Enabled flag.
        :param pulumi.Input[str] exclude_genre_ids: Exclude genre IDs.
        :param pulumi.Input[str] expires: Expires.
        :param pulumi.Input[str] genres: Genres.
        :param pulumi.Input[str] implementation: ImportList implementation name.
        :param pulumi.Input[str] include_genre_ids: Include genre IDs.
        :param pulumi.Input[str] keyword_id: Keyword ID.
        :param pulumi.Input[int] language_code: Language code.
        :param pulumi.Input[int] limit: limit.
        :param pulumi.Input[str] link: Link.
        :param pulumi.Input[str] list_id: List ID.
        :param pulumi.Input[int] list_order: List order.
        :param pulumi.Input[str] list_type: List type.
        :param pulumi.Input[str] listname: List name.
        :param pulumi.Input[int] min_score: Min score.
        :param pulumi.Input[str] min_vote_average: Min vote average.
        :param pulumi.Input[str] min_votes: Min votes.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
        :param pulumi.Input[str] monitor: Should monitor.
        :param pulumi.Input[str] name: Import List name.
        :param pulumi.Input[bool] only_active: Only active.
        :param pulumi.Input[str] person_id: Person ID.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] profile_ids: Profile IDs.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] rating: Rating.
        :param pulumi.Input[str] refresh_token: Refresh token.
        :param pulumi.Input[str] root_folder_path: Root folder path.
        :param pulumi.Input[bool] search_on_add: Search on add flag.
        :param pulumi.Input[int] source: Source.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tag_ids: Tag IDs.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] tmdb_certification: Certification.
        :param pulumi.Input[int] tmdb_list_type: TMDB list type.
        :param pulumi.Input[str] trakt_additional_parameters: Trakt additional parameters.
        :param pulumi.Input[int] trakt_list_type: Trakt list type.
        :param pulumi.Input[str] url: URL.
        :param pulumi.Input[str] url_base: Base URL.
        :param pulumi.Input[int] user_list_type: User list type.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] years: Years.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if auth_user is not None:
            pulumi.set(__self__, "auth_user", auth_user)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)
        if cast is not None:
            pulumi.set(__self__, "cast", cast)
        if cast_director is not None:
            pulumi.set(__self__, "cast_director", cast_director)
        if cast_producer is not None:
            pulumi.set(__self__, "cast_producer", cast_producer)
        if cast_sound is not None:
            pulumi.set(__self__, "cast_sound", cast_sound)
        if cast_writing is not None:
            pulumi.set(__self__, "cast_writing", cast_writing)
        if certification is not None:
            pulumi.set(__self__, "certification", certification)
        if company_id is not None:
            pulumi.set(__self__, "company_id", company_id)
        if config_contract is not None:
            pulumi.set(__self__, "config_contract", config_contract)
        if enable_auto is not None:
            pulumi.set(__self__, "enable_auto", enable_auto)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_genre_ids is not None:
            pulumi.set(__self__, "exclude_genre_ids", exclude_genre_ids)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if genres is not None:
            pulumi.set(__self__, "genres", genres)
        if implementation is not None:
            pulumi.set(__self__, "implementation", implementation)
        if include_genre_ids is not None:
            pulumi.set(__self__, "include_genre_ids", include_genre_ids)
        if keyword_id is not None:
            pulumi.set(__self__, "keyword_id", keyword_id)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if list_id is not None:
            pulumi.set(__self__, "list_id", list_id)
        if list_order is not None:
            pulumi.set(__self__, "list_order", list_order)
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if min_score is not None:
            pulumi.set(__self__, "min_score", min_score)
        if min_vote_average is not None:
            pulumi.set(__self__, "min_vote_average", min_vote_average)
        if min_votes is not None:
            pulumi.set(__self__, "min_votes", min_votes)
        if minimum_availability is not None:
            pulumi.set(__self__, "minimum_availability", minimum_availability)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if only_active is not None:
            pulumi.set(__self__, "only_active", only_active)
        if person_id is not None:
            pulumi.set(__self__, "person_id", person_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile_ids is not None:
            pulumi.set(__self__, "profile_ids", profile_ids)
        if quality_profile_id is not None:
            pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if rating is not None:
            pulumi.set(__self__, "rating", rating)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if root_folder_path is not None:
            pulumi.set(__self__, "root_folder_path", root_folder_path)
        if search_on_add is not None:
            pulumi.set(__self__, "search_on_add", search_on_add)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tag_ids is not None:
            pulumi.set(__self__, "tag_ids", tag_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tmdb_certification is not None:
            pulumi.set(__self__, "tmdb_certification", tmdb_certification)
        if tmdb_list_type is not None:
            pulumi.set(__self__, "tmdb_list_type", tmdb_list_type)
        if trakt_additional_parameters is not None:
            pulumi.set(__self__, "trakt_additional_parameters", trakt_additional_parameters)
        if trakt_list_type is not None:
            pulumi.set(__self__, "trakt_list_type", trakt_list_type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)
        if user_list_type is not None:
            pulumi.set(__self__, "user_list_type", user_list_type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if years is not None:
            pulumi.set(__self__, "years", years)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> Optional[pulumi.Input[str]]:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @auth_user.setter
    def auth_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_user", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter
    def cast(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast.
        """
        return pulumi.get(self, "cast")

    @cast.setter
    def cast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast", value)

    @property
    @pulumi.getter(name="castDirector")
    def cast_director(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast director.
        """
        return pulumi.get(self, "cast_director")

    @cast_director.setter
    def cast_director(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast_director", value)

    @property
    @pulumi.getter(name="castProducer")
    def cast_producer(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast producer.
        """
        return pulumi.get(self, "cast_producer")

    @cast_producer.setter
    def cast_producer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast_producer", value)

    @property
    @pulumi.getter(name="castSound")
    def cast_sound(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast sound.
        """
        return pulumi.get(self, "cast_sound")

    @cast_sound.setter
    def cast_sound(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast_sound", value)

    @property
    @pulumi.getter(name="castWriting")
    def cast_writing(self) -> Optional[pulumi.Input[bool]]:
        """
        Include cast writing.
        """
        return pulumi.get(self, "cast_writing")

    @cast_writing.setter
    def cast_writing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cast_writing", value)

    @property
    @pulumi.getter
    def certification(self) -> Optional[pulumi.Input[str]]:
        """
        Certification.
        """
        return pulumi.get(self, "certification")

    @certification.setter
    def certification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certification", value)

    @property
    @pulumi.getter(name="companyId")
    def company_id(self) -> Optional[pulumi.Input[str]]:
        """
        Company ID.
        """
        return pulumi.get(self, "company_id")

    @company_id.setter
    def company_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_id", value)

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> Optional[pulumi.Input[str]]:
        """
        ImportList configuration template.
        """
        return pulumi.get(self, "config_contract")

    @config_contract.setter
    def config_contract(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_contract", value)

    @property
    @pulumi.getter(name="enableAuto")
    def enable_auto(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_auto")

    @enable_auto.setter
    def enable_auto(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeGenreIds")
    def exclude_genre_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Exclude genre IDs.
        """
        return pulumi.get(self, "exclude_genre_ids")

    @exclude_genre_ids.setter
    def exclude_genre_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_genre_ids", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter
    def genres(self) -> Optional[pulumi.Input[str]]:
        """
        Genres.
        """
        return pulumi.get(self, "genres")

    @genres.setter
    def genres(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "genres", value)

    @property
    @pulumi.getter
    def implementation(self) -> Optional[pulumi.Input[str]]:
        """
        ImportList implementation name.
        """
        return pulumi.get(self, "implementation")

    @implementation.setter
    def implementation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "implementation", value)

    @property
    @pulumi.getter(name="includeGenreIds")
    def include_genre_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Include genre IDs.
        """
        return pulumi.get(self, "include_genre_ids")

    @include_genre_ids.setter
    def include_genre_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_genre_ids", value)

    @property
    @pulumi.getter(name="keywordId")
    def keyword_id(self) -> Optional[pulumi.Input[str]]:
        """
        Keyword ID.
        """
        return pulumi.get(self, "keyword_id")

    @keyword_id.setter
    def keyword_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyword_id", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[int]]:
        """
        Language code.
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        limit.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        Link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> Optional[pulumi.Input[str]]:
        """
        List ID.
        """
        return pulumi.get(self, "list_id")

    @list_id.setter
    def list_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list_id", value)

    @property
    @pulumi.getter(name="listOrder")
    def list_order(self) -> Optional[pulumi.Input[int]]:
        """
        List order.
        """
        return pulumi.get(self, "list_order")

    @list_order.setter
    def list_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "list_order", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[pulumi.Input[str]]:
        """
        List type.
        """
        return pulumi.get(self, "list_type")

    @list_type.setter
    def list_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list_type", value)

    @property
    @pulumi.getter
    def listname(self) -> Optional[pulumi.Input[str]]:
        """
        List name.
        """
        return pulumi.get(self, "listname")

    @listname.setter
    def listname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listname", value)

    @property
    @pulumi.getter(name="minScore")
    def min_score(self) -> Optional[pulumi.Input[int]]:
        """
        Min score.
        """
        return pulumi.get(self, "min_score")

    @min_score.setter
    def min_score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_score", value)

    @property
    @pulumi.getter(name="minVoteAverage")
    def min_vote_average(self) -> Optional[pulumi.Input[str]]:
        """
        Min vote average.
        """
        return pulumi.get(self, "min_vote_average")

    @min_vote_average.setter
    def min_vote_average(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_vote_average", value)

    @property
    @pulumi.getter(name="minVotes")
    def min_votes(self) -> Optional[pulumi.Input[str]]:
        """
        Min votes.
        """
        return pulumi.get(self, "min_votes")

    @min_votes.setter
    def min_votes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_votes", value)

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum availability.
        """
        return pulumi.get(self, "minimum_availability")

    @minimum_availability.setter
    def minimum_availability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum_availability", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Should monitor.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onlyActive")
    def only_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Only active.
        """
        return pulumi.get(self, "only_active")

    @only_active.setter
    def only_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_active", value)

    @property
    @pulumi.getter(name="personId")
    def person_id(self) -> Optional[pulumi.Input[str]]:
        """
        Person ID.
        """
        return pulumi.get(self, "person_id")

    @person_id.setter
    def person_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "person_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="profileIds")
    def profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Profile IDs.
        """
        return pulumi.get(self, "profile_ids")

    @profile_ids.setter
    def profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "profile_ids", value)

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> Optional[pulumi.Input[int]]:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @quality_profile_id.setter
    def quality_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_profile_id", value)

    @property
    @pulumi.getter
    def rating(self) -> Optional[pulumi.Input[str]]:
        """
        Rating.
        """
        return pulumi.get(self, "rating")

    @rating.setter
    def rating(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rating", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> Optional[pulumi.Input[str]]:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @root_folder_path.setter
    def root_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_folder_path", value)

    @property
    @pulumi.getter(name="searchOnAdd")
    def search_on_add(self) -> Optional[pulumi.Input[bool]]:
        """
        Search on add flag.
        """
        return pulumi.get(self, "search_on_add")

    @search_on_add.setter
    def search_on_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "search_on_add", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[int]]:
        """
        Source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Tag IDs.
        """
        return pulumi.get(self, "tag_ids")

    @tag_ids.setter
    def tag_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tag_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tmdbCertification")
    def tmdb_certification(self) -> Optional[pulumi.Input[str]]:
        """
        Certification.
        """
        return pulumi.get(self, "tmdb_certification")

    @tmdb_certification.setter
    def tmdb_certification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmdb_certification", value)

    @property
    @pulumi.getter(name="tmdbListType")
    def tmdb_list_type(self) -> Optional[pulumi.Input[int]]:
        """
        TMDB list type.
        """
        return pulumi.get(self, "tmdb_list_type")

    @tmdb_list_type.setter
    def tmdb_list_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tmdb_list_type", value)

    @property
    @pulumi.getter(name="traktAdditionalParameters")
    def trakt_additional_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Trakt additional parameters.
        """
        return pulumi.get(self, "trakt_additional_parameters")

    @trakt_additional_parameters.setter
    def trakt_additional_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trakt_additional_parameters", value)

    @property
    @pulumi.getter(name="traktListType")
    def trakt_list_type(self) -> Optional[pulumi.Input[int]]:
        """
        Trakt list type.
        """
        return pulumi.get(self, "trakt_list_type")

    @trakt_list_type.setter
    def trakt_list_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trakt_list_type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[pulumi.Input[str]]:
        """
        Base URL.
        """
        return pulumi.get(self, "url_base")

    @url_base.setter
    def url_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_base", value)

    @property
    @pulumi.getter(name="userListType")
    def user_list_type(self) -> Optional[pulumi.Input[int]]:
        """
        User list type.
        """
        return pulumi.get(self, "user_list_type")

    @user_list_type.setter
    def user_list_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_list_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def years(self) -> Optional[pulumi.Input[str]]:
        """
        Years.
        """
        return pulumi.get(self, "years")

    @years.setter
    def years(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "years", value)


class ImportList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 cast: Optional[pulumi.Input[bool]] = None,
                 cast_director: Optional[pulumi.Input[bool]] = None,
                 cast_producer: Optional[pulumi.Input[bool]] = None,
                 cast_sound: Optional[pulumi.Input[bool]] = None,
                 cast_writing: Optional[pulumi.Input[bool]] = None,
                 certification: Optional[pulumi.Input[str]] = None,
                 company_id: Optional[pulumi.Input[str]] = None,
                 config_contract: Optional[pulumi.Input[str]] = None,
                 enable_auto: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_genre_ids: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 genres: Optional[pulumi.Input[str]] = None,
                 implementation: Optional[pulumi.Input[str]] = None,
                 include_genre_ids: Optional[pulumi.Input[str]] = None,
                 keyword_id: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[int]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 list_id: Optional[pulumi.Input[str]] = None,
                 list_order: Optional[pulumi.Input[int]] = None,
                 list_type: Optional[pulumi.Input[str]] = None,
                 listname: Optional[pulumi.Input[str]] = None,
                 min_score: Optional[pulumi.Input[int]] = None,
                 min_vote_average: Optional[pulumi.Input[str]] = None,
                 min_votes: Optional[pulumi.Input[str]] = None,
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_active: Optional[pulumi.Input[bool]] = None,
                 person_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 rating: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 root_folder_path: Optional[pulumi.Input[str]] = None,
                 search_on_add: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[int]] = None,
                 tag_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tmdb_certification: Optional[pulumi.Input[str]] = None,
                 tmdb_list_type: Optional[pulumi.Input[int]] = None,
                 trakt_additional_parameters: Optional[pulumi.Input[str]] = None,
                 trakt_list_type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 url_base: Optional[pulumi.Input[str]] = None,
                 user_list_type: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 years: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        <!-- subcategory:Import Lists -->
        Generic Import List resource. When possible use a specific resource instead.
        For more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.import_lists.ImportList("example",
            enabled=False,
            enable_auto=True,
            search_on_add=False,
            monitor="movieOnly",
            minimum_availability="tba",
            list_type="program",
            root_folder_path=radarr_root_folder["example"]["path"],
            quality_profile_id=radarr_quality_profile["example"]["id"],
            implementation="RadarrImport",
            config_contract="RadarrSettings",
            tags=[
                1,
                2,
            ],
            tag_ids=[
                1,
                2,
            ],
            profile_ids=[1],
            base_url="http://127.0.0.1:8686",
            api_key="APIKey")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:ImportLists/importList:ImportList example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] account_id: Account ID.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] base_url: Base URL.
        :param pulumi.Input[bool] cast: Include cast.
        :param pulumi.Input[bool] cast_director: Include cast director.
        :param pulumi.Input[bool] cast_producer: Include cast producer.
        :param pulumi.Input[bool] cast_sound: Include cast sound.
        :param pulumi.Input[bool] cast_writing: Include cast writing.
        :param pulumi.Input[str] certification: Certification.
        :param pulumi.Input[str] company_id: Company ID.
        :param pulumi.Input[str] config_contract: ImportList configuration template.
        :param pulumi.Input[bool] enable_auto: Enable automatic add flag.
        :param pulumi.Input[bool] enabled: Enabled flag.
        :param pulumi.Input[str] exclude_genre_ids: Exclude genre IDs.
        :param pulumi.Input[str] expires: Expires.
        :param pulumi.Input[str] genres: Genres.
        :param pulumi.Input[str] implementation: ImportList implementation name.
        :param pulumi.Input[str] include_genre_ids: Include genre IDs.
        :param pulumi.Input[str] keyword_id: Keyword ID.
        :param pulumi.Input[int] language_code: Language code.
        :param pulumi.Input[int] limit: limit.
        :param pulumi.Input[str] link: Link.
        :param pulumi.Input[str] list_id: List ID.
        :param pulumi.Input[int] list_order: List order.
        :param pulumi.Input[str] list_type: List type.
        :param pulumi.Input[str] listname: List name.
        :param pulumi.Input[int] min_score: Min score.
        :param pulumi.Input[str] min_vote_average: Min vote average.
        :param pulumi.Input[str] min_votes: Min votes.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
        :param pulumi.Input[str] monitor: Should monitor.
        :param pulumi.Input[str] name: Import List name.
        :param pulumi.Input[bool] only_active: Only active.
        :param pulumi.Input[str] person_id: Person ID.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] profile_ids: Profile IDs.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] rating: Rating.
        :param pulumi.Input[str] refresh_token: Refresh token.
        :param pulumi.Input[str] root_folder_path: Root folder path.
        :param pulumi.Input[bool] search_on_add: Search on add flag.
        :param pulumi.Input[int] source: Source.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tag_ids: Tag IDs.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] tmdb_certification: Certification.
        :param pulumi.Input[int] tmdb_list_type: TMDB list type.
        :param pulumi.Input[str] trakt_additional_parameters: Trakt additional parameters.
        :param pulumi.Input[int] trakt_list_type: Trakt list type.
        :param pulumi.Input[str] url: URL.
        :param pulumi.Input[str] url_base: Base URL.
        :param pulumi.Input[int] user_list_type: User list type.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] years: Years.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImportListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Import Lists -->
        Generic Import List resource. When possible use a specific resource instead.
        For more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.import_lists.ImportList("example",
            enabled=False,
            enable_auto=True,
            search_on_add=False,
            monitor="movieOnly",
            minimum_availability="tba",
            list_type="program",
            root_folder_path=radarr_root_folder["example"]["path"],
            quality_profile_id=radarr_quality_profile["example"]["id"],
            implementation="RadarrImport",
            config_contract="RadarrSettings",
            tags=[
                1,
                2,
            ],
            tag_ids=[
                1,
                2,
            ],
            profile_ids=[1],
            base_url="http://127.0.0.1:8686",
            api_key="APIKey")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:ImportLists/importList:ImportList example 1
        ```

        :param str resource_name: The name of the resource.
        :param ImportListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImportListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 cast: Optional[pulumi.Input[bool]] = None,
                 cast_director: Optional[pulumi.Input[bool]] = None,
                 cast_producer: Optional[pulumi.Input[bool]] = None,
                 cast_sound: Optional[pulumi.Input[bool]] = None,
                 cast_writing: Optional[pulumi.Input[bool]] = None,
                 certification: Optional[pulumi.Input[str]] = None,
                 company_id: Optional[pulumi.Input[str]] = None,
                 config_contract: Optional[pulumi.Input[str]] = None,
                 enable_auto: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_genre_ids: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 genres: Optional[pulumi.Input[str]] = None,
                 implementation: Optional[pulumi.Input[str]] = None,
                 include_genre_ids: Optional[pulumi.Input[str]] = None,
                 keyword_id: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[int]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 list_id: Optional[pulumi.Input[str]] = None,
                 list_order: Optional[pulumi.Input[int]] = None,
                 list_type: Optional[pulumi.Input[str]] = None,
                 listname: Optional[pulumi.Input[str]] = None,
                 min_score: Optional[pulumi.Input[int]] = None,
                 min_vote_average: Optional[pulumi.Input[str]] = None,
                 min_votes: Optional[pulumi.Input[str]] = None,
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_active: Optional[pulumi.Input[bool]] = None,
                 person_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 rating: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 root_folder_path: Optional[pulumi.Input[str]] = None,
                 search_on_add: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[int]] = None,
                 tag_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tmdb_certification: Optional[pulumi.Input[str]] = None,
                 tmdb_list_type: Optional[pulumi.Input[int]] = None,
                 trakt_additional_parameters: Optional[pulumi.Input[str]] = None,
                 trakt_list_type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 url_base: Optional[pulumi.Input[str]] = None,
                 user_list_type: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 years: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImportListArgs.__new__(ImportListArgs)

            __props__.__dict__["access_token"] = None if access_token is None else pulumi.Output.secret(access_token)
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["api_key"] = None if api_key is None else pulumi.Output.secret(api_key)
            __props__.__dict__["auth_user"] = auth_user
            __props__.__dict__["base_url"] = base_url
            __props__.__dict__["cast"] = cast
            __props__.__dict__["cast_director"] = cast_director
            __props__.__dict__["cast_producer"] = cast_producer
            __props__.__dict__["cast_sound"] = cast_sound
            __props__.__dict__["cast_writing"] = cast_writing
            __props__.__dict__["certification"] = certification
            __props__.__dict__["company_id"] = company_id
            if config_contract is None and not opts.urn:
                raise TypeError("Missing required property 'config_contract'")
            __props__.__dict__["config_contract"] = config_contract
            __props__.__dict__["enable_auto"] = enable_auto
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["exclude_genre_ids"] = exclude_genre_ids
            __props__.__dict__["expires"] = expires
            __props__.__dict__["genres"] = genres
            __props__.__dict__["implementation"] = implementation
            __props__.__dict__["include_genre_ids"] = include_genre_ids
            __props__.__dict__["keyword_id"] = keyword_id
            __props__.__dict__["language_code"] = language_code
            __props__.__dict__["limit"] = limit
            __props__.__dict__["link"] = link
            __props__.__dict__["list_id"] = list_id
            __props__.__dict__["list_order"] = list_order
            if list_type is None and not opts.urn:
                raise TypeError("Missing required property 'list_type'")
            __props__.__dict__["list_type"] = list_type
            __props__.__dict__["listname"] = listname
            __props__.__dict__["min_score"] = min_score
            __props__.__dict__["min_vote_average"] = min_vote_average
            __props__.__dict__["min_votes"] = min_votes
            if minimum_availability is None and not opts.urn:
                raise TypeError("Missing required property 'minimum_availability'")
            __props__.__dict__["minimum_availability"] = minimum_availability
            if monitor is None and not opts.urn:
                raise TypeError("Missing required property 'monitor'")
            __props__.__dict__["monitor"] = monitor
            __props__.__dict__["name"] = name
            __props__.__dict__["only_active"] = only_active
            __props__.__dict__["person_id"] = person_id
            __props__.__dict__["port"] = port
            __props__.__dict__["profile_ids"] = profile_ids
            if quality_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'quality_profile_id'")
            __props__.__dict__["quality_profile_id"] = quality_profile_id
            __props__.__dict__["rating"] = rating
            __props__.__dict__["refresh_token"] = None if refresh_token is None else pulumi.Output.secret(refresh_token)
            if root_folder_path is None and not opts.urn:
                raise TypeError("Missing required property 'root_folder_path'")
            __props__.__dict__["root_folder_path"] = root_folder_path
            __props__.__dict__["search_on_add"] = search_on_add
            __props__.__dict__["source"] = source
            __props__.__dict__["tag_ids"] = tag_ids
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tmdb_certification"] = tmdb_certification
            __props__.__dict__["tmdb_list_type"] = tmdb_list_type
            __props__.__dict__["trakt_additional_parameters"] = trakt_additional_parameters
            __props__.__dict__["trakt_list_type"] = trakt_list_type
            __props__.__dict__["url"] = url
            __props__.__dict__["url_base"] = url_base
            __props__.__dict__["user_list_type"] = user_list_type
            __props__.__dict__["username"] = username
            __props__.__dict__["years"] = years
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessToken", "apiKey", "refreshToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ImportList, __self__).__init__(
            'radarr:ImportLists/importList:ImportList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token: Optional[pulumi.Input[str]] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            api_key: Optional[pulumi.Input[str]] = None,
            auth_user: Optional[pulumi.Input[str]] = None,
            base_url: Optional[pulumi.Input[str]] = None,
            cast: Optional[pulumi.Input[bool]] = None,
            cast_director: Optional[pulumi.Input[bool]] = None,
            cast_producer: Optional[pulumi.Input[bool]] = None,
            cast_sound: Optional[pulumi.Input[bool]] = None,
            cast_writing: Optional[pulumi.Input[bool]] = None,
            certification: Optional[pulumi.Input[str]] = None,
            company_id: Optional[pulumi.Input[str]] = None,
            config_contract: Optional[pulumi.Input[str]] = None,
            enable_auto: Optional[pulumi.Input[bool]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            exclude_genre_ids: Optional[pulumi.Input[str]] = None,
            expires: Optional[pulumi.Input[str]] = None,
            genres: Optional[pulumi.Input[str]] = None,
            implementation: Optional[pulumi.Input[str]] = None,
            include_genre_ids: Optional[pulumi.Input[str]] = None,
            keyword_id: Optional[pulumi.Input[str]] = None,
            language_code: Optional[pulumi.Input[int]] = None,
            limit: Optional[pulumi.Input[int]] = None,
            link: Optional[pulumi.Input[str]] = None,
            list_id: Optional[pulumi.Input[str]] = None,
            list_order: Optional[pulumi.Input[int]] = None,
            list_type: Optional[pulumi.Input[str]] = None,
            listname: Optional[pulumi.Input[str]] = None,
            min_score: Optional[pulumi.Input[int]] = None,
            min_vote_average: Optional[pulumi.Input[str]] = None,
            min_votes: Optional[pulumi.Input[str]] = None,
            minimum_availability: Optional[pulumi.Input[str]] = None,
            monitor: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            only_active: Optional[pulumi.Input[bool]] = None,
            person_id: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            quality_profile_id: Optional[pulumi.Input[int]] = None,
            rating: Optional[pulumi.Input[str]] = None,
            refresh_token: Optional[pulumi.Input[str]] = None,
            root_folder_path: Optional[pulumi.Input[str]] = None,
            search_on_add: Optional[pulumi.Input[bool]] = None,
            source: Optional[pulumi.Input[int]] = None,
            tag_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            tmdb_certification: Optional[pulumi.Input[str]] = None,
            tmdb_list_type: Optional[pulumi.Input[int]] = None,
            trakt_additional_parameters: Optional[pulumi.Input[str]] = None,
            trakt_list_type: Optional[pulumi.Input[int]] = None,
            url: Optional[pulumi.Input[str]] = None,
            url_base: Optional[pulumi.Input[str]] = None,
            user_list_type: Optional[pulumi.Input[int]] = None,
            username: Optional[pulumi.Input[str]] = None,
            years: Optional[pulumi.Input[str]] = None) -> 'ImportList':
        """
        Get an existing ImportList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] account_id: Account ID.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] base_url: Base URL.
        :param pulumi.Input[bool] cast: Include cast.
        :param pulumi.Input[bool] cast_director: Include cast director.
        :param pulumi.Input[bool] cast_producer: Include cast producer.
        :param pulumi.Input[bool] cast_sound: Include cast sound.
        :param pulumi.Input[bool] cast_writing: Include cast writing.
        :param pulumi.Input[str] certification: Certification.
        :param pulumi.Input[str] company_id: Company ID.
        :param pulumi.Input[str] config_contract: ImportList configuration template.
        :param pulumi.Input[bool] enable_auto: Enable automatic add flag.
        :param pulumi.Input[bool] enabled: Enabled flag.
        :param pulumi.Input[str] exclude_genre_ids: Exclude genre IDs.
        :param pulumi.Input[str] expires: Expires.
        :param pulumi.Input[str] genres: Genres.
        :param pulumi.Input[str] implementation: ImportList implementation name.
        :param pulumi.Input[str] include_genre_ids: Include genre IDs.
        :param pulumi.Input[str] keyword_id: Keyword ID.
        :param pulumi.Input[int] language_code: Language code.
        :param pulumi.Input[int] limit: limit.
        :param pulumi.Input[str] link: Link.
        :param pulumi.Input[str] list_id: List ID.
        :param pulumi.Input[int] list_order: List order.
        :param pulumi.Input[str] list_type: List type.
        :param pulumi.Input[str] listname: List name.
        :param pulumi.Input[int] min_score: Min score.
        :param pulumi.Input[str] min_vote_average: Min vote average.
        :param pulumi.Input[str] min_votes: Min votes.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
        :param pulumi.Input[str] monitor: Should monitor.
        :param pulumi.Input[str] name: Import List name.
        :param pulumi.Input[bool] only_active: Only active.
        :param pulumi.Input[str] person_id: Person ID.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] profile_ids: Profile IDs.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] rating: Rating.
        :param pulumi.Input[str] refresh_token: Refresh token.
        :param pulumi.Input[str] root_folder_path: Root folder path.
        :param pulumi.Input[bool] search_on_add: Search on add flag.
        :param pulumi.Input[int] source: Source.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tag_ids: Tag IDs.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] tmdb_certification: Certification.
        :param pulumi.Input[int] tmdb_list_type: TMDB list type.
        :param pulumi.Input[str] trakt_additional_parameters: Trakt additional parameters.
        :param pulumi.Input[int] trakt_list_type: Trakt list type.
        :param pulumi.Input[str] url: URL.
        :param pulumi.Input[str] url_base: Base URL.
        :param pulumi.Input[int] user_list_type: User list type.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] years: Years.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImportListState.__new__(_ImportListState)

        __props__.__dict__["access_token"] = access_token
        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["auth_user"] = auth_user
        __props__.__dict__["base_url"] = base_url
        __props__.__dict__["cast"] = cast
        __props__.__dict__["cast_director"] = cast_director
        __props__.__dict__["cast_producer"] = cast_producer
        __props__.__dict__["cast_sound"] = cast_sound
        __props__.__dict__["cast_writing"] = cast_writing
        __props__.__dict__["certification"] = certification
        __props__.__dict__["company_id"] = company_id
        __props__.__dict__["config_contract"] = config_contract
        __props__.__dict__["enable_auto"] = enable_auto
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["exclude_genre_ids"] = exclude_genre_ids
        __props__.__dict__["expires"] = expires
        __props__.__dict__["genres"] = genres
        __props__.__dict__["implementation"] = implementation
        __props__.__dict__["include_genre_ids"] = include_genre_ids
        __props__.__dict__["keyword_id"] = keyword_id
        __props__.__dict__["language_code"] = language_code
        __props__.__dict__["limit"] = limit
        __props__.__dict__["link"] = link
        __props__.__dict__["list_id"] = list_id
        __props__.__dict__["list_order"] = list_order
        __props__.__dict__["list_type"] = list_type
        __props__.__dict__["listname"] = listname
        __props__.__dict__["min_score"] = min_score
        __props__.__dict__["min_vote_average"] = min_vote_average
        __props__.__dict__["min_votes"] = min_votes
        __props__.__dict__["minimum_availability"] = minimum_availability
        __props__.__dict__["monitor"] = monitor
        __props__.__dict__["name"] = name
        __props__.__dict__["only_active"] = only_active
        __props__.__dict__["person_id"] = person_id
        __props__.__dict__["port"] = port
        __props__.__dict__["profile_ids"] = profile_ids
        __props__.__dict__["quality_profile_id"] = quality_profile_id
        __props__.__dict__["rating"] = rating
        __props__.__dict__["refresh_token"] = refresh_token
        __props__.__dict__["root_folder_path"] = root_folder_path
        __props__.__dict__["search_on_add"] = search_on_add
        __props__.__dict__["source"] = source
        __props__.__dict__["tag_ids"] = tag_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tmdb_certification"] = tmdb_certification
        __props__.__dict__["tmdb_list_type"] = tmdb_list_type
        __props__.__dict__["trakt_additional_parameters"] = trakt_additional_parameters
        __props__.__dict__["trakt_list_type"] = trakt_list_type
        __props__.__dict__["url"] = url
        __props__.__dict__["url_base"] = url_base
        __props__.__dict__["user_list_type"] = user_list_type
        __props__.__dict__["username"] = username
        __props__.__dict__["years"] = years
        return ImportList(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[str]:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        Account ID.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[str]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> pulumi.Output[str]:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> pulumi.Output[str]:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter
    def cast(self) -> pulumi.Output[bool]:
        """
        Include cast.
        """
        return pulumi.get(self, "cast")

    @property
    @pulumi.getter(name="castDirector")
    def cast_director(self) -> pulumi.Output[bool]:
        """
        Include cast director.
        """
        return pulumi.get(self, "cast_director")

    @property
    @pulumi.getter(name="castProducer")
    def cast_producer(self) -> pulumi.Output[bool]:
        """
        Include cast producer.
        """
        return pulumi.get(self, "cast_producer")

    @property
    @pulumi.getter(name="castSound")
    def cast_sound(self) -> pulumi.Output[bool]:
        """
        Include cast sound.
        """
        return pulumi.get(self, "cast_sound")

    @property
    @pulumi.getter(name="castWriting")
    def cast_writing(self) -> pulumi.Output[bool]:
        """
        Include cast writing.
        """
        return pulumi.get(self, "cast_writing")

    @property
    @pulumi.getter
    def certification(self) -> pulumi.Output[str]:
        """
        Certification.
        """
        return pulumi.get(self, "certification")

    @property
    @pulumi.getter(name="companyId")
    def company_id(self) -> pulumi.Output[str]:
        """
        Company ID.
        """
        return pulumi.get(self, "company_id")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> pulumi.Output[str]:
        """
        ImportList configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="enableAuto")
    def enable_auto(self) -> pulumi.Output[bool]:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_auto")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeGenreIds")
    def exclude_genre_ids(self) -> pulumi.Output[str]:
        """
        Exclude genre IDs.
        """
        return pulumi.get(self, "exclude_genre_ids")

    @property
    @pulumi.getter
    def expires(self) -> pulumi.Output[str]:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def genres(self) -> pulumi.Output[str]:
        """
        Genres.
        """
        return pulumi.get(self, "genres")

    @property
    @pulumi.getter
    def implementation(self) -> pulumi.Output[str]:
        """
        ImportList implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="includeGenreIds")
    def include_genre_ids(self) -> pulumi.Output[str]:
        """
        Include genre IDs.
        """
        return pulumi.get(self, "include_genre_ids")

    @property
    @pulumi.getter(name="keywordId")
    def keyword_id(self) -> pulumi.Output[str]:
        """
        Keyword ID.
        """
        return pulumi.get(self, "keyword_id")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> pulumi.Output[int]:
        """
        Language code.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Output[int]:
        """
        limit.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def link(self) -> pulumi.Output[str]:
        """
        Link.
        """
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> pulumi.Output[str]:
        """
        List ID.
        """
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="listOrder")
    def list_order(self) -> pulumi.Output[int]:
        """
        List order.
        """
        return pulumi.get(self, "list_order")

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> pulumi.Output[str]:
        """
        List type.
        """
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter
    def listname(self) -> pulumi.Output[str]:
        """
        List name.
        """
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter(name="minScore")
    def min_score(self) -> pulumi.Output[int]:
        """
        Min score.
        """
        return pulumi.get(self, "min_score")

    @property
    @pulumi.getter(name="minVoteAverage")
    def min_vote_average(self) -> pulumi.Output[str]:
        """
        Min vote average.
        """
        return pulumi.get(self, "min_vote_average")

    @property
    @pulumi.getter(name="minVotes")
    def min_votes(self) -> pulumi.Output[str]:
        """
        Min votes.
        """
        return pulumi.get(self, "min_votes")

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> pulumi.Output[str]:
        """
        Minimum availability.
        """
        return pulumi.get(self, "minimum_availability")

    @property
    @pulumi.getter
    def monitor(self) -> pulumi.Output[str]:
        """
        Should monitor.
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onlyActive")
    def only_active(self) -> pulumi.Output[bool]:
        """
        Only active.
        """
        return pulumi.get(self, "only_active")

    @property
    @pulumi.getter(name="personId")
    def person_id(self) -> pulumi.Output[str]:
        """
        Person ID.
        """
        return pulumi.get(self, "person_id")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="profileIds")
    def profile_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        Profile IDs.
        """
        return pulumi.get(self, "profile_ids")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> pulumi.Output[int]:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter
    def rating(self) -> pulumi.Output[str]:
        """
        Rating.
        """
        return pulumi.get(self, "rating")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Output[str]:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> pulumi.Output[str]:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="searchOnAdd")
    def search_on_add(self) -> pulumi.Output[bool]:
        """
        Search on add flag.
        """
        return pulumi.get(self, "search_on_add")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[int]:
        """
        Source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        Tag IDs.
        """
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tmdbCertification")
    def tmdb_certification(self) -> pulumi.Output[str]:
        """
        Certification.
        """
        return pulumi.get(self, "tmdb_certification")

    @property
    @pulumi.getter(name="tmdbListType")
    def tmdb_list_type(self) -> pulumi.Output[int]:
        """
        TMDB list type.
        """
        return pulumi.get(self, "tmdb_list_type")

    @property
    @pulumi.getter(name="traktAdditionalParameters")
    def trakt_additional_parameters(self) -> pulumi.Output[str]:
        """
        Trakt additional parameters.
        """
        return pulumi.get(self, "trakt_additional_parameters")

    @property
    @pulumi.getter(name="traktListType")
    def trakt_list_type(self) -> pulumi.Output[int]:
        """
        Trakt list type.
        """
        return pulumi.get(self, "trakt_list_type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> pulumi.Output[str]:
        """
        Base URL.
        """
        return pulumi.get(self, "url_base")

    @property
    @pulumi.getter(name="userListType")
    def user_list_type(self) -> pulumi.Output[int]:
        """
        User list type.
        """
        return pulumi.get(self, "user_list_type")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def years(self) -> pulumi.Output[str]:
        """
        Years.
        """
        return pulumi.get(self, "years")

