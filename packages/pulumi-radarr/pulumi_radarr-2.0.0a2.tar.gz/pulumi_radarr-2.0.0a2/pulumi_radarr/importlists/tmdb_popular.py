# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TmdbPopularArgs', 'TmdbPopular']

@pulumi.input_type
class TmdbPopularArgs:
    def __init__(__self__, *,
                 language_code: pulumi.Input[int],
                 minimum_availability: pulumi.Input[str],
                 monitor: pulumi.Input[str],
                 quality_profile_id: pulumi.Input[int],
                 root_folder_path: pulumi.Input[str],
                 tmdb_list_type: pulumi.Input[int],
                 enable_auto: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_genre_ids: Optional[pulumi.Input[str]] = None,
                 include_genre_ids: Optional[pulumi.Input[str]] = None,
                 list_order: Optional[pulumi.Input[int]] = None,
                 min_vote_average: Optional[pulumi.Input[str]] = None,
                 min_votes: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 search_on_add: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tmdb_certification: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TmdbPopular resource.
        :param pulumi.Input[int] language_code: Language code.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
        :param pulumi.Input[str] monitor: Should monitor.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] root_folder_path: Root folder path.
        :param pulumi.Input[int] tmdb_list_type: TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
        :param pulumi.Input[bool] enable_auto: Enable automatic add flag.
        :param pulumi.Input[bool] enabled: Enabled flag.
        :param pulumi.Input[str] exclude_genre_ids: Exclude genre IDs.
        :param pulumi.Input[str] include_genre_ids: Include genre IDs.
        :param pulumi.Input[int] list_order: List order.
        :param pulumi.Input[str] min_vote_average: Min vote average.
        :param pulumi.Input[str] min_votes: Min votes.
        :param pulumi.Input[str] name: Import List name.
        :param pulumi.Input[bool] search_on_add: Search on add flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] tmdb_certification: Certification.
        """
        pulumi.set(__self__, "language_code", language_code)
        pulumi.set(__self__, "minimum_availability", minimum_availability)
        pulumi.set(__self__, "monitor", monitor)
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        pulumi.set(__self__, "tmdb_list_type", tmdb_list_type)
        if enable_auto is not None:
            pulumi.set(__self__, "enable_auto", enable_auto)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_genre_ids is not None:
            pulumi.set(__self__, "exclude_genre_ids", exclude_genre_ids)
        if include_genre_ids is not None:
            pulumi.set(__self__, "include_genre_ids", include_genre_ids)
        if list_order is not None:
            pulumi.set(__self__, "list_order", list_order)
        if min_vote_average is not None:
            pulumi.set(__self__, "min_vote_average", min_vote_average)
        if min_votes is not None:
            pulumi.set(__self__, "min_votes", min_votes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if search_on_add is not None:
            pulumi.set(__self__, "search_on_add", search_on_add)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tmdb_certification is not None:
            pulumi.set(__self__, "tmdb_certification", tmdb_certification)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> pulumi.Input[int]:
        """
        Language code.
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> pulumi.Input[str]:
        """
        Minimum availability.
        """
        return pulumi.get(self, "minimum_availability")

    @minimum_availability.setter
    def minimum_availability(self, value: pulumi.Input[str]):
        pulumi.set(self, "minimum_availability", value)

    @property
    @pulumi.getter
    def monitor(self) -> pulumi.Input[str]:
        """
        Should monitor.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> pulumi.Input[int]:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @quality_profile_id.setter
    def quality_profile_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "quality_profile_id", value)

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> pulumi.Input[str]:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @root_folder_path.setter
    def root_folder_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "root_folder_path", value)

    @property
    @pulumi.getter(name="tmdbListType")
    def tmdb_list_type(self) -> pulumi.Input[int]:
        """
        TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
        """
        return pulumi.get(self, "tmdb_list_type")

    @tmdb_list_type.setter
    def tmdb_list_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "tmdb_list_type", value)

    @property
    @pulumi.getter(name="enableAuto")
    def enable_auto(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_auto")

    @enable_auto.setter
    def enable_auto(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeGenreIds")
    def exclude_genre_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Exclude genre IDs.
        """
        return pulumi.get(self, "exclude_genre_ids")

    @exclude_genre_ids.setter
    def exclude_genre_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_genre_ids", value)

    @property
    @pulumi.getter(name="includeGenreIds")
    def include_genre_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Include genre IDs.
        """
        return pulumi.get(self, "include_genre_ids")

    @include_genre_ids.setter
    def include_genre_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_genre_ids", value)

    @property
    @pulumi.getter(name="listOrder")
    def list_order(self) -> Optional[pulumi.Input[int]]:
        """
        List order.
        """
        return pulumi.get(self, "list_order")

    @list_order.setter
    def list_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "list_order", value)

    @property
    @pulumi.getter(name="minVoteAverage")
    def min_vote_average(self) -> Optional[pulumi.Input[str]]:
        """
        Min vote average.
        """
        return pulumi.get(self, "min_vote_average")

    @min_vote_average.setter
    def min_vote_average(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_vote_average", value)

    @property
    @pulumi.getter(name="minVotes")
    def min_votes(self) -> Optional[pulumi.Input[str]]:
        """
        Min votes.
        """
        return pulumi.get(self, "min_votes")

    @min_votes.setter
    def min_votes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_votes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="searchOnAdd")
    def search_on_add(self) -> Optional[pulumi.Input[bool]]:
        """
        Search on add flag.
        """
        return pulumi.get(self, "search_on_add")

    @search_on_add.setter
    def search_on_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "search_on_add", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tmdbCertification")
    def tmdb_certification(self) -> Optional[pulumi.Input[str]]:
        """
        Certification.
        """
        return pulumi.get(self, "tmdb_certification")

    @tmdb_certification.setter
    def tmdb_certification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmdb_certification", value)


@pulumi.input_type
class _TmdbPopularState:
    def __init__(__self__, *,
                 enable_auto: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_genre_ids: Optional[pulumi.Input[str]] = None,
                 include_genre_ids: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[int]] = None,
                 list_order: Optional[pulumi.Input[int]] = None,
                 min_vote_average: Optional[pulumi.Input[str]] = None,
                 min_votes: Optional[pulumi.Input[str]] = None,
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 root_folder_path: Optional[pulumi.Input[str]] = None,
                 search_on_add: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tmdb_certification: Optional[pulumi.Input[str]] = None,
                 tmdb_list_type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering TmdbPopular resources.
        :param pulumi.Input[bool] enable_auto: Enable automatic add flag.
        :param pulumi.Input[bool] enabled: Enabled flag.
        :param pulumi.Input[str] exclude_genre_ids: Exclude genre IDs.
        :param pulumi.Input[str] include_genre_ids: Include genre IDs.
        :param pulumi.Input[int] language_code: Language code.
        :param pulumi.Input[int] list_order: List order.
        :param pulumi.Input[str] min_vote_average: Min vote average.
        :param pulumi.Input[str] min_votes: Min votes.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
        :param pulumi.Input[str] monitor: Should monitor.
        :param pulumi.Input[str] name: Import List name.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] root_folder_path: Root folder path.
        :param pulumi.Input[bool] search_on_add: Search on add flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] tmdb_certification: Certification.
        :param pulumi.Input[int] tmdb_list_type: TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
        """
        if enable_auto is not None:
            pulumi.set(__self__, "enable_auto", enable_auto)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_genre_ids is not None:
            pulumi.set(__self__, "exclude_genre_ids", exclude_genre_ids)
        if include_genre_ids is not None:
            pulumi.set(__self__, "include_genre_ids", include_genre_ids)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if list_order is not None:
            pulumi.set(__self__, "list_order", list_order)
        if min_vote_average is not None:
            pulumi.set(__self__, "min_vote_average", min_vote_average)
        if min_votes is not None:
            pulumi.set(__self__, "min_votes", min_votes)
        if minimum_availability is not None:
            pulumi.set(__self__, "minimum_availability", minimum_availability)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quality_profile_id is not None:
            pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if root_folder_path is not None:
            pulumi.set(__self__, "root_folder_path", root_folder_path)
        if search_on_add is not None:
            pulumi.set(__self__, "search_on_add", search_on_add)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tmdb_certification is not None:
            pulumi.set(__self__, "tmdb_certification", tmdb_certification)
        if tmdb_list_type is not None:
            pulumi.set(__self__, "tmdb_list_type", tmdb_list_type)

    @property
    @pulumi.getter(name="enableAuto")
    def enable_auto(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_auto")

    @enable_auto.setter
    def enable_auto(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeGenreIds")
    def exclude_genre_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Exclude genre IDs.
        """
        return pulumi.get(self, "exclude_genre_ids")

    @exclude_genre_ids.setter
    def exclude_genre_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_genre_ids", value)

    @property
    @pulumi.getter(name="includeGenreIds")
    def include_genre_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Include genre IDs.
        """
        return pulumi.get(self, "include_genre_ids")

    @include_genre_ids.setter
    def include_genre_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_genre_ids", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[int]]:
        """
        Language code.
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter(name="listOrder")
    def list_order(self) -> Optional[pulumi.Input[int]]:
        """
        List order.
        """
        return pulumi.get(self, "list_order")

    @list_order.setter
    def list_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "list_order", value)

    @property
    @pulumi.getter(name="minVoteAverage")
    def min_vote_average(self) -> Optional[pulumi.Input[str]]:
        """
        Min vote average.
        """
        return pulumi.get(self, "min_vote_average")

    @min_vote_average.setter
    def min_vote_average(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_vote_average", value)

    @property
    @pulumi.getter(name="minVotes")
    def min_votes(self) -> Optional[pulumi.Input[str]]:
        """
        Min votes.
        """
        return pulumi.get(self, "min_votes")

    @min_votes.setter
    def min_votes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_votes", value)

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum availability.
        """
        return pulumi.get(self, "minimum_availability")

    @minimum_availability.setter
    def minimum_availability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum_availability", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Should monitor.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> Optional[pulumi.Input[int]]:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @quality_profile_id.setter
    def quality_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_profile_id", value)

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> Optional[pulumi.Input[str]]:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @root_folder_path.setter
    def root_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_folder_path", value)

    @property
    @pulumi.getter(name="searchOnAdd")
    def search_on_add(self) -> Optional[pulumi.Input[bool]]:
        """
        Search on add flag.
        """
        return pulumi.get(self, "search_on_add")

    @search_on_add.setter
    def search_on_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "search_on_add", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tmdbCertification")
    def tmdb_certification(self) -> Optional[pulumi.Input[str]]:
        """
        Certification.
        """
        return pulumi.get(self, "tmdb_certification")

    @tmdb_certification.setter
    def tmdb_certification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmdb_certification", value)

    @property
    @pulumi.getter(name="tmdbListType")
    def tmdb_list_type(self) -> Optional[pulumi.Input[int]]:
        """
        TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
        """
        return pulumi.get(self, "tmdb_list_type")

    @tmdb_list_type.setter
    def tmdb_list_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tmdb_list_type", value)


class TmdbPopular(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_auto: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_genre_ids: Optional[pulumi.Input[str]] = None,
                 include_genre_ids: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[int]] = None,
                 list_order: Optional[pulumi.Input[int]] = None,
                 min_vote_average: Optional[pulumi.Input[str]] = None,
                 min_votes: Optional[pulumi.Input[str]] = None,
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 root_folder_path: Optional[pulumi.Input[str]] = None,
                 search_on_add: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tmdb_certification: Optional[pulumi.Input[str]] = None,
                 tmdb_list_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        <!-- subcategory:Import Lists -->
        Import List TMDB Popular resource.
        For more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [TMDB Popular](https://wiki.servarr.com/radarr/supported#tmdbpopularimport).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.import_lists.TmdbPopular("example",
            enable_auto=False,
            enabled=True,
            language_code=2,
            min_vote_average="5",
            min_votes="1",
            minimum_availability="tba",
            monitor="none",
            quality_profile_id=1,
            root_folder_path="/config",
            search_on_add=False,
            tmdb_certification="PG-13",
            tmdb_list_type=2)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:ImportLists/tmdbPopular:TmdbPopular example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_auto: Enable automatic add flag.
        :param pulumi.Input[bool] enabled: Enabled flag.
        :param pulumi.Input[str] exclude_genre_ids: Exclude genre IDs.
        :param pulumi.Input[str] include_genre_ids: Include genre IDs.
        :param pulumi.Input[int] language_code: Language code.
        :param pulumi.Input[int] list_order: List order.
        :param pulumi.Input[str] min_vote_average: Min vote average.
        :param pulumi.Input[str] min_votes: Min votes.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
        :param pulumi.Input[str] monitor: Should monitor.
        :param pulumi.Input[str] name: Import List name.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] root_folder_path: Root folder path.
        :param pulumi.Input[bool] search_on_add: Search on add flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] tmdb_certification: Certification.
        :param pulumi.Input[int] tmdb_list_type: TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TmdbPopularArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Import Lists -->
        Import List TMDB Popular resource.
        For more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [TMDB Popular](https://wiki.servarr.com/radarr/supported#tmdbpopularimport).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.import_lists.TmdbPopular("example",
            enable_auto=False,
            enabled=True,
            language_code=2,
            min_vote_average="5",
            min_votes="1",
            minimum_availability="tba",
            monitor="none",
            quality_profile_id=1,
            root_folder_path="/config",
            search_on_add=False,
            tmdb_certification="PG-13",
            tmdb_list_type=2)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:ImportLists/tmdbPopular:TmdbPopular example 1
        ```

        :param str resource_name: The name of the resource.
        :param TmdbPopularArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TmdbPopularArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_auto: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_genre_ids: Optional[pulumi.Input[str]] = None,
                 include_genre_ids: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[int]] = None,
                 list_order: Optional[pulumi.Input[int]] = None,
                 min_vote_average: Optional[pulumi.Input[str]] = None,
                 min_votes: Optional[pulumi.Input[str]] = None,
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 root_folder_path: Optional[pulumi.Input[str]] = None,
                 search_on_add: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tmdb_certification: Optional[pulumi.Input[str]] = None,
                 tmdb_list_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TmdbPopularArgs.__new__(TmdbPopularArgs)

            __props__.__dict__["enable_auto"] = enable_auto
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["exclude_genre_ids"] = exclude_genre_ids
            __props__.__dict__["include_genre_ids"] = include_genre_ids
            if language_code is None and not opts.urn:
                raise TypeError("Missing required property 'language_code'")
            __props__.__dict__["language_code"] = language_code
            __props__.__dict__["list_order"] = list_order
            __props__.__dict__["min_vote_average"] = min_vote_average
            __props__.__dict__["min_votes"] = min_votes
            if minimum_availability is None and not opts.urn:
                raise TypeError("Missing required property 'minimum_availability'")
            __props__.__dict__["minimum_availability"] = minimum_availability
            if monitor is None and not opts.urn:
                raise TypeError("Missing required property 'monitor'")
            __props__.__dict__["monitor"] = monitor
            __props__.__dict__["name"] = name
            if quality_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'quality_profile_id'")
            __props__.__dict__["quality_profile_id"] = quality_profile_id
            if root_folder_path is None and not opts.urn:
                raise TypeError("Missing required property 'root_folder_path'")
            __props__.__dict__["root_folder_path"] = root_folder_path
            __props__.__dict__["search_on_add"] = search_on_add
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tmdb_certification"] = tmdb_certification
            if tmdb_list_type is None and not opts.urn:
                raise TypeError("Missing required property 'tmdb_list_type'")
            __props__.__dict__["tmdb_list_type"] = tmdb_list_type
        super(TmdbPopular, __self__).__init__(
            'radarr:ImportLists/tmdbPopular:TmdbPopular',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_auto: Optional[pulumi.Input[bool]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            exclude_genre_ids: Optional[pulumi.Input[str]] = None,
            include_genre_ids: Optional[pulumi.Input[str]] = None,
            language_code: Optional[pulumi.Input[int]] = None,
            list_order: Optional[pulumi.Input[int]] = None,
            min_vote_average: Optional[pulumi.Input[str]] = None,
            min_votes: Optional[pulumi.Input[str]] = None,
            minimum_availability: Optional[pulumi.Input[str]] = None,
            monitor: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            quality_profile_id: Optional[pulumi.Input[int]] = None,
            root_folder_path: Optional[pulumi.Input[str]] = None,
            search_on_add: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            tmdb_certification: Optional[pulumi.Input[str]] = None,
            tmdb_list_type: Optional[pulumi.Input[int]] = None) -> 'TmdbPopular':
        """
        Get an existing TmdbPopular resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_auto: Enable automatic add flag.
        :param pulumi.Input[bool] enabled: Enabled flag.
        :param pulumi.Input[str] exclude_genre_ids: Exclude genre IDs.
        :param pulumi.Input[str] include_genre_ids: Include genre IDs.
        :param pulumi.Input[int] language_code: Language code.
        :param pulumi.Input[int] list_order: List order.
        :param pulumi.Input[str] min_vote_average: Min vote average.
        :param pulumi.Input[str] min_votes: Min votes.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
        :param pulumi.Input[str] monitor: Should monitor.
        :param pulumi.Input[str] name: Import List name.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] root_folder_path: Root folder path.
        :param pulumi.Input[bool] search_on_add: Search on add flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] tmdb_certification: Certification.
        :param pulumi.Input[int] tmdb_list_type: TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TmdbPopularState.__new__(_TmdbPopularState)

        __props__.__dict__["enable_auto"] = enable_auto
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["exclude_genre_ids"] = exclude_genre_ids
        __props__.__dict__["include_genre_ids"] = include_genre_ids
        __props__.__dict__["language_code"] = language_code
        __props__.__dict__["list_order"] = list_order
        __props__.__dict__["min_vote_average"] = min_vote_average
        __props__.__dict__["min_votes"] = min_votes
        __props__.__dict__["minimum_availability"] = minimum_availability
        __props__.__dict__["monitor"] = monitor
        __props__.__dict__["name"] = name
        __props__.__dict__["quality_profile_id"] = quality_profile_id
        __props__.__dict__["root_folder_path"] = root_folder_path
        __props__.__dict__["search_on_add"] = search_on_add
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tmdb_certification"] = tmdb_certification
        __props__.__dict__["tmdb_list_type"] = tmdb_list_type
        return TmdbPopular(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableAuto")
    def enable_auto(self) -> pulumi.Output[bool]:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_auto")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeGenreIds")
    def exclude_genre_ids(self) -> pulumi.Output[str]:
        """
        Exclude genre IDs.
        """
        return pulumi.get(self, "exclude_genre_ids")

    @property
    @pulumi.getter(name="includeGenreIds")
    def include_genre_ids(self) -> pulumi.Output[str]:
        """
        Include genre IDs.
        """
        return pulumi.get(self, "include_genre_ids")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> pulumi.Output[int]:
        """
        Language code.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="listOrder")
    def list_order(self) -> pulumi.Output[int]:
        """
        List order.
        """
        return pulumi.get(self, "list_order")

    @property
    @pulumi.getter(name="minVoteAverage")
    def min_vote_average(self) -> pulumi.Output[str]:
        """
        Min vote average.
        """
        return pulumi.get(self, "min_vote_average")

    @property
    @pulumi.getter(name="minVotes")
    def min_votes(self) -> pulumi.Output[str]:
        """
        Min votes.
        """
        return pulumi.get(self, "min_votes")

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> pulumi.Output[str]:
        """
        Minimum availability.
        """
        return pulumi.get(self, "minimum_availability")

    @property
    @pulumi.getter
    def monitor(self) -> pulumi.Output[str]:
        """
        Should monitor.
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> pulumi.Output[int]:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> pulumi.Output[str]:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="searchOnAdd")
    def search_on_add(self) -> pulumi.Output[bool]:
        """
        Search on add flag.
        """
        return pulumi.get(self, "search_on_add")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tmdbCertification")
    def tmdb_certification(self) -> pulumi.Output[str]:
        """
        Certification.
        """
        return pulumi.get(self, "tmdb_certification")

    @property
    @pulumi.getter(name="tmdbListType")
    def tmdb_list_type(self) -> pulumi.Output[int]:
        """
        TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
        """
        return pulumi.get(self, "tmdb_list_type")

