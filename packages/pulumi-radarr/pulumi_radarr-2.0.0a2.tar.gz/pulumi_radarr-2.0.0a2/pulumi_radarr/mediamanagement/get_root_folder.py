# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRootFolderResult',
    'AwaitableGetRootFolderResult',
    'get_root_folder',
    'get_root_folder_output',
]

@pulumi.output_type
class GetRootFolderResult:
    """
    A collection of values returned by getRootFolder.
    """
    def __init__(__self__, accessible=None, id=None, path=None, unmapped_folders=None):
        if accessible and not isinstance(accessible, bool):
            raise TypeError("Expected argument 'accessible' to be a bool")
        pulumi.set(__self__, "accessible", accessible)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if unmapped_folders and not isinstance(unmapped_folders, list):
            raise TypeError("Expected argument 'unmapped_folders' to be a list")
        pulumi.set(__self__, "unmapped_folders", unmapped_folders)

    @property
    @pulumi.getter
    def accessible(self) -> bool:
        """
        Access flag.
        """
        return pulumi.get(self, "accessible")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Root Folder ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Root Folder absolute path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="unmappedFolders")
    def unmapped_folders(self) -> Sequence['outputs.GetRootFolderUnmappedFolderResult']:
        """
        List of folders with no associated series.
        """
        return pulumi.get(self, "unmapped_folders")


class AwaitableGetRootFolderResult(GetRootFolderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRootFolderResult(
            accessible=self.accessible,
            id=self.id,
            path=self.path,
            unmapped_folders=self.unmapped_folders)


def get_root_folder(path: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRootFolderResult:
    """
    <!-- subcategory:Media Management -->
    Single Root Folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_radarr as radarr

    example = radarr.MediaManagement.get_root_folder(path="/example")
    ```


    :param str path: Path of unmapped folder.
    """
    __args__ = dict()
    __args__['path'] = path
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('radarr:MediaManagement/getRootFolder:getRootFolder', __args__, opts=opts, typ=GetRootFolderResult).value

    return AwaitableGetRootFolderResult(
        accessible=pulumi.get(__ret__, 'accessible'),
        id=pulumi.get(__ret__, 'id'),
        path=pulumi.get(__ret__, 'path'),
        unmapped_folders=pulumi.get(__ret__, 'unmapped_folders'))


@_utilities.lift_output_func(get_root_folder)
def get_root_folder_output(path: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRootFolderResult]:
    """
    <!-- subcategory:Media Management -->
    Single Root Folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_radarr as radarr

    example = radarr.MediaManagement.get_root_folder(path="/example")
    ```


    :param str path: Path of unmapped folder.
    """
    ...
