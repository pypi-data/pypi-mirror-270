# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetNamingResult',
    'AwaitableGetNamingResult',
    'get_naming',
    'get_naming_output',
]

@pulumi.output_type
class GetNamingResult:
    """
    A collection of values returned by getNaming.
    """
    def __init__(__self__, colon_replacement_format=None, id=None, movie_folder_format=None, rename_movies=None, replace_illegal_characters=None, standard_movie_format=None):
        if colon_replacement_format and not isinstance(colon_replacement_format, str):
            raise TypeError("Expected argument 'colon_replacement_format' to be a str")
        pulumi.set(__self__, "colon_replacement_format", colon_replacement_format)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if movie_folder_format and not isinstance(movie_folder_format, str):
            raise TypeError("Expected argument 'movie_folder_format' to be a str")
        pulumi.set(__self__, "movie_folder_format", movie_folder_format)
        if rename_movies and not isinstance(rename_movies, bool):
            raise TypeError("Expected argument 'rename_movies' to be a bool")
        pulumi.set(__self__, "rename_movies", rename_movies)
        if replace_illegal_characters and not isinstance(replace_illegal_characters, bool):
            raise TypeError("Expected argument 'replace_illegal_characters' to be a bool")
        pulumi.set(__self__, "replace_illegal_characters", replace_illegal_characters)
        if standard_movie_format and not isinstance(standard_movie_format, str):
            raise TypeError("Expected argument 'standard_movie_format' to be a str")
        pulumi.set(__self__, "standard_movie_format", standard_movie_format)

    @property
    @pulumi.getter(name="colonReplacementFormat")
    def colon_replacement_format(self) -> str:
        """
        Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.
        """
        return pulumi.get(self, "colon_replacement_format")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Delay Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="movieFolderFormat")
    def movie_folder_format(self) -> str:
        """
        Movie folder format.
        """
        return pulumi.get(self, "movie_folder_format")

    @property
    @pulumi.getter(name="renameMovies")
    def rename_movies(self) -> bool:
        """
        Radarr will use the existing file name if false.
        """
        return pulumi.get(self, "rename_movies")

    @property
    @pulumi.getter(name="replaceIllegalCharacters")
    def replace_illegal_characters(self) -> bool:
        """
        Replace illegal characters. They will be removed if false.
        """
        return pulumi.get(self, "replace_illegal_characters")

    @property
    @pulumi.getter(name="standardMovieFormat")
    def standard_movie_format(self) -> str:
        """
        Standard movie formatss.
        """
        return pulumi.get(self, "standard_movie_format")


class AwaitableGetNamingResult(GetNamingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamingResult(
            colon_replacement_format=self.colon_replacement_format,
            id=self.id,
            movie_folder_format=self.movie_folder_format,
            rename_movies=self.rename_movies,
            replace_illegal_characters=self.replace_illegal_characters,
            standard_movie_format=self.standard_movie_format)


def get_naming(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamingResult:
    """
    <!-- subcategory:Media Management -->
    Naming.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_radarr as radarr

    example = radarr.MediaManagement.get_naming()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('radarr:MediaManagement/getNaming:getNaming', __args__, opts=opts, typ=GetNamingResult).value

    return AwaitableGetNamingResult(
        colon_replacement_format=pulumi.get(__ret__, 'colon_replacement_format'),
        id=pulumi.get(__ret__, 'id'),
        movie_folder_format=pulumi.get(__ret__, 'movie_folder_format'),
        rename_movies=pulumi.get(__ret__, 'rename_movies'),
        replace_illegal_characters=pulumi.get(__ret__, 'replace_illegal_characters'),
        standard_movie_format=pulumi.get(__ret__, 'standard_movie_format'))


@_utilities.lift_output_func(get_naming)
def get_naming_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNamingResult]:
    """
    <!-- subcategory:Media Management -->
    Naming.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_radarr as radarr

    example = radarr.MediaManagement.get_naming()
    ```
    """
    ...
