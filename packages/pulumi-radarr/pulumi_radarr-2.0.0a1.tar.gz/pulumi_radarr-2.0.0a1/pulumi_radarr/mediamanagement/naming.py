# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NamingArgs', 'Naming']

@pulumi.input_type
class NamingArgs:
    def __init__(__self__, *,
                 colon_replacement_format: pulumi.Input[str],
                 movie_folder_format: pulumi.Input[str],
                 rename_movies: pulumi.Input[bool],
                 replace_illegal_characters: pulumi.Input[bool],
                 standard_movie_format: pulumi.Input[str]):
        """
        The set of arguments for constructing a Naming resource.
        :param pulumi.Input[str] colon_replacement_format: Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.
        :param pulumi.Input[str] movie_folder_format: Movie folder format.
        :param pulumi.Input[bool] rename_movies: Radarr will use the existing file name if false.
        :param pulumi.Input[bool] replace_illegal_characters: Replace illegal characters. They will be removed if false.
        :param pulumi.Input[str] standard_movie_format: Standard movie formatss.
        """
        pulumi.set(__self__, "colon_replacement_format", colon_replacement_format)
        pulumi.set(__self__, "movie_folder_format", movie_folder_format)
        pulumi.set(__self__, "rename_movies", rename_movies)
        pulumi.set(__self__, "replace_illegal_characters", replace_illegal_characters)
        pulumi.set(__self__, "standard_movie_format", standard_movie_format)

    @property
    @pulumi.getter(name="colonReplacementFormat")
    def colon_replacement_format(self) -> pulumi.Input[str]:
        """
        Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.
        """
        return pulumi.get(self, "colon_replacement_format")

    @colon_replacement_format.setter
    def colon_replacement_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "colon_replacement_format", value)

    @property
    @pulumi.getter(name="movieFolderFormat")
    def movie_folder_format(self) -> pulumi.Input[str]:
        """
        Movie folder format.
        """
        return pulumi.get(self, "movie_folder_format")

    @movie_folder_format.setter
    def movie_folder_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "movie_folder_format", value)

    @property
    @pulumi.getter(name="renameMovies")
    def rename_movies(self) -> pulumi.Input[bool]:
        """
        Radarr will use the existing file name if false.
        """
        return pulumi.get(self, "rename_movies")

    @rename_movies.setter
    def rename_movies(self, value: pulumi.Input[bool]):
        pulumi.set(self, "rename_movies", value)

    @property
    @pulumi.getter(name="replaceIllegalCharacters")
    def replace_illegal_characters(self) -> pulumi.Input[bool]:
        """
        Replace illegal characters. They will be removed if false.
        """
        return pulumi.get(self, "replace_illegal_characters")

    @replace_illegal_characters.setter
    def replace_illegal_characters(self, value: pulumi.Input[bool]):
        pulumi.set(self, "replace_illegal_characters", value)

    @property
    @pulumi.getter(name="standardMovieFormat")
    def standard_movie_format(self) -> pulumi.Input[str]:
        """
        Standard movie formatss.
        """
        return pulumi.get(self, "standard_movie_format")

    @standard_movie_format.setter
    def standard_movie_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "standard_movie_format", value)


@pulumi.input_type
class _NamingState:
    def __init__(__self__, *,
                 colon_replacement_format: Optional[pulumi.Input[str]] = None,
                 movie_folder_format: Optional[pulumi.Input[str]] = None,
                 rename_movies: Optional[pulumi.Input[bool]] = None,
                 replace_illegal_characters: Optional[pulumi.Input[bool]] = None,
                 standard_movie_format: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Naming resources.
        :param pulumi.Input[str] colon_replacement_format: Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.
        :param pulumi.Input[str] movie_folder_format: Movie folder format.
        :param pulumi.Input[bool] rename_movies: Radarr will use the existing file name if false.
        :param pulumi.Input[bool] replace_illegal_characters: Replace illegal characters. They will be removed if false.
        :param pulumi.Input[str] standard_movie_format: Standard movie formatss.
        """
        if colon_replacement_format is not None:
            pulumi.set(__self__, "colon_replacement_format", colon_replacement_format)
        if movie_folder_format is not None:
            pulumi.set(__self__, "movie_folder_format", movie_folder_format)
        if rename_movies is not None:
            pulumi.set(__self__, "rename_movies", rename_movies)
        if replace_illegal_characters is not None:
            pulumi.set(__self__, "replace_illegal_characters", replace_illegal_characters)
        if standard_movie_format is not None:
            pulumi.set(__self__, "standard_movie_format", standard_movie_format)

    @property
    @pulumi.getter(name="colonReplacementFormat")
    def colon_replacement_format(self) -> Optional[pulumi.Input[str]]:
        """
        Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.
        """
        return pulumi.get(self, "colon_replacement_format")

    @colon_replacement_format.setter
    def colon_replacement_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "colon_replacement_format", value)

    @property
    @pulumi.getter(name="movieFolderFormat")
    def movie_folder_format(self) -> Optional[pulumi.Input[str]]:
        """
        Movie folder format.
        """
        return pulumi.get(self, "movie_folder_format")

    @movie_folder_format.setter
    def movie_folder_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "movie_folder_format", value)

    @property
    @pulumi.getter(name="renameMovies")
    def rename_movies(self) -> Optional[pulumi.Input[bool]]:
        """
        Radarr will use the existing file name if false.
        """
        return pulumi.get(self, "rename_movies")

    @rename_movies.setter
    def rename_movies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rename_movies", value)

    @property
    @pulumi.getter(name="replaceIllegalCharacters")
    def replace_illegal_characters(self) -> Optional[pulumi.Input[bool]]:
        """
        Replace illegal characters. They will be removed if false.
        """
        return pulumi.get(self, "replace_illegal_characters")

    @replace_illegal_characters.setter
    def replace_illegal_characters(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace_illegal_characters", value)

    @property
    @pulumi.getter(name="standardMovieFormat")
    def standard_movie_format(self) -> Optional[pulumi.Input[str]]:
        """
        Standard movie formatss.
        """
        return pulumi.get(self, "standard_movie_format")

    @standard_movie_format.setter
    def standard_movie_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standard_movie_format", value)


class Naming(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 colon_replacement_format: Optional[pulumi.Input[str]] = None,
                 movie_folder_format: Optional[pulumi.Input[str]] = None,
                 rename_movies: Optional[pulumi.Input[bool]] = None,
                 replace_illegal_characters: Optional[pulumi.Input[bool]] = None,
                 standard_movie_format: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        <!-- subcategory:Media Management -->
        Naming resource.
        For more information refer to [Naming](https://wiki.servarr.com/radarr/settings#community-naming-suggestions) documentation.

        ## Import

        import does not need parameters

        ```sh
         $ pulumi import radarr:MediaManagement/naming:Naming example ""
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] colon_replacement_format: Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.
        :param pulumi.Input[str] movie_folder_format: Movie folder format.
        :param pulumi.Input[bool] rename_movies: Radarr will use the existing file name if false.
        :param pulumi.Input[bool] replace_illegal_characters: Replace illegal characters. They will be removed if false.
        :param pulumi.Input[str] standard_movie_format: Standard movie formatss.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Media Management -->
        Naming resource.
        For more information refer to [Naming](https://wiki.servarr.com/radarr/settings#community-naming-suggestions) documentation.

        ## Import

        import does not need parameters

        ```sh
         $ pulumi import radarr:MediaManagement/naming:Naming example ""
        ```

        :param str resource_name: The name of the resource.
        :param NamingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 colon_replacement_format: Optional[pulumi.Input[str]] = None,
                 movie_folder_format: Optional[pulumi.Input[str]] = None,
                 rename_movies: Optional[pulumi.Input[bool]] = None,
                 replace_illegal_characters: Optional[pulumi.Input[bool]] = None,
                 standard_movie_format: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamingArgs.__new__(NamingArgs)

            if colon_replacement_format is None and not opts.urn:
                raise TypeError("Missing required property 'colon_replacement_format'")
            __props__.__dict__["colon_replacement_format"] = colon_replacement_format
            if movie_folder_format is None and not opts.urn:
                raise TypeError("Missing required property 'movie_folder_format'")
            __props__.__dict__["movie_folder_format"] = movie_folder_format
            if rename_movies is None and not opts.urn:
                raise TypeError("Missing required property 'rename_movies'")
            __props__.__dict__["rename_movies"] = rename_movies
            if replace_illegal_characters is None and not opts.urn:
                raise TypeError("Missing required property 'replace_illegal_characters'")
            __props__.__dict__["replace_illegal_characters"] = replace_illegal_characters
            if standard_movie_format is None and not opts.urn:
                raise TypeError("Missing required property 'standard_movie_format'")
            __props__.__dict__["standard_movie_format"] = standard_movie_format
        super(Naming, __self__).__init__(
            'radarr:MediaManagement/naming:Naming',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            colon_replacement_format: Optional[pulumi.Input[str]] = None,
            movie_folder_format: Optional[pulumi.Input[str]] = None,
            rename_movies: Optional[pulumi.Input[bool]] = None,
            replace_illegal_characters: Optional[pulumi.Input[bool]] = None,
            standard_movie_format: Optional[pulumi.Input[str]] = None) -> 'Naming':
        """
        Get an existing Naming resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] colon_replacement_format: Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.
        :param pulumi.Input[str] movie_folder_format: Movie folder format.
        :param pulumi.Input[bool] rename_movies: Radarr will use the existing file name if false.
        :param pulumi.Input[bool] replace_illegal_characters: Replace illegal characters. They will be removed if false.
        :param pulumi.Input[str] standard_movie_format: Standard movie formatss.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamingState.__new__(_NamingState)

        __props__.__dict__["colon_replacement_format"] = colon_replacement_format
        __props__.__dict__["movie_folder_format"] = movie_folder_format
        __props__.__dict__["rename_movies"] = rename_movies
        __props__.__dict__["replace_illegal_characters"] = replace_illegal_characters
        __props__.__dict__["standard_movie_format"] = standard_movie_format
        return Naming(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="colonReplacementFormat")
    def colon_replacement_format(self) -> pulumi.Output[str]:
        """
        Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.
        """
        return pulumi.get(self, "colon_replacement_format")

    @property
    @pulumi.getter(name="movieFolderFormat")
    def movie_folder_format(self) -> pulumi.Output[str]:
        """
        Movie folder format.
        """
        return pulumi.get(self, "movie_folder_format")

    @property
    @pulumi.getter(name="renameMovies")
    def rename_movies(self) -> pulumi.Output[bool]:
        """
        Radarr will use the existing file name if false.
        """
        return pulumi.get(self, "rename_movies")

    @property
    @pulumi.getter(name="replaceIllegalCharacters")
    def replace_illegal_characters(self) -> pulumi.Output[bool]:
        """
        Replace illegal characters. They will be removed if false.
        """
        return pulumi.get(self, "replace_illegal_characters")

    @property
    @pulumi.getter(name="standardMovieFormat")
    def standard_movie_format(self) -> pulumi.Output[str]:
        """
        Standard movie formatss.
        """
        return pulumi.get(self, "standard_movie_format")

