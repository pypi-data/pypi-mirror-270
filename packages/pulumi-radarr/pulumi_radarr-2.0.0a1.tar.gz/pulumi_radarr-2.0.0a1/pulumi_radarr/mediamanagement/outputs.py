# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RootFolderUnmappedFolder',
    'GetRootFolderUnmappedFolderResult',
    'GetRootFoldersRootFolderResult',
    'GetRootFoldersRootFolderUnmappedFolderResult',
]

@pulumi.output_type
class RootFolderUnmappedFolder(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        :param str name: Name of unmapped folder.
        :param str path: Path of unmapped folder.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of unmapped folder.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path of unmapped folder.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetRootFolderUnmappedFolderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of unmapped folder.
        :param str path: Path of unmapped folder.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of unmapped folder.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path of unmapped folder.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetRootFoldersRootFolderResult(dict):
    def __init__(__self__, *,
                 accessible: bool,
                 id: int,
                 path: str,
                 unmapped_folders: Sequence['outputs.GetRootFoldersRootFolderUnmappedFolderResult']):
        """
        :param bool accessible: Access flag.
        :param int id: Root Folder ID.
        :param str path: Root Folder absolute path.
        :param Sequence['GetRootFoldersRootFolderUnmappedFolderArgs'] unmapped_folders: List of folders with no associated series.
        """
        pulumi.set(__self__, "accessible", accessible)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "unmapped_folders", unmapped_folders)

    @property
    @pulumi.getter
    def accessible(self) -> bool:
        """
        Access flag.
        """
        return pulumi.get(self, "accessible")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Root Folder ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Root Folder absolute path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="unmappedFolders")
    def unmapped_folders(self) -> Sequence['outputs.GetRootFoldersRootFolderUnmappedFolderResult']:
        """
        List of folders with no associated series.
        """
        return pulumi.get(self, "unmapped_folders")


@pulumi.output_type
class GetRootFoldersRootFolderUnmappedFolderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of unmapped folder.
        :param str path: Root Folder absolute path.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of unmapped folder.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Root Folder absolute path.
        """
        return pulumi.get(self, "path")


