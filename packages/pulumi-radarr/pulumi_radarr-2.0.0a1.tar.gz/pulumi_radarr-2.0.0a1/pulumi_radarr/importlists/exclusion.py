# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ExclusionArgs', 'Exclusion']

@pulumi.input_type
class ExclusionArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 tmdb_id: pulumi.Input[int],
                 year: pulumi.Input[int]):
        """
        The set of arguments for constructing a Exclusion resource.
        :param pulumi.Input[str] title: Movie to be excluded.
        :param pulumi.Input[int] tmdb_id: Movie TMDB ID.
        :param pulumi.Input[int] year: Year.
        """
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "tmdb_id", tmdb_id)
        pulumi.set(__self__, "year", year)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Movie to be excluded.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="tmdbId")
    def tmdb_id(self) -> pulumi.Input[int]:
        """
        Movie TMDB ID.
        """
        return pulumi.get(self, "tmdb_id")

    @tmdb_id.setter
    def tmdb_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "tmdb_id", value)

    @property
    @pulumi.getter
    def year(self) -> pulumi.Input[int]:
        """
        Year.
        """
        return pulumi.get(self, "year")

    @year.setter
    def year(self, value: pulumi.Input[int]):
        pulumi.set(self, "year", value)


@pulumi.input_type
class _ExclusionState:
    def __init__(__self__, *,
                 title: Optional[pulumi.Input[str]] = None,
                 tmdb_id: Optional[pulumi.Input[int]] = None,
                 year: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Exclusion resources.
        :param pulumi.Input[str] title: Movie to be excluded.
        :param pulumi.Input[int] tmdb_id: Movie TMDB ID.
        :param pulumi.Input[int] year: Year.
        """
        if title is not None:
            pulumi.set(__self__, "title", title)
        if tmdb_id is not None:
            pulumi.set(__self__, "tmdb_id", tmdb_id)
        if year is not None:
            pulumi.set(__self__, "year", year)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Movie to be excluded.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="tmdbId")
    def tmdb_id(self) -> Optional[pulumi.Input[int]]:
        """
        Movie TMDB ID.
        """
        return pulumi.get(self, "tmdb_id")

    @tmdb_id.setter
    def tmdb_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tmdb_id", value)

    @property
    @pulumi.getter
    def year(self) -> Optional[pulumi.Input[int]]:
        """
        Year.
        """
        return pulumi.get(self, "year")

    @year.setter
    def year(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "year", value)


class Exclusion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 tmdb_id: Optional[pulumi.Input[int]] = None,
                 year: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        <!-- subcategory:Import Lists -->
        Import List Exclusion resource.
        For more information refer to [ImportListExclusions](https://wiki.servarr.com/radarr/settings#list-exclusions) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.import_lists.Exclusion("example",
            title="Gladiator",
            tmdb_id=172495,
            year=2000)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:ImportLists/exclusion:Exclusion example 10
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] title: Movie to be excluded.
        :param pulumi.Input[int] tmdb_id: Movie TMDB ID.
        :param pulumi.Input[int] year: Year.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExclusionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Import Lists -->
        Import List Exclusion resource.
        For more information refer to [ImportListExclusions](https://wiki.servarr.com/radarr/settings#list-exclusions) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.import_lists.Exclusion("example",
            title="Gladiator",
            tmdb_id=172495,
            year=2000)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:ImportLists/exclusion:Exclusion example 10
        ```

        :param str resource_name: The name of the resource.
        :param ExclusionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExclusionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 tmdb_id: Optional[pulumi.Input[int]] = None,
                 year: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExclusionArgs.__new__(ExclusionArgs)

            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            if tmdb_id is None and not opts.urn:
                raise TypeError("Missing required property 'tmdb_id'")
            __props__.__dict__["tmdb_id"] = tmdb_id
            if year is None and not opts.urn:
                raise TypeError("Missing required property 'year'")
            __props__.__dict__["year"] = year
        super(Exclusion, __self__).__init__(
            'radarr:ImportLists/exclusion:Exclusion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            title: Optional[pulumi.Input[str]] = None,
            tmdb_id: Optional[pulumi.Input[int]] = None,
            year: Optional[pulumi.Input[int]] = None) -> 'Exclusion':
        """
        Get an existing Exclusion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] title: Movie to be excluded.
        :param pulumi.Input[int] tmdb_id: Movie TMDB ID.
        :param pulumi.Input[int] year: Year.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExclusionState.__new__(_ExclusionState)

        __props__.__dict__["title"] = title
        __props__.__dict__["tmdb_id"] = tmdb_id
        __props__.__dict__["year"] = year
        return Exclusion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        Movie to be excluded.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="tmdbId")
    def tmdb_id(self) -> pulumi.Output[int]:
        """
        Movie TMDB ID.
        """
        return pulumi.get(self, "tmdb_id")

    @property
    @pulumi.getter
    def year(self) -> pulumi.Output[int]:
        """
        Year.
        """
        return pulumi.get(self, "year")

