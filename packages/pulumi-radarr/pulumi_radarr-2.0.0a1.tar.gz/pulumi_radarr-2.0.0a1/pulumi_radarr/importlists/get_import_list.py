# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetImportListResult',
    'AwaitableGetImportListResult',
    'get_import_list',
    'get_import_list_output',
]

@pulumi.output_type
class GetImportListResult:
    """
    A collection of values returned by getImportList.
    """
    def __init__(__self__, access_token=None, account_id=None, api_key=None, auth_user=None, base_url=None, cast=None, cast_director=None, cast_producer=None, cast_sound=None, cast_writing=None, certification=None, company_id=None, config_contract=None, enable_auto=None, enabled=None, exclude_genre_ids=None, expires=None, genres=None, id=None, implementation=None, include_genre_ids=None, keyword_id=None, language_code=None, limit=None, link=None, list_id=None, list_order=None, list_type=None, listname=None, min_score=None, min_vote_average=None, min_votes=None, minimum_availability=None, monitor=None, name=None, only_active=None, person_id=None, port=None, profile_ids=None, quality_profile_id=None, rating=None, refresh_token=None, root_folder_path=None, search_on_add=None, source=None, tag_ids=None, tags=None, tmdb_certification=None, tmdb_list_type=None, trakt_additional_parameters=None, trakt_list_type=None, url=None, url_base=None, user_list_type=None, username=None, years=None):
        if access_token and not isinstance(access_token, str):
            raise TypeError("Expected argument 'access_token' to be a str")
        pulumi.set(__self__, "access_token", access_token)
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if api_key and not isinstance(api_key, str):
            raise TypeError("Expected argument 'api_key' to be a str")
        pulumi.set(__self__, "api_key", api_key)
        if auth_user and not isinstance(auth_user, str):
            raise TypeError("Expected argument 'auth_user' to be a str")
        pulumi.set(__self__, "auth_user", auth_user)
        if base_url and not isinstance(base_url, str):
            raise TypeError("Expected argument 'base_url' to be a str")
        pulumi.set(__self__, "base_url", base_url)
        if cast and not isinstance(cast, bool):
            raise TypeError("Expected argument 'cast' to be a bool")
        pulumi.set(__self__, "cast", cast)
        if cast_director and not isinstance(cast_director, bool):
            raise TypeError("Expected argument 'cast_director' to be a bool")
        pulumi.set(__self__, "cast_director", cast_director)
        if cast_producer and not isinstance(cast_producer, bool):
            raise TypeError("Expected argument 'cast_producer' to be a bool")
        pulumi.set(__self__, "cast_producer", cast_producer)
        if cast_sound and not isinstance(cast_sound, bool):
            raise TypeError("Expected argument 'cast_sound' to be a bool")
        pulumi.set(__self__, "cast_sound", cast_sound)
        if cast_writing and not isinstance(cast_writing, bool):
            raise TypeError("Expected argument 'cast_writing' to be a bool")
        pulumi.set(__self__, "cast_writing", cast_writing)
        if certification and not isinstance(certification, str):
            raise TypeError("Expected argument 'certification' to be a str")
        pulumi.set(__self__, "certification", certification)
        if company_id and not isinstance(company_id, str):
            raise TypeError("Expected argument 'company_id' to be a str")
        pulumi.set(__self__, "company_id", company_id)
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if enable_auto and not isinstance(enable_auto, bool):
            raise TypeError("Expected argument 'enable_auto' to be a bool")
        pulumi.set(__self__, "enable_auto", enable_auto)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if exclude_genre_ids and not isinstance(exclude_genre_ids, str):
            raise TypeError("Expected argument 'exclude_genre_ids' to be a str")
        pulumi.set(__self__, "exclude_genre_ids", exclude_genre_ids)
        if expires and not isinstance(expires, str):
            raise TypeError("Expected argument 'expires' to be a str")
        pulumi.set(__self__, "expires", expires)
        if genres and not isinstance(genres, str):
            raise TypeError("Expected argument 'genres' to be a str")
        pulumi.set(__self__, "genres", genres)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if include_genre_ids and not isinstance(include_genre_ids, str):
            raise TypeError("Expected argument 'include_genre_ids' to be a str")
        pulumi.set(__self__, "include_genre_ids", include_genre_ids)
        if keyword_id and not isinstance(keyword_id, str):
            raise TypeError("Expected argument 'keyword_id' to be a str")
        pulumi.set(__self__, "keyword_id", keyword_id)
        if language_code and not isinstance(language_code, int):
            raise TypeError("Expected argument 'language_code' to be a int")
        pulumi.set(__self__, "language_code", language_code)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if link and not isinstance(link, str):
            raise TypeError("Expected argument 'link' to be a str")
        pulumi.set(__self__, "link", link)
        if list_id and not isinstance(list_id, str):
            raise TypeError("Expected argument 'list_id' to be a str")
        pulumi.set(__self__, "list_id", list_id)
        if list_order and not isinstance(list_order, int):
            raise TypeError("Expected argument 'list_order' to be a int")
        pulumi.set(__self__, "list_order", list_order)
        if list_type and not isinstance(list_type, str):
            raise TypeError("Expected argument 'list_type' to be a str")
        pulumi.set(__self__, "list_type", list_type)
        if listname and not isinstance(listname, str):
            raise TypeError("Expected argument 'listname' to be a str")
        pulumi.set(__self__, "listname", listname)
        if min_score and not isinstance(min_score, int):
            raise TypeError("Expected argument 'min_score' to be a int")
        pulumi.set(__self__, "min_score", min_score)
        if min_vote_average and not isinstance(min_vote_average, str):
            raise TypeError("Expected argument 'min_vote_average' to be a str")
        pulumi.set(__self__, "min_vote_average", min_vote_average)
        if min_votes and not isinstance(min_votes, str):
            raise TypeError("Expected argument 'min_votes' to be a str")
        pulumi.set(__self__, "min_votes", min_votes)
        if minimum_availability and not isinstance(minimum_availability, str):
            raise TypeError("Expected argument 'minimum_availability' to be a str")
        pulumi.set(__self__, "minimum_availability", minimum_availability)
        if monitor and not isinstance(monitor, str):
            raise TypeError("Expected argument 'monitor' to be a str")
        pulumi.set(__self__, "monitor", monitor)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if only_active and not isinstance(only_active, bool):
            raise TypeError("Expected argument 'only_active' to be a bool")
        pulumi.set(__self__, "only_active", only_active)
        if person_id and not isinstance(person_id, str):
            raise TypeError("Expected argument 'person_id' to be a str")
        pulumi.set(__self__, "person_id", person_id)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if profile_ids and not isinstance(profile_ids, list):
            raise TypeError("Expected argument 'profile_ids' to be a list")
        pulumi.set(__self__, "profile_ids", profile_ids)
        if quality_profile_id and not isinstance(quality_profile_id, int):
            raise TypeError("Expected argument 'quality_profile_id' to be a int")
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if rating and not isinstance(rating, str):
            raise TypeError("Expected argument 'rating' to be a str")
        pulumi.set(__self__, "rating", rating)
        if refresh_token and not isinstance(refresh_token, str):
            raise TypeError("Expected argument 'refresh_token' to be a str")
        pulumi.set(__self__, "refresh_token", refresh_token)
        if root_folder_path and not isinstance(root_folder_path, str):
            raise TypeError("Expected argument 'root_folder_path' to be a str")
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        if search_on_add and not isinstance(search_on_add, bool):
            raise TypeError("Expected argument 'search_on_add' to be a bool")
        pulumi.set(__self__, "search_on_add", search_on_add)
        if source and not isinstance(source, int):
            raise TypeError("Expected argument 'source' to be a int")
        pulumi.set(__self__, "source", source)
        if tag_ids and not isinstance(tag_ids, list):
            raise TypeError("Expected argument 'tag_ids' to be a list")
        pulumi.set(__self__, "tag_ids", tag_ids)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tmdb_certification and not isinstance(tmdb_certification, str):
            raise TypeError("Expected argument 'tmdb_certification' to be a str")
        pulumi.set(__self__, "tmdb_certification", tmdb_certification)
        if tmdb_list_type and not isinstance(tmdb_list_type, int):
            raise TypeError("Expected argument 'tmdb_list_type' to be a int")
        pulumi.set(__self__, "tmdb_list_type", tmdb_list_type)
        if trakt_additional_parameters and not isinstance(trakt_additional_parameters, str):
            raise TypeError("Expected argument 'trakt_additional_parameters' to be a str")
        pulumi.set(__self__, "trakt_additional_parameters", trakt_additional_parameters)
        if trakt_list_type and not isinstance(trakt_list_type, int):
            raise TypeError("Expected argument 'trakt_list_type' to be a int")
        pulumi.set(__self__, "trakt_list_type", trakt_list_type)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if url_base and not isinstance(url_base, str):
            raise TypeError("Expected argument 'url_base' to be a str")
        pulumi.set(__self__, "url_base", url_base)
        if user_list_type and not isinstance(user_list_type, int):
            raise TypeError("Expected argument 'user_list_type' to be a int")
        pulumi.set(__self__, "user_list_type", user_list_type)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if years and not isinstance(years, str):
            raise TypeError("Expected argument 'years' to be a str")
        pulumi.set(__self__, "years", years)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        Account ID.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> str:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter
    def cast(self) -> bool:
        """
        Include cast.
        """
        return pulumi.get(self, "cast")

    @property
    @pulumi.getter(name="castDirector")
    def cast_director(self) -> bool:
        """
        Include cast director.
        """
        return pulumi.get(self, "cast_director")

    @property
    @pulumi.getter(name="castProducer")
    def cast_producer(self) -> bool:
        """
        Include cast producer.
        """
        return pulumi.get(self, "cast_producer")

    @property
    @pulumi.getter(name="castSound")
    def cast_sound(self) -> bool:
        """
        Include cast sound.
        """
        return pulumi.get(self, "cast_sound")

    @property
    @pulumi.getter(name="castWriting")
    def cast_writing(self) -> bool:
        """
        Include cast writing.
        """
        return pulumi.get(self, "cast_writing")

    @property
    @pulumi.getter
    def certification(self) -> str:
        """
        Certification.
        """
        return pulumi.get(self, "certification")

    @property
    @pulumi.getter(name="companyId")
    def company_id(self) -> str:
        """
        Company ID.
        """
        return pulumi.get(self, "company_id")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        ImportList configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="enableAuto")
    def enable_auto(self) -> bool:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_auto")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeGenreIds")
    def exclude_genre_ids(self) -> str:
        """
        Exclude genre IDs.
        """
        return pulumi.get(self, "exclude_genre_ids")

    @property
    @pulumi.getter
    def expires(self) -> str:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def genres(self) -> str:
        """
        Genres.
        """
        return pulumi.get(self, "genres")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Import List ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        ImportList implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="includeGenreIds")
    def include_genre_ids(self) -> str:
        """
        Include genre IDs.
        """
        return pulumi.get(self, "include_genre_ids")

    @property
    @pulumi.getter(name="keywordId")
    def keyword_id(self) -> str:
        """
        Keyword ID.
        """
        return pulumi.get(self, "keyword_id")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> int:
        """
        Language code.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        limit.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def link(self) -> str:
        """
        Link.
        """
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> str:
        """
        List ID.
        """
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="listOrder")
    def list_order(self) -> int:
        """
        List order.
        """
        return pulumi.get(self, "list_order")

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> str:
        """
        List type.
        """
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter
    def listname(self) -> str:
        """
        List name.
        """
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter(name="minScore")
    def min_score(self) -> int:
        """
        Min score.
        """
        return pulumi.get(self, "min_score")

    @property
    @pulumi.getter(name="minVoteAverage")
    def min_vote_average(self) -> str:
        """
        Min vote average.
        """
        return pulumi.get(self, "min_vote_average")

    @property
    @pulumi.getter(name="minVotes")
    def min_votes(self) -> str:
        """
        Min votes.
        """
        return pulumi.get(self, "min_votes")

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> str:
        """
        Minimum availability.
        """
        return pulumi.get(self, "minimum_availability")

    @property
    @pulumi.getter
    def monitor(self) -> str:
        """
        Should monitor.
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onlyActive")
    def only_active(self) -> bool:
        """
        Only active.
        """
        return pulumi.get(self, "only_active")

    @property
    @pulumi.getter(name="personId")
    def person_id(self) -> str:
        """
        Person ID.
        """
        return pulumi.get(self, "person_id")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="profileIds")
    def profile_ids(self) -> Sequence[int]:
        """
        Profile IDs.
        """
        return pulumi.get(self, "profile_ids")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter
    def rating(self) -> str:
        """
        Rating.
        """
        return pulumi.get(self, "rating")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="searchOnAdd")
    def search_on_add(self) -> bool:
        """
        Search on add flag.
        """
        return pulumi.get(self, "search_on_add")

    @property
    @pulumi.getter
    def source(self) -> int:
        """
        Source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[int]:
        """
        Tag IDs.
        """
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tmdbCertification")
    def tmdb_certification(self) -> str:
        """
        Certification.
        """
        return pulumi.get(self, "tmdb_certification")

    @property
    @pulumi.getter(name="tmdbListType")
    def tmdb_list_type(self) -> int:
        """
        TMDB list type.
        """
        return pulumi.get(self, "tmdb_list_type")

    @property
    @pulumi.getter(name="traktAdditionalParameters")
    def trakt_additional_parameters(self) -> str:
        """
        Trakt additional parameters.
        """
        return pulumi.get(self, "trakt_additional_parameters")

    @property
    @pulumi.getter(name="traktListType")
    def trakt_list_type(self) -> int:
        """
        Trakt list type.
        """
        return pulumi.get(self, "trakt_list_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "url_base")

    @property
    @pulumi.getter(name="userListType")
    def user_list_type(self) -> int:
        """
        User list type.
        """
        return pulumi.get(self, "user_list_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def years(self) -> str:
        """
        Years.
        """
        return pulumi.get(self, "years")


class AwaitableGetImportListResult(GetImportListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImportListResult(
            access_token=self.access_token,
            account_id=self.account_id,
            api_key=self.api_key,
            auth_user=self.auth_user,
            base_url=self.base_url,
            cast=self.cast,
            cast_director=self.cast_director,
            cast_producer=self.cast_producer,
            cast_sound=self.cast_sound,
            cast_writing=self.cast_writing,
            certification=self.certification,
            company_id=self.company_id,
            config_contract=self.config_contract,
            enable_auto=self.enable_auto,
            enabled=self.enabled,
            exclude_genre_ids=self.exclude_genre_ids,
            expires=self.expires,
            genres=self.genres,
            id=self.id,
            implementation=self.implementation,
            include_genre_ids=self.include_genre_ids,
            keyword_id=self.keyword_id,
            language_code=self.language_code,
            limit=self.limit,
            link=self.link,
            list_id=self.list_id,
            list_order=self.list_order,
            list_type=self.list_type,
            listname=self.listname,
            min_score=self.min_score,
            min_vote_average=self.min_vote_average,
            min_votes=self.min_votes,
            minimum_availability=self.minimum_availability,
            monitor=self.monitor,
            name=self.name,
            only_active=self.only_active,
            person_id=self.person_id,
            port=self.port,
            profile_ids=self.profile_ids,
            quality_profile_id=self.quality_profile_id,
            rating=self.rating,
            refresh_token=self.refresh_token,
            root_folder_path=self.root_folder_path,
            search_on_add=self.search_on_add,
            source=self.source,
            tag_ids=self.tag_ids,
            tags=self.tags,
            tmdb_certification=self.tmdb_certification,
            tmdb_list_type=self.tmdb_list_type,
            trakt_additional_parameters=self.trakt_additional_parameters,
            trakt_list_type=self.trakt_list_type,
            url=self.url,
            url_base=self.url_base,
            user_list_type=self.user_list_type,
            username=self.username,
            years=self.years)


def get_import_list(name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImportListResult:
    """
    <!-- subcategory:Import Lists -->
    Single Import List.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_radarr as radarr

    example = radarr.ImportLists.get_import_list(name="Example")
    ```


    :param str name: Import List name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('radarr:ImportLists/getImportList:getImportList', __args__, opts=opts, typ=GetImportListResult).value

    return AwaitableGetImportListResult(
        access_token=pulumi.get(__ret__, 'access_token'),
        account_id=pulumi.get(__ret__, 'account_id'),
        api_key=pulumi.get(__ret__, 'api_key'),
        auth_user=pulumi.get(__ret__, 'auth_user'),
        base_url=pulumi.get(__ret__, 'base_url'),
        cast=pulumi.get(__ret__, 'cast'),
        cast_director=pulumi.get(__ret__, 'cast_director'),
        cast_producer=pulumi.get(__ret__, 'cast_producer'),
        cast_sound=pulumi.get(__ret__, 'cast_sound'),
        cast_writing=pulumi.get(__ret__, 'cast_writing'),
        certification=pulumi.get(__ret__, 'certification'),
        company_id=pulumi.get(__ret__, 'company_id'),
        config_contract=pulumi.get(__ret__, 'config_contract'),
        enable_auto=pulumi.get(__ret__, 'enable_auto'),
        enabled=pulumi.get(__ret__, 'enabled'),
        exclude_genre_ids=pulumi.get(__ret__, 'exclude_genre_ids'),
        expires=pulumi.get(__ret__, 'expires'),
        genres=pulumi.get(__ret__, 'genres'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        include_genre_ids=pulumi.get(__ret__, 'include_genre_ids'),
        keyword_id=pulumi.get(__ret__, 'keyword_id'),
        language_code=pulumi.get(__ret__, 'language_code'),
        limit=pulumi.get(__ret__, 'limit'),
        link=pulumi.get(__ret__, 'link'),
        list_id=pulumi.get(__ret__, 'list_id'),
        list_order=pulumi.get(__ret__, 'list_order'),
        list_type=pulumi.get(__ret__, 'list_type'),
        listname=pulumi.get(__ret__, 'listname'),
        min_score=pulumi.get(__ret__, 'min_score'),
        min_vote_average=pulumi.get(__ret__, 'min_vote_average'),
        min_votes=pulumi.get(__ret__, 'min_votes'),
        minimum_availability=pulumi.get(__ret__, 'minimum_availability'),
        monitor=pulumi.get(__ret__, 'monitor'),
        name=pulumi.get(__ret__, 'name'),
        only_active=pulumi.get(__ret__, 'only_active'),
        person_id=pulumi.get(__ret__, 'person_id'),
        port=pulumi.get(__ret__, 'port'),
        profile_ids=pulumi.get(__ret__, 'profile_ids'),
        quality_profile_id=pulumi.get(__ret__, 'quality_profile_id'),
        rating=pulumi.get(__ret__, 'rating'),
        refresh_token=pulumi.get(__ret__, 'refresh_token'),
        root_folder_path=pulumi.get(__ret__, 'root_folder_path'),
        search_on_add=pulumi.get(__ret__, 'search_on_add'),
        source=pulumi.get(__ret__, 'source'),
        tag_ids=pulumi.get(__ret__, 'tag_ids'),
        tags=pulumi.get(__ret__, 'tags'),
        tmdb_certification=pulumi.get(__ret__, 'tmdb_certification'),
        tmdb_list_type=pulumi.get(__ret__, 'tmdb_list_type'),
        trakt_additional_parameters=pulumi.get(__ret__, 'trakt_additional_parameters'),
        trakt_list_type=pulumi.get(__ret__, 'trakt_list_type'),
        url=pulumi.get(__ret__, 'url'),
        url_base=pulumi.get(__ret__, 'url_base'),
        user_list_type=pulumi.get(__ret__, 'user_list_type'),
        username=pulumi.get(__ret__, 'username'),
        years=pulumi.get(__ret__, 'years'))


@_utilities.lift_output_func(get_import_list)
def get_import_list_output(name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImportListResult]:
    """
    <!-- subcategory:Import Lists -->
    Single Import List.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_radarr as radarr

    example = radarr.ImportLists.get_import_list(name="Example")
    ```


    :param str name: Import List name.
    """
    ...
