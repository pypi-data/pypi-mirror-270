# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AutoTagArgs', 'AutoTag']

@pulumi.input_type
class AutoTagArgs:
    def __init__(__self__, *,
                 specifications: pulumi.Input[Sequence[pulumi.Input['AutoTagSpecificationArgs']]],
                 name: Optional[pulumi.Input[str]] = None,
                 remove_tags_automatically: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a AutoTag resource.
        :param pulumi.Input[Sequence[pulumi.Input['AutoTagSpecificationArgs']]] specifications: Specifications.
        :param pulumi.Input[str] name: Specification name.
        :param pulumi.Input[bool] remove_tags_automatically: Remove tags automatically flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        pulumi.set(__self__, "specifications", specifications)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remove_tags_automatically is not None:
            pulumi.set(__self__, "remove_tags_automatically", remove_tags_automatically)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def specifications(self) -> pulumi.Input[Sequence[pulumi.Input['AutoTagSpecificationArgs']]]:
        """
        Specifications.
        """
        return pulumi.get(self, "specifications")

    @specifications.setter
    def specifications(self, value: pulumi.Input[Sequence[pulumi.Input['AutoTagSpecificationArgs']]]):
        pulumi.set(self, "specifications", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specification name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="removeTagsAutomatically")
    def remove_tags_automatically(self) -> Optional[pulumi.Input[bool]]:
        """
        Remove tags automatically flag.
        """
        return pulumi.get(self, "remove_tags_automatically")

    @remove_tags_automatically.setter
    def remove_tags_automatically(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_tags_automatically", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AutoTagState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 remove_tags_automatically: Optional[pulumi.Input[bool]] = None,
                 specifications: Optional[pulumi.Input[Sequence[pulumi.Input['AutoTagSpecificationArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering AutoTag resources.
        :param pulumi.Input[str] name: Specification name.
        :param pulumi.Input[bool] remove_tags_automatically: Remove tags automatically flag.
        :param pulumi.Input[Sequence[pulumi.Input['AutoTagSpecificationArgs']]] specifications: Specifications.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remove_tags_automatically is not None:
            pulumi.set(__self__, "remove_tags_automatically", remove_tags_automatically)
        if specifications is not None:
            pulumi.set(__self__, "specifications", specifications)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specification name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="removeTagsAutomatically")
    def remove_tags_automatically(self) -> Optional[pulumi.Input[bool]]:
        """
        Remove tags automatically flag.
        """
        return pulumi.get(self, "remove_tags_automatically")

    @remove_tags_automatically.setter
    def remove_tags_automatically(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_tags_automatically", value)

    @property
    @pulumi.getter
    def specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutoTagSpecificationArgs']]]]:
        """
        Specifications.
        """
        return pulumi.get(self, "specifications")

    @specifications.setter
    def specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutoTagSpecificationArgs']]]]):
        pulumi.set(self, "specifications", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


class AutoTag(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remove_tags_automatically: Optional[pulumi.Input[bool]] = None,
                 specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutoTagSpecificationArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        <!-- subcategory:Tags -->
        Auto Tag resource.
        For more information refer to [Tags](https://wiki.servarr.com/radarr/settings#tags) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.tags.AutoTag("example",
            remove_tags_automatically=True,
            specifications=[
                radarr.tags.AutoTagSpecificationArgs(
                    implementation="RootFolderSpecification",
                    name="folder",
                    negate=True,
                    required=False,
                    value="/series",
                ),
                radarr.tags.AutoTagSpecificationArgs(
                    implementation="YearSpecification",
                    max=1910,
                    min=1900,
                    name="year",
                    negate=True,
                    required=False,
                ),
                radarr.tags.AutoTagSpecificationArgs(
                    implementation="GenreSpecification",
                    name="genre",
                    negate=False,
                    required=False,
                    value="horror comedy",
                ),
            ],
            tags=[
                1,
                2,
            ])
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:Tags/autoTag:AutoTag example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Specification name.
        :param pulumi.Input[bool] remove_tags_automatically: Remove tags automatically flag.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutoTagSpecificationArgs']]]] specifications: Specifications.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutoTagArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Tags -->
        Auto Tag resource.
        For more information refer to [Tags](https://wiki.servarr.com/radarr/settings#tags) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.tags.AutoTag("example",
            remove_tags_automatically=True,
            specifications=[
                radarr.tags.AutoTagSpecificationArgs(
                    implementation="RootFolderSpecification",
                    name="folder",
                    negate=True,
                    required=False,
                    value="/series",
                ),
                radarr.tags.AutoTagSpecificationArgs(
                    implementation="YearSpecification",
                    max=1910,
                    min=1900,
                    name="year",
                    negate=True,
                    required=False,
                ),
                radarr.tags.AutoTagSpecificationArgs(
                    implementation="GenreSpecification",
                    name="genre",
                    negate=False,
                    required=False,
                    value="horror comedy",
                ),
            ],
            tags=[
                1,
                2,
            ])
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:Tags/autoTag:AutoTag example 1
        ```

        :param str resource_name: The name of the resource.
        :param AutoTagArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutoTagArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remove_tags_automatically: Optional[pulumi.Input[bool]] = None,
                 specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutoTagSpecificationArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutoTagArgs.__new__(AutoTagArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["remove_tags_automatically"] = remove_tags_automatically
            if specifications is None and not opts.urn:
                raise TypeError("Missing required property 'specifications'")
            __props__.__dict__["specifications"] = specifications
            __props__.__dict__["tags"] = tags
        super(AutoTag, __self__).__init__(
            'radarr:Tags/autoTag:AutoTag',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            remove_tags_automatically: Optional[pulumi.Input[bool]] = None,
            specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutoTagSpecificationArgs']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'AutoTag':
        """
        Get an existing AutoTag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Specification name.
        :param pulumi.Input[bool] remove_tags_automatically: Remove tags automatically flag.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutoTagSpecificationArgs']]]] specifications: Specifications.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutoTagState.__new__(_AutoTagState)

        __props__.__dict__["name"] = name
        __props__.__dict__["remove_tags_automatically"] = remove_tags_automatically
        __props__.__dict__["specifications"] = specifications
        __props__.__dict__["tags"] = tags
        return AutoTag(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="removeTagsAutomatically")
    def remove_tags_automatically(self) -> pulumi.Output[bool]:
        """
        Remove tags automatically flag.
        """
        return pulumi.get(self, "remove_tags_automatically")

    @property
    @pulumi.getter
    def specifications(self) -> pulumi.Output[Sequence['outputs.AutoTagSpecification']]:
        """
        Specifications.
        """
        return pulumi.get(self, "specifications")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

