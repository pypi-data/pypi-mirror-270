# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RoksboxArgs', 'Roksbox']

@pulumi.input_type
class RoksboxArgs:
    def __init__(__self__, *,
                 movie_images: pulumi.Input[bool],
                 movie_metadata: pulumi.Input[bool],
                 enable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a Roksbox resource.
        :param pulumi.Input[bool] movie_images: Movie images flag.
        :param pulumi.Input[bool] movie_metadata: Movie metadata flag.
        :param pulumi.Input[bool] enable: Enable flag.
        :param pulumi.Input[str] name: Metadata name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        pulumi.set(__self__, "movie_images", movie_images)
        pulumi.set(__self__, "movie_metadata", movie_metadata)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="movieImages")
    def movie_images(self) -> pulumi.Input[bool]:
        """
        Movie images flag.
        """
        return pulumi.get(self, "movie_images")

    @movie_images.setter
    def movie_images(self, value: pulumi.Input[bool]):
        pulumi.set(self, "movie_images", value)

    @property
    @pulumi.getter(name="movieMetadata")
    def movie_metadata(self) -> pulumi.Input[bool]:
        """
        Movie metadata flag.
        """
        return pulumi.get(self, "movie_metadata")

    @movie_metadata.setter
    def movie_metadata(self, value: pulumi.Input[bool]):
        pulumi.set(self, "movie_metadata", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Metadata name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _RoksboxState:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 movie_images: Optional[pulumi.Input[bool]] = None,
                 movie_metadata: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering Roksbox resources.
        :param pulumi.Input[bool] enable: Enable flag.
        :param pulumi.Input[bool] movie_images: Movie images flag.
        :param pulumi.Input[bool] movie_metadata: Movie metadata flag.
        :param pulumi.Input[str] name: Metadata name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if movie_images is not None:
            pulumi.set(__self__, "movie_images", movie_images)
        if movie_metadata is not None:
            pulumi.set(__self__, "movie_metadata", movie_metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="movieImages")
    def movie_images(self) -> Optional[pulumi.Input[bool]]:
        """
        Movie images flag.
        """
        return pulumi.get(self, "movie_images")

    @movie_images.setter
    def movie_images(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "movie_images", value)

    @property
    @pulumi.getter(name="movieMetadata")
    def movie_metadata(self) -> Optional[pulumi.Input[bool]]:
        """
        Movie metadata flag.
        """
        return pulumi.get(self, "movie_metadata")

    @movie_metadata.setter
    def movie_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "movie_metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Metadata name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


class Roksbox(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 movie_images: Optional[pulumi.Input[bool]] = None,
                 movie_metadata: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        <!-- subcategory:Metadata -->
        Metadata Roksbox resource.
        For more information refer to [Metadata](https://wiki.servarr.com/radarr/settings#metadata) and [ROKSBOX](https://wiki.servarr.com/radarr/supported#roksboxmetadata).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.metadata.Roksbox("example",
            enable=True,
            movie_images=True,
            movie_metadata=True)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:Metadata/roksbox:Roksbox example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable: Enable flag.
        :param pulumi.Input[bool] movie_images: Movie images flag.
        :param pulumi.Input[bool] movie_metadata: Movie metadata flag.
        :param pulumi.Input[str] name: Metadata name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoksboxArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Metadata -->
        Metadata Roksbox resource.
        For more information refer to [Metadata](https://wiki.servarr.com/radarr/settings#metadata) and [ROKSBOX](https://wiki.servarr.com/radarr/supported#roksboxmetadata).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_radarr as radarr

        example = radarr.metadata.Roksbox("example",
            enable=True,
            movie_images=True,
            movie_metadata=True)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import radarr:Metadata/roksbox:Roksbox example 1
        ```

        :param str resource_name: The name of the resource.
        :param RoksboxArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoksboxArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 movie_images: Optional[pulumi.Input[bool]] = None,
                 movie_metadata: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoksboxArgs.__new__(RoksboxArgs)

            __props__.__dict__["enable"] = enable
            if movie_images is None and not opts.urn:
                raise TypeError("Missing required property 'movie_images'")
            __props__.__dict__["movie_images"] = movie_images
            if movie_metadata is None and not opts.urn:
                raise TypeError("Missing required property 'movie_metadata'")
            __props__.__dict__["movie_metadata"] = movie_metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
        super(Roksbox, __self__).__init__(
            'radarr:Metadata/roksbox:Roksbox',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            movie_images: Optional[pulumi.Input[bool]] = None,
            movie_metadata: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'Roksbox':
        """
        Get an existing Roksbox resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable: Enable flag.
        :param pulumi.Input[bool] movie_images: Movie images flag.
        :param pulumi.Input[bool] movie_metadata: Movie metadata flag.
        :param pulumi.Input[str] name: Metadata name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RoksboxState.__new__(_RoksboxState)

        __props__.__dict__["enable"] = enable
        __props__.__dict__["movie_images"] = movie_images
        __props__.__dict__["movie_metadata"] = movie_metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["tags"] = tags
        return Roksbox(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[bool]:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="movieImages")
    def movie_images(self) -> pulumi.Output[bool]:
        """
        Movie images flag.
        """
        return pulumi.get(self, "movie_images")

    @property
    @pulumi.getter(name="movieMetadata")
    def movie_metadata(self) -> pulumi.Output[bool]:
        """
        Movie metadata flag.
        """
        return pulumi.get(self, "movie_metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Metadata name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

