{"version":3,"file":"lib_index_js.cf91f028dc5a1c30b067.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACuD;AACC;AACO;AACP;AACH;AACoB;AACN;AACnE;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB,EAAE,yEAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,MAAM;AACvE;AACA,wCAAwC,MAAM;AAC9C,mBAAmB,2EAAe;AAClC;AACA;AACA,YAAY,0EAAc,kBAAkB,6DAAK;AACjD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA,iCAAiC,OAAO;AACxC;AACA,aAAa;AACb,8BAA8B,mCAAmC;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY,0EAAc,kBAAkB,6DAAK;AACjD,gBAAgB,qEAAS;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,mCAAmC;AAC7D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,0EAAc,kBAAkB,6DAAK;AACjD,gBAAgB,qEAAS;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,mCAAmC;AAC7D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,+DAAa;AACpD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,+BAA+B,kEAAkB;AACjD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,uCAAuC,+DAAa;AACpD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,+BAA+B,kEAAkB;AACjD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,uCAAuC,+DAAa;AACpD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,+BAA+B,kEAAkB;AACjD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,uCAAuC,+DAAa;AACpD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,+BAA+B,kEAAkB;AACjD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,mBAAmB;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab-courselevels/./lib/index.js"],"sourcesContent":["/*\n * for attaching keybindings later on, see\n * https://towardsdatascience.com/how-to-customize-jupyterlab-keyboard-shortcuts-72321f73753d\n */\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { md_toggle, md_toggle_multi, } from 'jupyterlab-celltagsclasses';\nimport { Scope, apply_on_cells } from 'jupyterlab-celltagsclasses';\nconst PLUGIN_ID = 'jupyterlab-courselevels:plugin';\nconst ALL_LEVELS = ['basic', 'intermediate', 'advanced'];\nconst plugin = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    requires: [ICommandPalette, INotebookTracker, ISettingRegistry],\n    activate: (app, palette, notebookTracker, settingRegistry) => {\n        console.log('extension jupyterlab-courselevels is activating');\n        // https://lumino.readthedocs.io/en/1.x/api/commands/interfaces/commandregistry.ikeybindingoptions.html\n        // The supported modifiers are: Accel, Alt, Cmd, Ctrl, and Shift. The Accel\n        // modifier is translated to Cmd on Mac and Ctrl on all other platforms. The\n        // Cmd modifier is ignored on non-Mac platforms.\n        // Alt is option on mac\n        let [show_level_buttons] = [false];\n        const ALL_FULL_LEVELS = ALL_LEVELS.map(level => `level_${level}`);\n        const cell_toggle_level = (cell, level) => {\n            const full_level = `level_${level}`;\n            return md_toggle_multi(cell, 'tags', full_level, ALL_FULL_LEVELS);\n        };\n        const toggle_level = (level) => {\n            apply_on_cells(notebookTracker, Scope.Multiple, (cell) => {\n                cell_toggle_level(cell, level);\n            });\n        };\n        let command;\n        for (const [level, key] of [\n            ['basic', 'Ctrl X'],\n            ['intermediate', 'Ctrl Y'],\n            ['advanced', 'Ctrl Z']\n        ]) {\n            command = `courselevels:toggle-level-${level}`;\n            app.commands.addCommand(command, {\n                label: `toggle ${level} level`,\n                execute: () => toggle_level(level)\n            });\n            palette.addItem({ command, category: 'courselevels' });\n            app.commands.addKeyBinding({\n                command,\n                keys: ['Ctrl \\\\', key],\n                selector: '.jp-Notebook'\n            });\n        }\n        const toggle_frame = () => {\n            apply_on_cells(notebookTracker, Scope.Multiple, (cell) => {\n                md_toggle(cell, 'tags', 'framed_cell');\n            });\n        };\n        command = 'courselevels:toggle-frame';\n        app.commands.addCommand(command, {\n            label: 'toggle frame',\n            execute: () => toggle_frame()\n        });\n        palette.addItem({ command, category: 'courselevels' });\n        app.commands.addKeyBinding({\n            command,\n            keys: ['Ctrl \\\\', 'Ctrl M'],\n            selector: '.jp-Notebook'\n        });\n        const toggle_licence = () => {\n            apply_on_cells(notebookTracker, Scope.Active, (cell) => {\n                md_toggle(cell, 'tags', 'licence');\n            });\n        };\n        command = 'courselevels:toggle-licence';\n        app.commands.addCommand(command, {\n            label: 'toggle licence',\n            execute: () => toggle_licence()\n        });\n        palette.addItem({ command, category: 'courselevels' });\n        app.commands.addKeyBinding({\n            command,\n            keys: ['Ctrl \\\\', 'Ctrl L'],\n            selector: '.jp-Notebook'\n        });\n        // the buttons in the toolbar\n        const create_level_buttons = () => {\n            const find_spacer = (panel) => {\n                let index = 0;\n                for (const child of panel.toolbar.children()) {\n                    if (child.node.classList.contains('jp-Toolbar-spacer')) {\n                        return index;\n                    }\n                    else {\n                        index += 1;\n                    }\n                }\n                return 0;\n            };\n            class BasicButton {\n                createNew(panel, context) {\n                    const button = new ToolbarButton({\n                        className: 'courselevels-button',\n                        iconClass: 'far fa-hand-pointer',\n                        onClick: () => toggle_level('basic'),\n                        tooltip: 'Toggle basic level'\n                    });\n                    // compute where to insert it\n                    const index = find_spacer(panel);\n                    panel.toolbar.insertItem(index, 'basicLevel', button);\n                    return new DisposableDelegate(() => {\n                        button.dispose();\n                    });\n                }\n            }\n            app.docRegistry.addWidgetExtension('Notebook', new BasicButton());\n            class IntermediateButton {\n                createNew(panel, context) {\n                    const button = new ToolbarButton({\n                        className: 'courselevels-button',\n                        iconClass: 'far fa-hand-peace',\n                        onClick: () => toggle_level('intermediate'),\n                        tooltip: 'Toggle intermediate level'\n                    });\n                    // compute where to insert it\n                    const index = find_spacer(panel);\n                    panel.toolbar.insertItem(index, 'intermediateLevel', button);\n                    return new DisposableDelegate(() => {\n                        button.dispose();\n                    });\n                }\n            }\n            app.docRegistry.addWidgetExtension('Notebook', new IntermediateButton());\n            class AdvancedButton {\n                createNew(panel, context) {\n                    const button = new ToolbarButton({\n                        className: 'courselevels-button',\n                        iconClass: 'far fa-hand-spock',\n                        onClick: () => toggle_level('advanced'),\n                        tooltip: 'Toggle advanced level'\n                    });\n                    // compute where to insert it\n                    const index = find_spacer(panel);\n                    panel.toolbar.insertItem(index, 'advancedLevel', button);\n                    return new DisposableDelegate(() => {\n                        button.dispose();\n                    });\n                }\n            }\n            app.docRegistry.addWidgetExtension('Notebook', new AdvancedButton());\n            class FrameButton {\n                createNew(panel, context) {\n                    const button = new ToolbarButton({\n                        className: 'courselevels-button',\n                        iconClass: 'fas fa-crop-alt',\n                        onClick: () => toggle_frame(),\n                        tooltip: 'Toggle frame around cell'\n                    });\n                    // compute where to insert it\n                    const index = find_spacer(panel);\n                    panel.toolbar.insertItem(index, 'frameLevel', button);\n                    return new DisposableDelegate(() => {\n                        button.dispose();\n                    });\n                }\n            }\n            app.docRegistry.addWidgetExtension('Notebook', new FrameButton());\n        };\n        // load settings and create buttons if requested\n        function loadSetting(setting) {\n            // Read the settings and convert to the correct type\n            show_level_buttons = setting.get('show_level_buttons')\n                .composite;\n            console.log(`jupyterlab-courselevels extension: show_level_buttons is set to ${show_level_buttons}`);\n            if (show_level_buttons) {\n                create_level_buttons();\n            }\n        }\n        // but do it only after the app has started\n        Promise.all([app.restored, settingRegistry.load(PLUGIN_ID)]).then(([_, setting]) => {\n            loadSetting(setting);\n            setting.changed.connect(loadSetting);\n        });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}