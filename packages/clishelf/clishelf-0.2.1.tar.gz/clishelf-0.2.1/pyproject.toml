[project]
name = "clishelf"
description = "Utility CLI Tools that reusable for develop any Python Package"
readme = "README.md"
requires-python = ">=3.9.13"
license = "MIT"
keywords = [
    'utility',
    'cli',
]
authors = [
    { name = "korawica", email = "korawich.anu@gmail.com" },
]
classifiers = [
    "Topic :: Utilities",
    "Natural Language :: English",
    "Development Status :: 4 - Beta",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "requests==2.31.0",
    "more-itertools==10.2.0",
    "click==8.1.7,<9.0.0",
    "tomli==2.0.1",
    "pre-commit",
    # TODO: able to change this package from `bump2version` to `bump-my-version`
    #   docs: https://github.com/callowayproject/bump-my-version
    "bump2version==1.0.1",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest==8.2.0",
    "coverage[toml]==7.5.0",
    "mypy==1.10.0",

]

[project.urls]
Homepage = "https://github.com/korawica/clishelf/"
"Source Code" = "https://github.com/korawica/clishelf/"

[build-system]
requires = ["hatchling>=1.8.0"]
build-backend = "hatchling.build"

[project.scripts]
shelf = "clishelf.__main__:main"

# Note: This line is the config for `clishelf` package
[tool.shelf.version]
version = "./clishelf/__about__.py"
changelog = "CHANGELOG.md"
files = [
    "README.md"
]

[tool.coverage.run]
branch = true
concurrency = ["thread", "multiprocessing"]
parallel = true
context = '${CONTEXT}'
source = [
    "clishelf",
]
omit = [
    "clishelf/__main__.py",
    "clishelf/__about__.py",
    "clishelf/cli.py",
]
relative_files = true

[tool.hatch.version]
scheme = "standard"
source = "code"
path = "clishelf/__about__.py"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/.pre-commit-config.yaml",
]

[tool.hatch.build.targets.wheel]
packages = ["clishelf"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
]

[tool.pytest.ini_options]
console_output_style = "count"
filterwarnings = ["error"]
addopts = [
    "--strict-config",
    "--strict-markers",
]

[tool.mypy]
python_version = "3.9"
files = ["clishelf"]
show_error_codes = true
pretty = true
strict = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.black]
line-length = 80
target-version = ['py39']
exclude = """
/(
    \\.git
    | \\.__pycache__
    | \\.idea
    | \\.ruff_cache
    | \\.mypy_cache
    | \\.pytest_cache
    | \\.venv
)/
"""

[tool.ruff]
line-length = 80
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
lint.ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
# Exclude a variety of commonly ignored directories.
lint.exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "venv",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
