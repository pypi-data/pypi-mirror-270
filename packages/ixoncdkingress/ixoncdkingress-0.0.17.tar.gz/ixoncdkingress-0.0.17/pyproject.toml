[project]
name = "ixoncdkingress"
version = "0.0.17"
description = "IXON CDK Ingress used in Cloud Functions for the IXON Cloud"
readme = "README.md"
authors = [
  { name = "IXON", email = "development@ixon.cloud" },
]
requires-python = ">=3.9"
classifiers = [
  "Programming Language :: Python :: 3"
]
dependencies = [
  "cryptography~=38.0.3",
  "docker>=6.1.3",
  "pymongo>=4.4.0",
  "requests>=2.28.1",
]

[project.optional-dependencies]
development = [
  "bandit==1.7.5",
  "dominate==2.8.0",
  "ixtest==0.0.20",
  "mock==5.1.0",
  "mypy==1.7.0",
  "pyfakefs==5.3.0",
  "ruff==0.1.5",
  "pytest==7.4.3",
  "pytest-cov==4.1.0",
  "pytest-integration==0.2.3",
  "pytest-mock==3.12.0",
  "types-requests>=2.28.11.5",
]

[project.urls]
homepage = "https://www.ixon.cloud/"
documentation = "https://developer.ixon.cloud/"

[build-system]
requires = ["setuptools>=68.2.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["ixoncdkingress*"]
exclude = ["docker*", "stubs*", "tests*", "user_scripts*"]

[tool.setuptools.package-data]
ixoncdkingress = ["py.typed"]

[tool.mypy]
mypy_path = "./stubs/"

# We don't do any bandit configuration however there is an issue with bandit if
# the tool.bandit key is not present.
[tool.bandit]
skips = ["B101"]

[tool.ruff]
# Selects all ruff rules
select=["ALL"]

# Ignore specific rule (sets)
# https://docs.astral.sh/ruff/rules/
ignore=[
    # Rule sets
    "ANN", # flake8-annotations
    "COM", # flake8-commas
    "D", # pydocstyle
    "EM", # flake8-errmsg
    "FA", # flake8-future-annotation
    "FBT", # flake8-boolean-trap
    "PD", # pandas-vet
    "PTH", # flake8-use-pathlib
    "Q", # flake8-qoutes
    "TRY", # tryceratops

    # Specific rules
    "B011",  # Assertion always fails
    "B028", # No explicit `stacklevel` keyword argument found
    "C901", # `...` is too complex (... > 10)
    "DTZ007", # The use of datetime.strptime() without %z must be followed by `...`
    "E741", # Ambiguous variable name
    "N812", # Lowercase `...` import as non-lowercase `...`
    "N818", # Exception name `...` should be named with an Error suffix
    "PT015", # Assertion always fails
    "PYI036", # The nth argument in `...` should be annotated with `...`
    "S101", # Use of assert detected
    "SIM300", # Yoda conditions
]

line-length = 100

[tool.ruff.lint.pylint]
max-args = 12
max-branches = 20
max-returns = 11
max-statements = 60

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
  # Rule sets
  "S", # flake8-bandit
  "N", # pep8-naming

  # Specific rules
  "A002", # Shadow/redefine builtins
  "PLR0913", # Too many arguments
  "PLR2004", # Magic value in comparison
  "PT001", # Use `@pytest.fixture()` over `@pytest.fixture`
  "PT004", # Fixture `...` does not return anything, add leading underscore
  "PT006", # Wrong name(s) type in parametrize
  "PT007", # Wrong values in parametrize
  "PT011", # Too broad exception
  "PT022", # No teardown in fixture `...`
  "PT023", # Use `@pytest.mark.integration_test()` over `@pytest.mark.integration_test`
  "RUF012", # Mutable class attributes should be annotated
  "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
  "SIM117", # Multiple nested `with` statements
  "SLF001", # Private member accessed
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
precision = 2
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
]
omit = [
  "**/cbc/**",
]
