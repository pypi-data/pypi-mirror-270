from __future__ import annotations
import frenetix._frenetix
import frenetix._frenetix.trajectory_functions
import numpy
import pybind11_stubgen.typing_ext
import typing
__all__ = ['CalculateAccelerationCost', 'CalculateCollisionProbabilityFast', 'CalculateCollisionProbabilityMahalanobis', 'CalculateDistanceToObstacleCost', 'CalculateDistanceToReferencePathCost', 'CalculateJerkCost', 'CalculateLaneCenterOffsetCost', 'CalculateLateralJerkCost', 'CalculateLongitudinalJerkCost', 'CalculateLongitudinalVelocityCost', 'CalculateOrientationOffsetCost', 'CalculateSteeringAngleCost', 'CalculateSteeringRateCost', 'CalculateVelocityOffsetCost', 'CalculateYawCost']
class CalculateAccelerationCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateCollisionProbabilityFast(frenetix._frenetix.trajectory_functions.CostStrategy):
    @typing.overload
    def __init__(self, function_name: str, cost_weight: float, predictions: dict[int, frenetix._frenetix.PredictedObject], vehicleLength: float, vehicleWidth: float) -> None:
        ...
    @typing.overload
    def __init__(self, function_name: str, cost_weight: float, predictions: dict[int, frenetix._frenetix.PredictedObject], vehicle_length: float, vehicle_width: float, wheelbase_rear: float, off_center_weight: float = 0.5) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
    def printPredictions(self) -> None:
        ...
class CalculateCollisionProbabilityMahalanobis(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float, predictions: dict[int, frenetix._frenetix.PredictedObject]) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateDistanceToObstacleCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float, obstacles: typing.Annotated[numpy.ndarray, numpy.float64, pybind11_stubgen.typing_ext.DynamicSize('m', 'n'), numpy.ndarray.flags.writeable, numpy.ndarray.flags.c_contiguous]) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateDistanceToReferencePathCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateJerkCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateLaneCenterOffsetCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateLateralJerkCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateLongitudinalJerkCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateLongitudinalVelocityCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateOrientationOffsetCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateSteeringAngleCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateSteeringRateCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateVelocityOffsetCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float, desiredSpeed: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CalculateYawCost(frenetix._frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
