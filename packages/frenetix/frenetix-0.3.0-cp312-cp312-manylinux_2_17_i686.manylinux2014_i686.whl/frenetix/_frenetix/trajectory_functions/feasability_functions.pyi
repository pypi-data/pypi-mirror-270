from __future__ import annotations
import frenetix._frenetix
import frenetix._frenetix.trajectory_functions
__all__ = ['CheckAccelerationConstraint', 'CheckCurvatureConstraint', 'CheckCurvatureRateConstraint', 'CheckVelocityConstraint', 'CheckYawRateConstraint']
class CheckAccelerationConstraint(frenetix._frenetix.trajectory_functions.FeasabilityStrategy):
    def __init__(self, switchingVelocity: float, maxAcceleration: float, wholeTrajectory: bool) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CheckCurvatureConstraint(frenetix._frenetix.trajectory_functions.FeasabilityStrategy):
    def __init__(self, deltaMax: float, wheelbase: float, wholeTrajectory: bool) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CheckCurvatureRateConstraint(frenetix._frenetix.trajectory_functions.FeasabilityStrategy):
    def __init__(self, wheelbase: float, velocityDeltaMax: float, wholeTrajectory: bool) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CheckVelocityConstraint(frenetix._frenetix.trajectory_functions.FeasabilityStrategy):
    def __init__(self, wholeTrajectory: bool) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
class CheckYawRateConstraint(frenetix._frenetix.trajectory_functions.FeasabilityStrategy):
    def __init__(self, deltaMax: float, wheelbase: float, wholeTrajectory: bool) -> None:
        ...
    def evaluate_trajectory(self, trajectory: frenetix._frenetix.TrajectorySample) -> None:
        ...
