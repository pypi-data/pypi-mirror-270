Metadata-Version: 2.3
Name: report_volo
Version: 0.2.0
Summary: A report generation package for results of Monaco 2018 Racing
Project-URL: Homepage, https://git.foxminded.ua/volodymyr-perehuda-nyc/task-6-report-of-monaco-2018-racing
Project-URL: Issues, https://git.foxminded.ua/volodymyr-perehuda-nyc/task-6-report-of-monaco-2018-racing/issues
Author-email: Volodymyr Perehuda <author@example.com>
Keywords: report volo,volo report,your
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.12.3
Description-Content-Type: text/markdown

# Project description

Module for report generation. Takes logs of start and end time, assing values by key to data from abbrevations.txt and provide records recults.

## Installation

To use the package, you need to install it first. You can do this using `pip`:

```pip install report_volo```

## A Simple Example

```python
from report_volo import record_report

args = ["--files", "path/to/data_folder", "--asc"]
record_report(args)
```

## Methods:

### read_abbr

Reads abbreviations from the specified file, validates the format, and returns a dictionary of `Record` objects.
Example:
```python
from report_volo import read_abbr

read_abbr("path/to/folder, records_dict, abbr_file="abbreviations.txt")
```

### read_logs 

Reads log files, extracts start and end data, and updates the Record objects accordingly.

Example:
```python
from report_volo import read_logs

read_logs("path/to/folder", records_dict, start_file="start.log", end_file="end.log")
```

### build_report 
Compiles and returns two lists of Record objects representing valid and invalid records based on logs and abbreviations.

Example:
```python
from report_volo import build_report

good_records_asc, bad_records = build_report(path=folder_path, order="asc")
```

### print_report
Formats and prints a report based on ordered lists of valid and invalid records.

Example:
```python
from report_volo import print_report

print_report(expected_good_records_asc, expected_bad_records, border_line=15)
```


### cli
Parses command-line arguments using argparse and returns a namespace.

Example:
```python
from report_volo import cli

cli("--files", "path/to/folder", "--asc")
```

### record_report
Orchestrates the report generation process, parsing command-line arguments, generating reports, and printing them.

Example:
```python
from report_volo import record_report

record_report("--files", "path/to/folder", "--asc")
```

## License

This package is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
