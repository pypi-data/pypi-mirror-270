from .......Internal.Core import Core
from .......Internal.CommandsGroup import CommandsGroup
from .......Internal import Conversions
from ....... import enums


# noinspection PyPep8Naming,PyAttributeOutsideInit,SpellCheckingInspection
class SelectCls:
	"""Select commands group definition. 1 total commands, 0 Subgroups, 1 group commands"""

	def __init__(self, core: Core, parent):
		self._core = core
		self._cmd_group = CommandsGroup("select", core, parent)

	def set(self, type_py: enums.CoefTypeK18) -> None:
		"""SCPI: CONFigure:MDPD:COEFficient:SELect \n
		Snippet: driver.applications.k18AmplifierEt.configure.mdpd.coefficient.select.set(type_py = enums.CoefTypeK18.FILE) \n
		Selects the source from which the coefficients are to be used. \n
			:param type_py: FILE | MODeling FILE Uses the coefficients from a csv file. MODeling Uses the coefficients generated by the modelling.
		"""
		param = Conversions.enum_scalar_to_str(type_py, enums.CoefTypeK18)
		self._core.io.write(f'CONFigure:MDPD:COEFficient:SELect {param}')

	# noinspection PyTypeChecker
	def get(self) -> enums.CoefTypeK18:
		"""SCPI: CONFigure:MDPD:COEFficient:SELect \n
		Snippet: value: enums.CoefTypeK18 = driver.applications.k18AmplifierEt.configure.mdpd.coefficient.select.get() \n
		Selects the source from which the coefficients are to be used. \n
			:return: type_py: FILE | MODeling FILE Uses the coefficients from a csv file. MODeling Uses the coefficients generated by the modelling."""
		response = self._core.io.query_str(f'CONFigure:MDPD:COEFficient:SELect?')
		return Conversions.str_to_scalar_enum(response, enums.CoefTypeK18)
