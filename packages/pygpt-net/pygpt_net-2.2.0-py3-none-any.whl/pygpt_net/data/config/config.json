{
  "__meta__": {
    "version": "2.2.0",
    "app.version": "2.2.0",
    "updated_at": "2024-04-28T00:00:00"
  },
  "agent.auto_stop" : true,
  "agent.goal.notify": true,
  "agent.idx": "base",
  "agent.iterations": 3,
  "agent.mode": "chat",
  "ai_name": "",
  "api_endpoint": "https://api.openai.com/v1",
  "api_key": "",
  "assistant": "",
  "assistant_thread": "",
  "assistant.store.hide_threads": true,
  "attachments_send_clear": true,
  "attachments_capture_clear": true,
  "audio.transcribe.convert_video": true,
  "context_threshold": 200,
  "cmd": false,
  "ctx": "",
  "ctx.auto_summary": true,
  "ctx.auto_summary.model": "gpt-3.5-turbo-1106",
  "ctx.convert_lists": false,
  "ctx.counters.all": false,
  "ctx.edit_icons": false,
  "ctx.code_interpreter": true,
  "ctx.list.expanded": [],
  "ctx.records.limit": 0,
  "ctx.records.filter": "all",
  "ctx.records.filter.labels": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7
  ],
  "ctx.search_content": false,
  "ctx.search.string": "",
  "ctx.sources": true,
  "ctx.use_extra": true,
  "current_model": {
    "assistant": "gpt-3.5-turbo",
    "chat": "gpt-3.5-turbo",
    "completion": "gpt-3.5-turbo-instruct",
    "img": "dall-e-3",
    "langchain": "gpt-3.5-turbo",
    "llama_index": "gpt-3.5-turbo",
    "vision": "gpt-4-vision-preview",
    "agent": "gpt-4-turbo-preview"
  },
  "current_preset": {
    "assistant": "",
    "chat": "",
    "completion": "",
    "img": "",
    "langchain": "",
    "llama_index": "",
    "vision": "",
    "agent": ""
  },
  "debug": false,
  "download.dir": "download",
  "font_size": 12,
  "font_size.input": 12,
  "font_size.ctx": 12,
  "font_size.toolbox": 12,
  "frequency_penalty": 0.0,
  "img_dialog_open": true,
  "img_prompt_model": "gpt-4-1106-preview",
  "img_raw": true,
  "img_resolution": "1792x1024",
  "img_quality": "standard",
  "img_variants": 1,
  "interpreter.auto_clear": true,
  "interpreter.execute_all": true,
  "interpreter.edit": false,
  "interpreter.input": "",
  "lang": "en",
  "layout.density": -1,
  "layout.dialog.geometry.store": true,
  "layout.dialog.geometry": {},
  "layout.dpi.scaling": true,
  "layout.dpi.factor": 1.0,
  "layout.groups": {},
  "layout.splitters": {},
  "layout.tabs": {},
  "layout.tooltips": true,
  "layout.tray": true,
  "layout.tray.minimize": false,
  "layout.window": {},
  "license.accepted": false,
  "llama.hub.loaders.args": [],
  "llama.hub.loaders.use_local": false,
  "llama.idx.auto": false,
  "llama.idx.auto.index": "base",
  "llama.idx.auto.modes": "chat,completion,vision,assistant,langchain,llama_index,agent",
  "llama.idx.current": "base",
  "llama.idx.custom_meta": [
      {
          "extensions": "*",
          "key": "file_name",
          "value": "{relative_path}"
      }
  ],
  "llama.idx.custom_meta.web": [],
  "llama.idx.db.index": "base",
  "llama.idx.db.last": 0,
  "llama.idx.embeddings.provider": "openai",
  "llama.idx.embeddings.args": [
      {
          "name": "model",
          "value": "text-embedding-3-small",
          "type": "str"
      }
  ],
  "llama.idx.embeddings.env": [
      {
          "name": "OPENAI_API_KEY",
          "value": "{api_key}"
      },
      {
          "name": "OPENAI_API_BASE",
          "value": "{api_endpoint}"
      }
  ],
  "llama.idx.embeddings.limit.rpm": 100,
  "llama.idx.excluded.ext": "3g2,3gp,7z,a,aac,aiff,alac,apk,apk,apng,app,ar,avif,bin,bz2,cab,class,deb,deb,dll,dmg,dmg,drv,dsd,dylib,dylib,ear,egg,elf,esd,exe,flac,flv,gz,heic,heif,ico,img,iso,jar,ko,lib,lz,lz4,m2v,mpc,msi,nrg,o,ogg,ogv,pcm,pkg,pkg,psd,pyc,rar,rpm,rpm,so,so,svg,swm,sys,tar,vdi,vhd,vhdx,vmdk,vob,war,whl,wim,wma,wmv,xz,zip,zst",
  "llama.idx.excluded.force": false,
  "llama.idx.list": [
      {
          "id": "base",
          "name": "Base"
      }
  ],
  "llama.idx.raw": false,
  "llama.idx.recursive": false,
  "llama.idx.replace_old": true,
  "llama.idx.status": {},
  "llama.idx.storage": "SimpleVectorStore",
  "llama.idx.storage.args": [],
  "lock_modes": true,
  "log.assistants": false,
  "log.ctx": true,
  "log.dalle": false,
  "log.events": false,
  "log.level": "error",
  "log.llama": false,
  "log.plugins": false,
  "max_output_tokens": 1024,
  "max_requests_limit": 60,
  "max_tokens_length": 32000,
  "max_total_tokens": 128000,
  "mode": "chat",
  "model": "gpt-3.5-turbo",
  "notepad.num": 1,
  "organization_key": "",
  "output_timestamp": false,
  "painter.brush.color": "Black",
  "painter.brush.mode": "brush",
  "painter.brush.size": 3,
  "painter.canvas.size": "800x600",
  "plugins": {},
  "plugins_enabled": {
    "agent": false,
    "audio_input": false,
    "audio_output": false,
    "cmd_api": false,
    "cmd_code_interpreter": true,
    "cmd_custom": true,
    "cmd_files": true,
    "cmd_history": false,
    "cmd_serial": false,
    "cmd_web": true,
    "crontab": false,
    "idx_llama_index": false,
    "openai_dalle": true,
    "openai_vision": true,
    "real_time": true
  },
  "presence_penalty": 0.0,
  "preset": "current.chat",
  "preset.plugins": "",
  "prompt": "",
  "prompt.agent.continue": "continue if needed...",
  "prompt.agent.goal": "STATUS UPDATE: You can use \"goal_update\" command to update status of the task. Remember to put it in the form as given, at the end of the surrounding ~###~ marks, e.g.: ~###~{\"cmd\": \"goal_update\", \"params\": {\"status\": \"finished\"}}~###~.\nON GOAL FINISH: When you believe that the task has been completed 100% and all goals have been achieved, run \"goal_update\" command with status = \"finished\".\nON PAUSE, FAILED OR WAIT: If more data from user is needed to achieve the goal or task run must be paused or task was failed or when the conversation falls into a loop, THEN STOP REASONING and include \"goal_update\" command with one of these statuses: \"pause\", \"failed\" or \"wait\".",
  "prompt.cmd": "RUNNING COMMANDS:\nYou can execute commands and also use them to run commands in the user's environment.\n\nImportant rules:\n\n1) To execute a command, return a JSON object with the \"cmd\" key and the command name as its value.\n2) Always use the syntax defined in the command definition and the correct command name.\n3) Put command parameters in the \"params\" key. Example: {\"cmd\": \"web_search\", \"params\": {\"query\": \"some query\"}}. Use ONLY this syntax. DO NOT use any other syntax.\n4) Append the JSON object to the response at the end and around it with the `~###~` characters. Example: text response ~###~ {\"cmd\": \"web_search\", \"params\": {\"query\": \"some query\"}} ~###~.\n5) If you want to execute a command without any response, return only the JSON object.\n6) Responses from commands will be returned in the \"result\" key.\n7) Always use the correct command name, e.g., if the command name is \"sys_exec\", then use \"sys_exec\" and don't use other names, like \"run\" or something.\n8) With commands, you have access to user's local files and you are allowed to run external commands and apps in the user's system (environment).\n9) Always use the defined syntax to prevent errors.\n10) Always choose the most appropriate command from the list to perform the task, based on the description of the action performed by a given command.\n11) Reply to the user in the language in which they started the conversation with you.\n12) Use ONLY params described in the command definition, do NOT use any additional params not described on the list.\n13) ALWAYS remember that any text content must appear at the beginning of your response and commands must be included at the end of the response.\n14) Every command parameter must be placed in one line, so when you generate code you must put all of the code in one line.\n15) Run the commands immediately without asking for permission.\n16) Use the current path by default when accessing the files and full path is not provided.\n17) The list of available commands is defined below, described in JSON schema.\n\nJSON schema with commands list:\n----------------\n{schema}\n----------------\n{extra}",
  "prompt.cmd.extra": "When executing command, always use following JSON syntax: {\"cmd\": \"<command_name>\", \"params\": {\"<param_name>\": \"<param_value>\"}}",
  "prompt.cmd.extra.assistants": "IMPORTANT: never execute above commands in your environment. Instead, could you provide me with the JSON syntax for the command you would use? It will be executed on my system automatically. Always return the command from above schema in JSON format inside the special characters ~###~",
  "prompt.ctx.auto_summary.system": "You are an expert in conversation summarization",
  "prompt.ctx.auto_summary.user": "Summarize topic of this conversation in one sentence. Use best keywords to describe it. Summary must be in the same language as the conversation and it will be used for conversation title so it must be EXTREMELY SHORT and concise - use maximum 5 words: \n\nHuman: {input}\nAI Assistant: {output}",
  "prompt.default": "You are a helpful assistant.",
  "prompt.img": "Whenever I provide a basic idea or concept for an image, such as 'a picture of mountains', I want you to ALWAYS translate it into English and expand and elaborate on this idea. Use your knowledge and creativity to add details that would make the image more vivid and interesting. This could include specifying the time of day, weather conditions, surrounding environment, and any additional elements that could enhance the scene. Your goal is to create a detailed and descriptive prompt that provides DALL-E with enough information to generate a rich and visually appealing image. Remember to maintain the original intent of my request while enriching the description with your imaginative details.\n",
  "render.blocks": true,
  "render.engine": "web",
  "render.open_gl": false,
  "render.plain": false,
  "render.code_syntax": "github-dark",
  "send_clear": true,
  "send_mode": 2,
  "store_history": true,
  "store_history_time": true,
  "stream": true,
  "temperature": 1.0,
  "theme": "dark_cyan",
  "theme.markdown": true,
  "top_p": 1.0,
  "upload.store": true,
  "upload.data_dir": false,
  "updater.check.launch": true,
  "updater.check.bg": true,
  "updater.check.bg.last_time": "",
  "updater.check.bg.last_version": "",
  "use_context": true,
  "user_name": "",
  "video.player.path": "",
  "video.player.volume": 100,
  "video.player.volume.mute": false,
  "vision.capture.auto": false,
  "vision.capture.enabled": false,
  "vision.capture.height": 720,
  "vision.capture.idx": 0,
  "vision.capture.quality": 95,
  "vision.capture.width": 1280,
  "zoom": 1.0
}