openapi: 3.1.0
info:
  title: User Actions API
  version: '1.3'
  description: 'User Actions API bridges your app server and Swit, processing user commands and UI interactions, and prompting appropriate server requests. Its variety of response types enables you to create a dynamic and responsive UI, delivering interactive, real-time experiences.'
  termsOfService: 'https://swit.io/privacy?sub=api-term'
  contact:
    name: Swit User & Developer Support
    url: 'https://help.swit.io/?support=true'
    email: help@swit.io
  license:
    name: Apache 2.0
    identifier: Apache-2.0
servers:
  - url: 'https://{host}'
    description: Developer's app server
    variables:
      host:
        default: developer-app-server.com
tags:
  - name: User action triggers
    description: description
  - name: User action callbacks
    description: description
  - name: Views
    description: description
  - name: View elements
    description: description
  - name: View element components
    description: description
  - name: Resources
    description: description
  - name: Resource components
    description: description
paths:
  '/{app-server-path}':
    post:
      summary: User actions
      description: 'Upon a user action in your app within Swit, a relevant request is sent to your app server''s designated path. The server''s response drives the next app behavior, facilitating dynamic interactions based on user activities.'
      operationId: useraction.request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActionTrigger'
      responses:
        '200':
          description: 'Upon receiving a user action, your app server can respond with one of the following distinct callback types, facilitating dynamic app interactions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CallbackViews'
                  - $ref: '#/components/schemas/CallbackAttachments'
                  - $ref: '#/components/schemas/CallbackBot'
                  - $ref: '#/components/schemas/CallbackSettings'
                  - $ref: '#/components/schemas/CallbackSuggestions'
    parameters:
      - schema:
          type: string
        name: app-server-path
        in: path
        required: true
        description: The specific endpoint on your app server that will handle incoming requests from Swit. It's the designated route where user actions are received and processed.
components:
  schemas:
    UserActionTrigger:
      title: User action request
      type: object
      x-tags:
        - User action triggers
      description: This object represents the user action triggering the request.
      properties:
        platform:
          enum:
            - Desktop
            - iOS
            - Android
          type: string
          description: The type of the Swit client app from which the request was made.
        time:
          type: string
          format: date-time
          description: 'The precise moment, in UTC, when the request was made.'
          example: '2023-01-16T08:08:12.347183Z'
        app_id:
          type: string
          description: The ID of your app.
          example: 2301091200456vSarnqH
        user_info:
          type: object
          description: 'Provides the app server with secure identification of the user. While most parameters are client-appended, this data is server-appended for enhanced security against unauthorized impersonation.'
          properties:
            user_id:
              type: string
              description: The ID of the user who performed the action.
              example: 211025062560znxzWI3
            organization_id:
              type: string
              description: The ID of the organization the user belongs to.
              example: 211025062160r0FxU8y
          required:
            - user_id
        user_preferences:
          description: 'The preferences of the Swit client app on which the user action was performed. Based on this info, you can tailor the subsequent UI view to the client app settings.'
          type: object
          required:
            - language
            - time_zone_offset
            - color_theme
          properties:
            language:
              enum:
                - en
                - ko
              type: string
              description: The language setting of the client app.
              example: ko
            time_zone_offset:
              type: string
              format: time-offset
              example: '+0900'
              description: The time zone setting of the client app.
            color_theme:
              type: string
              enum:
                - light
                - dark
              description: The color theme of the client app.
        context:
          type: object
          description: The location in which the request was made.
          properties:
            workspace_id:
              type: string
              description: |
                The ID of the current workspace. Provided when `user_action.type` is one of the following:
                - `user_commands.extensions:chat`
                - `user_commands.extensions:chat_commenting`
                - `user_commands.context_menus:message`
                - `user_commands.context_menus:message_comment`
                - `user_commands.context_menus:task`
                - `view_actions.drop`
              example: 220318163840UVCAkuZ
            channel_id:
              type: string
              description: |
                The ID of the current channel. Provided when `user_action.type` is one of the following:
                - `user_commands.extensions:chat`
                - `user_commands.extensions:chat_commenting`
                - `user_commands.context_menus:message`
                - `user_commands.context_menus:message_comment`
                - `view_actions.drop`
              example: 220319082780j5qkr15
            project_id:
              type: string
              description: |
                The ID of the current project. Provided when `user_action.type` is one of the following:
                - `user_commands.extensions:task`
                - `user_commands.context_menus:task`
              example: 220626100212677TFKW
            task_id:
              type: string
              description: |
                The ID of the current task. Provided when `user_action.type` is one of the following:
                - `user_commands.extensions:task`
                - `user_commands.context_menus:task`
              example: 2311090618555579FYFN
        user_action:
          type: object
          description: The user action details.
          required:
            - type
          properties:
            type:
              enum:
                - right_panel_open
                - presence_sync
                - 'user_commands.extensions:chat'
                - 'user_commands.extensions:chat_commenting'
                - 'user_commands.extensions:task'
                - 'user_commands.context_menus:message'
                - 'user_commands.context_menus:message_comment'
                - 'user_commands.context_menus:task'
                - view_actions.drop
                - view_actions.input
                - view_actions.submit
                - view_actions.query
                - view_actions.oauth_complete
              type: string
              description: |-
                The type of the user action.
                - `right_panel_open`: Your app was launched in the right panel.
                - `presence_sync`: A change to the user presence sync setting was requested. The message's details are provided via `user_action.resource`.
                - `user_commands.extensions:chat`: A user command was executed from a channel's message editor, either through a slash command or by clicking the + button.
                - `user_commands.extensions:chat_commenting`: A user command was executed from a channel's message comment editor, either through a slash command or by clicking the + button.
                - `user_commands.extensions:task`: A user command was executed from a task's attachments section by clicking the + button.
                - `user_commands.context_menus:message`: A user command was executed from a message's context menu. The message's details are provided via `user_action.resource`.
                - `user_commands.context_menus:message_comment`: A user command was executed from a message comment's context menu. The message's details are provided via `user_action.resource`.
                - `user_commands.context_menus:task`: A user command was executed from a task's context menu. The task's details are provided via `user_action.resource`.
                - `view_actions.drop`: An item was dragged from the right panel and dropped onto the main section.
                - `view_actions.submit`: An element with `action_id` was clicked.
                - `view_actions.query`: A query keyword was entered in a `Select` element when `SelectQuery.query server` was set to `true`.
                - `view_actions.input`: A value was entered in an element with `trigger_on_input`.
                - `view_actions.oauth_complete`: The popup from [StaticAction](/docs/user-actions/ref/schemas/static-action) with `action_type=open_oauth_popup` was closed.
              example: 'user_commands.extensions:chat'
            id:
              type: string
              description: The command ID or action ID of the user action.
              example: slash1
            slash_command:
              type: string
              description: The slash command line in the case this user action was executed via a slash command.
              example: '/slash1 Hello'
            resource:
              oneOf:
                - $ref: '#/components/schemas/ResourceMessage'
                - $ref: '#/components/schemas/ResourceMessageComment'
                - $ref: '#/components/schemas/ResourceTask'
                - $ref: '#/components/schemas/ResourceSettingsPresenceSync'
                - $ref: '#/components/schemas/ResourceQuery'
              description: |
                The additional data for your app server to process when handling a user action of one of the following types:
                - `presence_sync`
                - `user_commands.context_menus:message`
                - `user_commands.context_menus:message_comment`
                - `user_commands.context_menus:task`
                - `view_actions.query`
        current_view:
          oneOf:
            - $ref: '#/components/schemas/View'
            - $ref: '#/components/schemas/AttachmentView'
      required:
        - platform
        - time
        - app_id
        - user_preferences
        - user_action
    CallbackViews:
      title: User action callback - views
      type: object
      x-tags:
        - User action callbacks
      description: This callback governs the creation or modification of a UI view in different contexts - modals or the right panel.
      properties:
        callback_type:
          enum:
            - views.update
            - views.initialize
            - views.open
            - views.push
            - views.close
          type: string
          description: |-
            The type of operation to be performed on the UI view. The operations simulate two types of behaviors: modal-like and stack-like (for the right panel).
            - `views.update`: Modify the specified view.
            - `views.initialize`: Refresh the specified view and remove all previously pushed views in the right panel.
            - `views.open`: Launch a new modal view.
            - `views.push`: Add a new view on top of the existing view in the right panel, creating a stack-like structure.
            - `views.close`: Terminate the specified modal view.
        new_view:
          $ref: '#/components/schemas/View'
        reference_view_id:
          type: string
          description: 'The identifier for the view to be targeted. Required when `callback_type=view.update`, `callback_type=view.close`, or `callback_type=views.initialize`. If omitted, the topmost view is selected.'
      required:
        - callback_type
    CallbackAttachments:
      title: User action callback - attachments
      description: 'This callback enables sharing an attachment to a specified location. As this callback prompts user confirmation, no unique user token is needed to post the data on behalf of the user.'
      type: object
      x-tags:
        - User action callbacks
      properties:
        callback_type:
          enum:
            - attachments.share.channel
            - attachments.share.new_task
            - attachments.share.existing_task
          type: string
          description: |
            Specifies the sharing destination of the attachment.
            
            - `attachments.share.channel`: Create a message with the attachment in the user-selected channel.
            - `attachments.share.new_task`: Create a task with the attachment in the user-selected project.
            - `attachments.share.existing_task`: Add the attachment to an existing task.
        attachments:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/AttachmentView'
        destination_hint:
          type: object
          description: | 
            Provides the user with preselected destinations for sharing the attachment. Based on the callback type, use the appropriate properties.
            
            - `attachments.share.channel`: If a valid `workspace_id` is provided, it leads to the preselection of the workspace. If both a valid `workspace_id` and a valid `channel_id` are provided, then both the workspace and channel are preselected.
            - `attachments.share.new_task`: If a valid `workspace_id` is provided, it leads to the preselection of the workspace. If both a valid `workspace_id` and a valid `project_id` are provided, then both the workspace and project are preselected.
            - `attachments.share.existing_task`: If a valid `workspace_id` is provided, it leads to the preselection of the workspace. If both a valid `workspace_id` and a valid `project_id` are provided, then both the workspace and project are preselected. If a valid `workspace_id`, `project_id`, and `task_id` are provided, then all three are preselected.
          properties:
            workspace_id:
              type: string
              example: 220318163840UVCAkuZ
              description: The ID of the workspace where the attachment is shared.
            channel_id:
              type: string
              example: 220319082780j5qkr15
              description: The ID of the channel where the attachment is shared.
            project_id:
              type: string
              example: 220626100212677TFKW
              description: The ID of the project where the attachment is shared.
            task_id:
              type: string
              example: 2311090618555579FYFN
              description: The ID of the task where the attachment is shared.
      required:
        - callback_type
        - attachments
    CallbackBot:
      title: User action callback - bot
      description: This callback governs the behavior of the bot user associated with your app.
      type: object
      x-tags:
        - User action callbacks
      properties:
        callback_type:
          enum:
            - bot.invite_prompt
          type: string
          description: 'Specifies the action to be performed by the bot user. Currently, it can prompt the user to invite the bot to a specific channel or project.'
        destination:
          type: object
          required:
            - type
            - id
          properties:
            type:
              enum:
                - channel
                - project
              type: string
            id:
              type: string
      required:
        - callback_type
        - destination
    CallbackSuggestions:
      title: User action callback - suggestions
      description: This callback is used for user action requests where `user_action.type=view_actions.query`. It provides query results based on user input.
      type: object
      x-tags:
        - User action callbacks
      properties:
        callback_type:
          enum:
            - query.suggestions
          type: string
          description: The type of operation to be performed as a response to a search query made by the user.
        result:
          type: object
          properties:
            options:
              type: array
              maxItems: 50
              items:
                $ref: '#/components/schemas/Option'
              description: An array of selectable items. When passed with `no_options_reason`, this is ignored.
            option_groups:
              type: array
              description: An array of labeled groups, each containing selectable items. When passed with `options` or `no_options_reason`, this is ignored.
              maxItems: 10
              items:
                type: object
                title: OptionGroup
                properties:
                  label:
                    type: string
                    description: The heading, or category title, for the group of options it encompasses.
                  options:
                    type: array
                    maxItems: 50
                    description: Each group's array of selectable items.
                    items:
                      $ref: '#/components/schemas/Option'
                required:
                  - label
                  - options
            no_options_reason:
              type: object
              description: Used to indicate the absence of search results. This takes precedence over `options` and `option_groups` if they're passed together.
              properties:
                message:
                  type: string
                  description: An explanatory message to display why no search results are returned.
                  example: No results found
              required:
                - message
    CallbackSettings:
      title: User action callback - settings
      description: This callback represents the developer's app server response to a settings change request from the Swit client app.
      type: object
      x-tags:
        - User action callbacks
      properties:
        callback_type:
          type: string
          enum:
            - settings.update
          description: The type of settings operation performed.
        result:
          type: object
          required:
            - success
          properties:
            success:
              type: boolean
              description: Indicates if the settings update was successful.
            error_message:
              type: string
              description: The error message to display in a modal if the update was unsuccessful (`success=false`).
      required:
        - callback_type
        - result
    View:
      title: View
      type: object
      x-tags:
        - Views
      description: 'Defines the structure of a view with customizable sections—header, body, and footer.'
      properties:
        view_id:
          type: string
          description: 'A unique ID for the view, specified by your app server. This value can be used to refer to this view when updating or closing it via a subsequent response from your app server.'
          example: test_modal
        state:
          type: string
          description: 'Stores a string value persisting stateful user information. This value is included in subsequent user action requests from the current view via the `current_view` parameter. For more details on how to use the `state` parameter effectively, see the [Using the `state` parameter](/docs/user-actions/2z2ie21lcala4-using-the-state-parameter) guide.'
        header:
          type: object
          description: Holds the properties of the header section.
          required:
            - title
          properties:
            title:
              type: string
              description: The title displayed in the header.
            subtitle:
              type: string
              description: The subtitle displayed in the header.
            context_menu:
              type: array
              maxItems: 30
              description: A list of `SelectItem` objects appearing when the user opens the context menu.
              items:
                $ref: '#/components/schemas/SelectItem'
            buttons:
              type: array
              maxItems: 1
              description: 'A list of `Button` objects in the header. Note that in the header, the `icon` field is used instead of `label`.'
              items:
                $ref: '#/components/schemas/Button'
        footer:
          type: object
          description: Contains buttons displayed in the footer.
          properties:
            buttons:
              type: array
              maxItems: 2
              description: A list of `Button` objects in the footer.
              items:
                $ref: '#/components/schemas/Button'
        body:
          type: object
          description: Houses various elements displayed in the body.
          required:
            - elements
          properties:
            elements:
              type: array
              maxItems: 100
              description: A list of different types of objects displayed in the body.
              items:
                oneOf:
                  - $ref: '#/components/schemas/TextParagraph'
                  - $ref: '#/components/schemas/Divider'
                  - $ref: '#/components/schemas/File'
                  - $ref: '#/components/schemas/Image'
                  - $ref: '#/components/schemas/ImageGrid'
                  - $ref: '#/components/schemas/InteractiveImage'
                  - $ref: '#/components/schemas/InfoCard'
                  - $ref: '#/components/schemas/CollectionEntry'
                  - $ref: '#/components/schemas/Tabs'
                  - $ref: '#/components/schemas/TextInput'
                  - $ref: '#/components/schemas/Textarea'
                  - $ref: '#/components/schemas/Select'
                  - $ref: '#/components/schemas/DatePicker'
                  - $ref: '#/components/schemas/Button'
                  - $ref: '#/components/schemas/Container'
                  - $ref: '#/components/schemas/HtmlFrame'
                  - $ref: '#/components/schemas/SignInPage'
      required:
        - header
        - body
    AttachmentView:
      title: Attachment View
      type: object
      x-tags:
        - Views
      description: 'Defines the structure of an attachment view with customizable sections—header, body, and footer—similar to a standard view but designed specifically for attachments.'
      properties:
        state:
          type: string
          description: 'Stores a string value persisting stateful user information. This value is included in subsequent user action requests from the current view via the `current_view` parameter. For more details on how to use the `state` parameter effectively, see the [Using the `state` parameter](/docs/user-actions/2z2ie21lcala4-using-the-state-parameter) guide.'
        header:
          type: object
          description: Holds the properties of the header section.
          required:
            - title
            - app_id
          properties:
            title:
              type: string
              description: The title displayed in the header.
            subtitle:
              type: string
              description: The subtitle displayed in the header.
            app_id:
              type: string
              description: The ID of your app. This ID is used to display your app's icon in the attachment.
            icon:
              $ref: '#/components/schemas/Image'
              description: The icon to display in the header. If not passed, the app icon registered in the Developer Console will appear.
        footer:
          type: object
          description: Contains buttons displayed in the footer.
          properties:
            buttons:
              type: array
              maxItems: 2
              description: A list of `Button` objects in the footer.
              items:
                $ref: '#/components/schemas/Button'
        body:
          type: object
          description: Houses various elements displayed in the body.
          required:
            - elements
          properties:
            elements:
              type: array
              maxItems: 30
              description: A list of different types of objects displayed in the body.
              items:
                oneOf:
                  - $ref: '#/components/schemas/TextParagraph'
                  - $ref: '#/components/schemas/Divider'
                  - $ref: '#/components/schemas/File'
                  - $ref: '#/components/schemas/Image'
                  - $ref: '#/components/schemas/InteractiveImage'
                  - $ref: '#/components/schemas/InfoCard'
                  - $ref: '#/components/schemas/CollectionEntry'
      required:
        - header
        - body
    TextParagraph:
      title: Text Paragraph
      x-tags:
        - View elements
      description: |
        An element representing a text paragraph.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          type: string
          description: Type of the element.
          enum:
            - text
        content:
          type: string
          description: The content of the text paragraph.
          example: Swit is where the magic happens.
        markdown:
          type: boolean
          default: false
          description: A boolean that determines the format of the content (either markdown or plaintext).
        style:
          type: object
          description: An object that may contain styling properties depending on its usage within another element.
      required:
        - type
        - content
    Divider:
      title: Divider
      type: object
      x-tags:
        - View elements
      description: An element representing a horizontal divider.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          type: string
          description: Type of the element.
          enum:
            - divider
      required:
        - type
    File:
      title: File
      type: object
      x-tags:
        - View elements
      description: An element representing a file item.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          type: string
          description: Type of the element.
          enum:
            - file
        file_type:
          description: A string that determines the icon of the file element.
          $ref: '#/components/schemas/ResourceComponentFileType'
        file_size:
          type: number
          description: An integer that represents the number of bytes of the file.
          example: 35600
        file_name:
          type: string
          description: Name of the file.
          example: membership.csv
        action_id:
          $ref: '#/components/schemas/ActionId'
        static_action:
          $ref: '#/components/schemas/StaticAction'
      required:
        - type
        - file_name
    InteractiveImage:
      title: InteractiveImage
      type: object
      x-tags:
        - View elements
      description: An element representing an embedded image with interactivity capabilities such as triggering actions upon user actions.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          type: string
          description: Type of the element.
          enum:
            - interactive_image
        image_url:
          type: string
          format: uri
          example: 'https://swit.io/assets/images/home/features/device'
          description: The URL of the image.
        alt:
          type: string
          example: image test
          description: The alternative text that appears instead of an image when the image does not load due to issues like a network connection error or broken link.
        action_id:
          $ref: '#/components/schemas/ActionId'
        static_action:
          $ref: '#/components/schemas/StaticAction'
        draggable:
          $ref: '#/components/schemas/Draggable'
      required:
        - type
        - image_url
    InfoCard:
      title: Info card
      type: object
      x-tags:
        - View elements
      description: An element representing an info card.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          type: string
          description: Type of the element.
          enum:
            - info_card
        items:
          type: array
          description: List of label-value pairs.
          maxItems: 30
          minItems: 1
          items:
            type: object
            properties:
              label:
                type: string
                description: Label in the left column.
                example: Description
              text:
                $ref: '#/components/schemas/TextParagraph'
                description: Value in the right column.
            required:
              - label
              - text
        action_id:
          $ref: '#/components/schemas/ActionId'
        draggable:
          $ref: '#/components/schemas/Draggable'
      required:
        - type
        - items
    CollectionEntry:
      title: Collection entry
      type: object
      x-tags:
        - View elements
      description: An element representing a collection entry. An itemized list can be assembled by arranging multiple instances of this element.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          type: string
          description: Type of the element.
          enum:
            - collection_entry
        text_sections:
          type: array
          minItems: 1
          maxItems: 3
          description: An array of text sections in the body of the collection entry.
          items:
            type: object
            properties:
              text:
                description: The text content of a text section.
                allOf:
                  - $ref: '#/components/schemas/TextParagraph'
                  - type: object
                    properties:
                      style:
                        type: object
                        description: Ignored if `markdown=true`.
                        properties:
                          bold:
                            type: boolean
                            default: false
                            description: Set to `true` to make the text bold.
                            example: true
                          color:
                            type: string
                            default: gray900
                            description: The color of the text.
                            enum:
                              - gray900
                              - gray800
                              - gray700
                            example: gray800
                          size:
                            type: string
                            default: medium
                            description: The font size of the text.
                            enum:
                              - medium
                              - large
                            example: large
                          max_lines:
                            type: integer
                            description: 'The maximum number of lines to display. If `0`, no truncation.'
                            maximum: 2
                            minimum: 0
                            default: 0
                            example: 1
              metadata_items:
                type: array
                maxItems: 4
                description: Array of metadata elements that can be displayed next to the text.
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Tag'
                    - $ref: '#/components/schemas/Subtext'
                    - $ref: '#/components/schemas/Image'
        start_section:
          description: The image to be displayed in the start section.
          allOf:
            - $ref: '#/components/schemas/Image'
            - type: object
              properties:
                style:
                  type: object
                  description: The style properties for the image in the start section.
                  properties:
                    size:
                      $ref: '#/components/schemas/ComponentSize'
        vertical_alignment:
          type: string
          description: Specifies the vertical alignment of the content within the collection entry.
          enum:
            - top
            - middle
            - bottom
          default: top
          example: middle
        background:
          type: object
          properties:
            color:
              type: string
              enum:
                - none
                - lightblue
              default: none
        action_id:
          $ref: '#/components/schemas/ActionId'
        static_action:
          $ref: '#/components/schemas/StaticAction'
        draggable:
          $ref: '#/components/schemas/Draggable'
      required:
        - type
        - text_sections
    Tabs:
      title: Tabs
      type: object
      x-tags:
        - View elements
      description: An element representing an array of tabs.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          enum:
            - tabs
          type: string
          description: Type of the element.
        tabs:
          type: array
          description: An array of tabs.
          minItems: 1
          maxItems: 30
          items:
            $ref: '#/components/schemas/SelectItem'
        value:
          type: string
          description: The `action_id` of the currently selected tab.
      required:
        - type
        - tabs
    TextInput:
      title: Text input
      type: object
      x-tags:
        - View elements
      description: An element representing a text input field.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          enum:
            - text_input
          type: string
          description: Type of the element.
        trigger_on_input:
          type: boolean
          description: 'If `true`, pressing the **Enter** key with a value input triggers a user action request to your app server.'
          default: false
        action_id:
          $ref: '#/components/schemas/ActionId'
        placeholder:
          type: string
          description: A placeholder string for the text input field.
          example: Task name
        value:
          type: string
          description: The text value entered in the field.
          example: December release notes
      required:
        - type
    Textarea:
      title: Textarea
      type: object
      x-tags:
        - View elements
      description: An element representing a multiline text input field.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          enum:
            - textarea
          type: string
          description: Type of the element.
        action_id:
          $ref: '#/components/schemas/ActionId'
        placeholder:
          type: string
          description: A placeholder string for the text input field.
          example: Provide a detailed description for this task
        value:
          type: string
          description: The text value entered in the field.
          example: Fixed minor bugs.
        height:
          type: string
          enum:
            - small
            - medium
            - large
          default: small
          description: The height of the text area.
        disabled:
          type: boolean
          default: false
      required:
        - type
    DatePicker:
      title: Datepicker
      type: object
      x-tags:
        - View elements
      description: An element representing a datepicker field.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          enum:
            - datepicker
          type: string
          description: Type of the element.
        placeholder:
          type: string
          description: A placeholder string for the datepicker field.
        trigger_on_input:
          type: boolean
          description: 'If `true`, selecting a date triggers a user action request to your app server.'
          default: false
        action_id:
          $ref: '#/components/schemas/ActionId'
        value:
          type: string
          description: The date value entered in the field.
          example: '2022-11-23T00:00:00.000Z'
      required:
        - type
    Button:
      title: Button
      description: An element representing a button.
      x-tags:
        - View elements
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          enum:
            - button
          type: string
          description: Type of the element.
        label:
          type: string
          description: A label string for the button.
          example: Click
        style:
          type: string
          description: Visual style for the button.
          enum:
            - primary
            - secondary
            - primary_filled
            - danger_filled
          default: secondary
        disabled:
          type: boolean
          description: 'Determines whether the button is disabled. If `true`, the button is not active.'
          default: false
        action_id:
          $ref: '#/components/schemas/ActionId'
        static_action:
          $ref: '#/components/schemas/StaticAction'
        icon:
          $ref: '#/components/schemas/Image'
          description: An Image object that replaces the label. Only applicable when this element is used in the header.
      required:
        - type
        - label
    Select:
      title: Select box
      type: object
      x-tags:
        - View elements
      description: An element representing a dropdown.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          enum:
            - select
          type: string
          description: Type of the element.
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
          description: An array of selectable items. When passed with `no_options_reason`, this is ignored.
        option_groups:
          type: array
          description: An array of labeled groups, each containing selectable items. When passed with `options` or `no_options_reason`, this is ignored.
          items:
            type: object
            title: OptionGroup
            properties:
              label:
                type: string
                description: The heading, or category title, for the group of options it encompasses.
              options:
                type: array
                description: Each group's array of selectable items.
                items:
                  $ref: '#/components/schemas/Option'
            required:
              - label
              - options
        no_options_reason:
          type: object
          description: Used to indicate the absence of search results. This takes precedence over `options` and `option_groups` if they're passed together.
          properties:
            message:
              type: string
              description: An explanatory message to display why no search results are returned.
              example: No results found
          required:
            - message
        placeholder:
          type: string
          description: A placeholder string for the dropdown.
        multiselect:
          type: boolean
          description: 'Determines whether multiple selections are allowed. If `true`, the `trigger_on_input` value is ignored.'
          default: false
        trigger_on_input:
          type: boolean
          description: 'If `true`, selecting an item from the dropdown triggers a user action request to your app server.'
          default: false
        value:
          type: array
          description: List of the selected options’ `action_id` values.
          items:
            type: string
        query:
          $ref: '#/components/schemas/SelectQuery'
        style:
          type: object
          description: The style properties for the dropdown.
          properties:
            variant:
              $ref: '#/components/schemas/ComponentVariant'
      required:
        - type
    Container:
      title: Container
      type: object
      x-tags:
        - View elements
      description: 'A container for placing multiple elements like buttons, datepickers, and dropdowns in a single horizontal row.'
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          enum:
            - container
          type: string
          description: Type of the element.
        elements:
          type: array
          description: The elements to include in the container.
          maxItems: 8
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/Button'
              - $ref: '#/components/schemas/DatePicker'
              - $ref: '#/components/schemas/Select'
    ImageGrid:
      title: ImageGrid
      type: object
      x-tags:
        - View elements
      description: A grid of images with each row containing up to 3 images.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        column_count:
          type: integer
          description: The number of images displayed in a single row.
          example: 2
          minimum: 2
          maximum: 3
        type:
          type: string
          description: Type of the element.
          enum:
            - image_grid
        images:
          type: array
          maxItems: 48
          minItems: 1
          description: An array of InteractiveImage objects organized into a grid structure.
          items:
            $ref: '#/components/schemas/InteractiveImage'
      required:
        - column_count
        - type
        - images
    HtmlFrame:
      title: HTML Frame
      type: object
      x-tags:
        - View elements
      description: |
        An element to render custom HTML content in the view.
        > On mobile, using this element together with other elements in the same view may lead to unexpected changes in the height of this element.
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          type: string
          description: Type of the element.
          enum:
            - html_frame
        html_content:
          type: string
          description: The HTML content to be displayed in the frame.
          example: <b>Hello world!</b>
      required:
        - type
        - html_content
    SignInPage:
      title: Sign-in Page
      description: |
        An element to render a sign-in page. It's uniquely tailored to facilitate the representation of an integration between Swit and a third-party service.
        > On mobile, using this element together with other elements in the same view may lead to unexpected changes in the height of this element.
      type: object
      x-tags:
        - View elements
      properties:
        id:
          $ref: '#/components/schemas/ElementId'
        type:
          type: string
          description: Type of the element.
          enum:
            - sign_in_page
          example: sign_in_page
        integrated_service:
          type: object
          description: Information about the partner service to be integrated with Swit.
          required:
            - icon
          properties:
            icon:
              $ref: '#/components/schemas/Image'
              description: Icon image representing the partner service.
        title:
          type: string
          description: Title text displayed on the sign-in page.
          example: Connect to Google Calendar
        description:
          type: string
          description: Additional descriptive or subtitle text displayed on the sign-in page providing context about the integration.
          example: Integrate your Google Calendar to manage events and tasks within Swit.
        button:
          $ref: '#/components/schemas/Button'
          description: A button that triggers the OAuth or another type of sign-in process for the integrated service.
      required:
        - type
        - integrated_service
        - title
        - description
        - button
    SelectItem:
      type: object
      x-tags:
        - View element components
      title: Select item
      description: 'A reusable object that represents an item that can be selected. It is used across various components like `View`, `AttachmentView`, `Tabs`, and `Select`.'
      properties:
        label:
          type: string
          description: A label string for the selectable item.
          example: Channels
        action_id:
          $ref: '#/components/schemas/ActionId'
        static_action:
          $ref: '#/components/schemas/StaticAction'
      required:
        - label
    Option:
      type: object
      x-tags:
        - View element components
      title: Option
      description: Select Option
      properties:
        label:
          type: string
          description: A label string for the selectable item.
        action_id:
          $ref: '#/components/schemas/ActionId'
        static_action:
          $ref: '#/components/schemas/StaticAction'
        icon:
          $ref: '#/components/schemas/Image'
        tag:
          $ref: '#/components/schemas/Tag'
      required:
        - label
    Image:
      title: Image
      type: object
      x-tags:
        - View element components
      description: A reusable object that represents an image embedded in an element.
      properties:
        type:
          type: string
          description: Type of the element.
          enum:
            - image
        image_url:
          type: string
          format: uri
          example: 'https://swit.io/assets/images/home/features/device'
          description: The URL of the image.
        alt:
          type: string
          example: image test
          description: The alternative text that appears instead of an image when the image does not load due to issues like a network connection error or broken link.
      required:
        - type
        - image_url
    ActionId:
      title: Action ID
      x-tags:
        - View element components
      type: string
      description: A unique identifier for an action related to the element. This ID is used by your app server to identify user actions.
      example: action_01
    StaticAction:
      type: object
      x-tags:
        - View element components
      title: Static action
      description: Defines an action that does not require any server-side processing. These actions are executed locally in the Swit app.
      oneOf:
        - $ref: '#/components/schemas/OpenOauthPopup'
        - $ref: '#/components/schemas/OpenLink'
        - $ref: '#/components/schemas/CloseView'
        - $ref: '#/components/schemas/WriteToClipboard'
    SelectQuery:
      type: object
      x-tags:
        - View element components
      title: SelectQuery
      description: This component introduces a search field to the `Select` element, allowing for dynamic filtering or querying.
      properties:
        query_server:
          type: boolean
          description: Determines the behavior of the search functionality. If set to true, the `Select` element queries the server for options based on user input. If false, it filters through the current set of options locally.
          default: true
          example: true
        disabled:
          type: boolean
          description: If set to true, the search field is disabled; if false, the search functionality is enabled.
          default: false
          example: false
        placeholder:
          type: string
          description: A placeholder text for the search field.
          example: Search by member name
        value:
          type: string
          description: The current text input in the search field.
          example: value
        action_id:
          $ref: '#/components/schemas/ActionId'
      required:
        - query_server
    Draggable:
      type: boolean
      title: Draggable
      description: 'Determines whether the element can be dragged and dropped onto channels when in a right panel view. When set to `true`, dropping this element triggers a user action request of type `view_actions.drop`.'
      x-tags:
        - View element components
      default: false
    Tag:
      title: Tag
      description: Represents a tag used as metadata for the element.
      x-tags:
        - View element components
      type: object
      properties:
        type:
          type: string
          enum:
            - tag
          description: Specifies that the metadata item is a tag.
          example: tag
        content:
          type: string
          description: The content of the tag.
          example: Urgent
        style:
          type: object
          description: The style properties for the tag.
          properties:
            color:
              $ref: '#/components/schemas/ComponentColor'
            shape:
              $ref: '#/components/schemas/ComponentShape'
      required:
        - type
        - content
    Subtext:
      title: Subtext
      description: Defines the subtext to be displayed as a metadata item for the element.
      type: object
      x-tags:
        - View element components
      properties:
        type:
          type: string
          enum:
            - subtext
          description: Specifies that the metadata item is a subtext.
          example: subtext
        content:
          type: string
          description: The content of the subtext.
          example: Due today
      required:
        - type
        - content
    ElementId:
      title: Element ID
      type: string
      x-tags:
        - View element components
      example: 2304091307102bfBd2i
      writeOnly: true
      description: Auto-generated ID of the element added by Swit's backend server. Developers should not provide or modify this value.
    ComponentSize:
      title: Component size
      description: Size of the component.
      type: string
      x-tags:
        - View element components
      enum:
        - xsmall
        - small
        - medium
        - large
        - xlarge
      default: medium
    ComponentColor:
      title: Component color
      description: |-
        Color of the component.
        - `primary`: blue
        - `secondary`: gray
        - `danger`: red
      enum:
        - primary
        - secondary
        - danger
      type: string
      x-tags:
        - View element components
      default: secondary
    ComponentVariant:
      title: Component variant
      type: string
      x-tags:
        - View element components
      description: Represents the visual style or appearance of the component.
      enum:
        - filled
        - outlined
        - ghost
      default: outlined
    ComponentShape:
      title: Component shape
      description: Shape of the component.
      type: string
      x-tags:
        - View element components
      enum:
        - rectangular
        - rounded
      default: rectangular
    OpenLink:
      title: OpenLink
      description: Open a new browser tab with the URL provided in link_url.
      type: object
      x-tags:
        - View element components
      properties:
        action_type:
          type: string
          enum:
            - open_link
          description: The action performed by this component.
          example: open_link
        link_url:
          type: string
          description: The URL to be opened in a new browser tab.
          example: 'https://example.com'
    OpenOauthPopup:
      title: OpenOauthPopup
      description: |
        Open a popup with the URL provided in link_url. When the popup is closed, it triggers a user action request which includes your specified `action_id` in the same element.
        
        **Cautions:**

        1. Ensure that an `action_id` is included with this object within the element. This is crucial for your server to correctly identify the user action request.
        1. This object is only compatible in a `View` context, and not in an `AttachmentView`."
      type: object
      x-tags:
        - View element components
      properties:
        action_type:
          type: string
          enum:
            - open_oauth_popup
          example: open_oauth_popup
          description: The action performed by this component.
        link_url:
          type: string
          description: The URL to be opened in a popup window.
          example: 'https://example.com'
    CloseView:
      title: CloseView
      description: Close the current view.
      type: object
      x-tags:
        - View element components
      properties:
        action_type:
          type: string
          enum:
            - close_view
          description: The action performed by this component.
          example: close_view
    WriteToClipboard:
      title: WriteToClipboard
      description: This component enables copying specified content directly to the user's clipboard.
      type: object
      x-tags:
        - View element components
      properties:
        action_type:
          type: string
          enum:
            - write_to_clipboard
          description: The action performed by this component.
          example: write_to_clipboard
        content:
          type: string
          description: The content to be copied to the clipboard.
          example: This is a channel to discuss the new product launch.
    ResourceMessage:
      title: Resource - Message
      allOf:
        - type: object
          properties:
            resource_type:
              type: string
              enum:
                - message
              description: Type of the resource.
          required:
            - resource_type
        - $ref: '#/components/schemas/ResourceComponentPostBase'
      x-tags:
        - Resources
      description: 'The details of the selected comment, which are added when `user_action.type=user_commands.context_menus:message`.'
    ResourceQuery:
      title: Resource - Query
      type: object
      x-tags:
        - Resources
      description: This parameter contains the search query input by the user.
      properties:
        resource_type:
          type: string
          enum:
            - query
          description: Type of the resource.
        value:
          type: string
          description: The query keyword input by the user.
          example: keyword
      required:
        - resource_type
        - value
    ResourceMessageComment:
      title: Resource - MessageComment
      allOf:
        - type: object
          properties:
            resource_type:
              type: string
              enum:
                - message_comment
              description: Type of the resource.
          required:
            - resource_type
        - $ref: '#/components/schemas/ResourceComponentPostBase'
      x-tags:
        - Resources
      description: 'The details of the selected comment, which are added when `user_action.type=user_commands.context_menus:message_comment`.'
    ResourceTask:
      title: Resource - Task
      type: object
      properties:
        resource_type:
          type: string
          enum:
            - task
          description: Type of the resource.
        id:
          type: string
          description: The ID of the task.
          example: 23051106260551ZOVCPS
        parent_task_id:
          type: string
          description: The ID of the parent task.
          example: 200302045745598izpK
        created_at:
          type: string
          format: date-time
          example: '2022-07-07T12:41:18Z'
          description: The date and time at which the task was created.
        edited_at:
          type: string
          format: date-time
          example: '2022-07-08T07:22:18Z'
          description: The date and time at which the task was last edited.
        title:
          type: string
          description: The title of the task.
          example: Developers documentation
        period:
          description: The period of the task.
          type: object
          properties:
            start_time:
              type: string
              format: date-time
              description: The date and time at which the task begins.
              example: '2023-02-14T05:01:00.452591Z'
            due_time:
              type: string
              format: date-time
              description: The date and time at which the task is due.
              example: '2023-02-14T05:01:00.452591Z'
            include_time:
              type: boolean
              description: Whether or not time is included in the period.
              example: true
          required:
            - include_time
        priority:
          type: string
          enum:
            - highest
            - high
            - normal
            - low
            - lowest
          description: The priority of the task.
        color_label:
          type: string
          enum:
            - red
            - pink
            - orange
            - yellow
            - light_green
            - green
            - cyan
            - blue
            - navy
            - violet
            - gray
          description: The color label associated with the task.
        assignees:
          type: array
          description: The assignees of the task.
          items:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: The ID of the assignee.
                example: 220103011810x7bqTRZ
        collaborators:
          type: array
          description: The collaborators of the task.
          items:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: The ID of the collaborator.
                example: 220103011810x7bqTRZ
        status:
          type: object
          properties:
            id:
              type: string
              example: 220707214090V110qhk
              description: The ID of the status.
            name:
              type: string
              example: Done
              description: The name of the status.
            type:
              type: string
              enum:
                - not_started
                - in_progress
                - done
              description: The type of the status.
          required:
            - id
            - name
            - type
          description: The status of the task.
        bucket:
          type: object
          properties:
            id:
              type: string
              description: The ID of the project bucket.
              example: 230213021820Zc9NjbT
          required:
            - id
          description: The bucket the task is in.
      required:
        - resource_type
        - id
        - created_at
        - title
        - period
        - priority
        - assignees
        - collaborators
        - status
        - bucket
      x-tags:
        - Resources
      description: 'The details of the selected task, which are added when `user_action.type=user_commands.context_menus:task`.'
    ResourceSettingsPresenceSync:
      title: Resource - SettingsPresenceSync
      type: object
      x-tags:
        - Resources
      description: 'The details of the request to enable or disable presence synchronization, which are added when `user_action.type=presence_sync`.'
      properties:
        resource_type:
          type: string
          enum:
            - settings.presence_sync
          description: Type of the resource.
        settings:
          type: object
          description: The settings object containing the details of the presence synchronization to be updated.
          required:
            - presence_sync
          properties:
            presence_sync:
              type: boolean
              description: Whether to enable or disable presence synchronization.
      required:
        - resource_type
        - settings
    ResourceComponentFileType:
      title: ResourceComponent - FileType
      enum:
        - image
        - video
        - document
        - pdf
        - presentation
        - spreadsheet
        - archive
        - psd
        - ai
        - other
      type: string
      default: other
      description: A string representing the type of a file.
      x-tags:
        - Resource components
    ResourceComponentUser:
      type: object
      x-tags:
        - Resource components
      required:
        - id
        - name
        - type
      properties:
        id:
          type: string
          description: The ID of the user.
          example: 220103011810x7bqTRZ
        name:
          type: string
          description: The name of the user.
          example: Jane Kim
        type:
          type: string
          description: The type of the user.
          enum:
            - user
            - bot
            - webhook
    ResourceComponentPostBase:
      title: ResourceComponent - PostBase
      type: object
      x-tags:
        - Resource components
      properties:
        id:
          type: string
          description: The ID of the post.
          example: 23051106260551ZOVCPS
        created_at:
          type: string
          format: date-time
          example: '2022-07-07T12:41:18Z'
          description: The date and time at which the post was created.
        edited_at:
          type: string
          format: date-time
          example: '2022-07-08T07:22:18Z'
          description: The date and time at which the post was last edited.
        content:
          type: string
          description: The text content of the post.
          example: 'Hello, World!'
        content_formatted:
          type: object
          description: A JSON representation of the post content that includes additional formatting details.
          example:
            type: rich_text
            elements:
              - type: rt_section
                elements:
                  - type: rt_text
                    content: 'Hello, World!'
        attachments:
          description: List of data attachments to the post.
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of the attachment.
                enum:
                  - custom
                  - chat
                  - task
                  - mail
                  - calendar
                  - og
              values:
                type: array
                items:
                  type: object
                description: The contents of the attachment.
                example:
                  - header:
                      app_id: 221213015310hXj6FN8
                      title: This is a view title
                      subtitle: Add a subtitle if needed
                    body:
                      elements:
                        - type: divider
                        - type: divider
                    footer:
                      buttons:
                        - type: button
                          label: Close
                          style: primary_filled
                          static_action:
                            action_type: close_view
            required:
              - type
              - values
        files:
          type: array
          description: The files attached to the post.
          items:
            type: object
            properties:
              id:
                type: string
                description: The ID of the file.
                example: 230201154830gfEDZwq
              name:
                type: string
                description: The name of the file.
                example: docs.zip
              type:
                $ref: '#/components/schemas/ResourceComponentFileType'
                description: The type of the file.
                example: archive
              size:
                type: integer
                description: The size of the file.
                example: 44990
              path_url:
                type: string
                format: uri
                description: The url path of the file.
                example: 'https://files.swit.io/v2/workspace/23051207314820CV1G5Q/23052818234610U1D0AC/230528182346109YQHX2.zip'
              thumbnail_url:
                type: string
                format: uri
                description: The thumbnail of the file.
            required:
              - id
              - name
              - type
              - size
              - path_url
        creator:
          $ref: '#/components/schemas/ResourceComponentUser'
          description: The creator of the post.
      required:
        - id
        - created_at
        - content
        - creator
      description: 'This schema provides a base structure for the data associated with different types of posts, including messages and comments.'

