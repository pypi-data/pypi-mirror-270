# coding: utf-8

"""
    Claro API

    API for data ingestion

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from claroai.models.metadata import Metadata
from typing import Optional, Set
from typing_extensions import Self

class InteractionSchema(BaseModel):
    """
    InteractionSchema
    """ # noqa: E501
    interaction_id: StrictStr
    user_id: StrictStr
    thread_id: Optional[StrictStr] = None
    interacted_at: datetime
    created_at: datetime
    ingested_at: Optional[datetime] = None
    event_source: Optional[Any] = None
    event_producer_type: Optional[StrictStr] = None
    event_producer_name: Optional[StrictStr] = None
    content: StrictStr
    metadata: Optional[Metadata] = None
    tenant_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["interaction_id", "user_id", "thread_id", "interacted_at", "created_at", "ingested_at", "event_source", "event_producer_type", "event_producer_name", "content", "metadata", "tenant_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InteractionSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_source
        if self.event_source:
            _dict['event_source'] = self.event_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # set to None if thread_id (nullable) is None
        # and model_fields_set contains the field
        if self.thread_id is None and "thread_id" in self.model_fields_set:
            _dict['thread_id'] = None

        # set to None if ingested_at (nullable) is None
        # and model_fields_set contains the field
        if self.ingested_at is None and "ingested_at" in self.model_fields_set:
            _dict['ingested_at'] = None

        # set to None if event_source (nullable) is None
        # and model_fields_set contains the field
        if self.event_source is None and "event_source" in self.model_fields_set:
            _dict['event_source'] = None

        # set to None if event_producer_type (nullable) is None
        # and model_fields_set contains the field
        if self.event_producer_type is None and "event_producer_type" in self.model_fields_set:
            _dict['event_producer_type'] = None

        # set to None if event_producer_name (nullable) is None
        # and model_fields_set contains the field
        if self.event_producer_name is None and "event_producer_name" in self.model_fields_set:
            _dict['event_producer_name'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenant_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InteractionSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "interaction_id": obj.get("interaction_id"),
            "user_id": obj.get("user_id"),
            "thread_id": obj.get("thread_id"),
            "interacted_at": obj.get("interacted_at"),
            "created_at": obj.get("created_at"),
            "ingested_at": obj.get("ingested_at"),
            "event_source": AnyOf.from_dict(obj["event_source"]) if obj.get("event_source") is not None else None,
            "event_producer_type": obj.get("event_producer_type"),
            "event_producer_name": obj.get("event_producer_name"),
            "content": obj.get("content"),
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "tenant_id": obj.get("tenant_id")
        })
        return _obj


