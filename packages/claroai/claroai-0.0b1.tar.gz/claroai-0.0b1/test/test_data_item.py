# coding: utf-8

"""
    Claro API

    API for data ingestion

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from claroai.models.data_item import DataItem

class TestDataItem(unittest.TestCase):
    """DataItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataItem:
        """Test DataItem
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataItem`
        """
        model = DataItem()
        if include_optional:
            return DataItem(
                type = '',
                item = claroai.models.item.Item(
                    type = '', 
                    id = '', 
                    created_at = 56, 
                    updated_at = 56, 
                    source = claroai.models.conversation_source.ConversationSource(
                        type = '', 
                        id = '', 
                        author = claroai.models.author.Author(
                            id = '', 
                            type = '', 
                            name = '', 
                            email = '', ), 
                        body = '', ), 
                    conversation_parts = claroai.models.conversation_parts.ConversationParts(
                        type = '', 
                        conversation_parts = [
                            claroai.models.conversation.Conversation(
                                type = '', 
                                id = '', 
                                part_type = '', 
                                body = '', 
                                created_at = 56, 
                                updated_at = 56, 
                                notified_at = 56, 
                                assigned_to = '', 
                                author = claroai.models.author.Author(
                                    id = '', 
                                    type = '', 
                                    name = '', 
                                    email = '', ), 
                                attachments = [
                                    null
                                    ], 
                                external_id = '', 
                                redacted = True, )
                            ], 
                        total_count = 56, ), )
            )
        else:
            return DataItem(
                type = '',
                item = claroai.models.item.Item(
                    type = '', 
                    id = '', 
                    created_at = 56, 
                    updated_at = 56, 
                    source = claroai.models.conversation_source.ConversationSource(
                        type = '', 
                        id = '', 
                        author = claroai.models.author.Author(
                            id = '', 
                            type = '', 
                            name = '', 
                            email = '', ), 
                        body = '', ), 
                    conversation_parts = claroai.models.conversation_parts.ConversationParts(
                        type = '', 
                        conversation_parts = [
                            claroai.models.conversation.Conversation(
                                type = '', 
                                id = '', 
                                part_type = '', 
                                body = '', 
                                created_at = 56, 
                                updated_at = 56, 
                                notified_at = 56, 
                                assigned_to = '', 
                                author = claroai.models.author.Author(
                                    id = '', 
                                    type = '', 
                                    name = '', 
                                    email = '', ), 
                                attachments = [
                                    null
                                    ], 
                                external_id = '', 
                                redacted = True, )
                            ], 
                        total_count = 56, ), ),
        )
        """

    def testDataItem(self):
        """Test DataItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
