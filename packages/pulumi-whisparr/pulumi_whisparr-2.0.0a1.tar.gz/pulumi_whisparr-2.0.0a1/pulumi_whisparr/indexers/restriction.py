# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RestrictionArgs', 'Restriction']

@pulumi.input_type
class RestrictionArgs:
    def __init__(__self__, *,
                 ignored: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a Restriction resource.
        :param pulumi.Input[str] ignored: Ignored. Either one of 'required' or 'ignored' must be set.
        :param pulumi.Input[str] required: Required. Either one of 'required' or 'ignored' must be set.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        if ignored is not None:
            pulumi.set(__self__, "ignored", ignored)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def ignored(self) -> Optional[pulumi.Input[str]]:
        """
        Ignored. Either one of 'required' or 'ignored' must be set.
        """
        return pulumi.get(self, "ignored")

    @ignored.setter
    def ignored(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignored", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Either one of 'required' or 'ignored' must be set.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _RestrictionState:
    def __init__(__self__, *,
                 ignored: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering Restriction resources.
        :param pulumi.Input[str] ignored: Ignored. Either one of 'required' or 'ignored' must be set.
        :param pulumi.Input[str] required: Required. Either one of 'required' or 'ignored' must be set.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        if ignored is not None:
            pulumi.set(__self__, "ignored", ignored)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def ignored(self) -> Optional[pulumi.Input[str]]:
        """
        Ignored. Either one of 'required' or 'ignored' must be set.
        """
        return pulumi.get(self, "ignored")

    @ignored.setter
    def ignored(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignored", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Either one of 'required' or 'ignored' must be set.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


class Restriction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ignored: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        <!-- subcategory:Indexers -->Restriction resource.
        For more information refer to [Restriction](https://wiki.servarr.com/whisparr/settings#remote-path-restrictions) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_whisparr as whisparr

        example = whisparr.indexers.Restriction("example",
            ignored="string1",
            required="string2")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import whisparr:Indexers/restriction:Restriction example 10
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ignored: Ignored. Either one of 'required' or 'ignored' must be set.
        :param pulumi.Input[str] required: Required. Either one of 'required' or 'ignored' must be set.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RestrictionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Indexers -->Restriction resource.
        For more information refer to [Restriction](https://wiki.servarr.com/whisparr/settings#remote-path-restrictions) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_whisparr as whisparr

        example = whisparr.indexers.Restriction("example",
            ignored="string1",
            required="string2")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import whisparr:Indexers/restriction:Restriction example 10
        ```

        :param str resource_name: The name of the resource.
        :param RestrictionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestrictionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ignored: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestrictionArgs.__new__(RestrictionArgs)

            __props__.__dict__["ignored"] = ignored
            __props__.__dict__["required"] = required
            __props__.__dict__["tags"] = tags
        super(Restriction, __self__).__init__(
            'whisparr:Indexers/restriction:Restriction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ignored: Optional[pulumi.Input[str]] = None,
            required: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'Restriction':
        """
        Get an existing Restriction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ignored: Ignored. Either one of 'required' or 'ignored' must be set.
        :param pulumi.Input[str] required: Required. Either one of 'required' or 'ignored' must be set.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RestrictionState.__new__(_RestrictionState)

        __props__.__dict__["ignored"] = ignored
        __props__.__dict__["required"] = required
        __props__.__dict__["tags"] = tags
        return Restriction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ignored(self) -> pulumi.Output[str]:
        """
        Ignored. Either one of 'required' or 'ignored' must be set.
        """
        return pulumi.get(self, "ignored")

    @property
    @pulumi.getter
    def required(self) -> pulumi.Output[str]:
        """
        Required. Either one of 'required' or 'ignored' must be set.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

