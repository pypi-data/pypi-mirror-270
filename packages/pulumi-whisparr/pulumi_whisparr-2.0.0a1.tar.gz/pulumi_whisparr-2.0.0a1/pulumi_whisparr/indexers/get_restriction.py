# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRestrictionResult',
    'AwaitableGetRestrictionResult',
    'get_restriction',
    'get_restriction_output',
]

@pulumi.output_type
class GetRestrictionResult:
    """
    A collection of values returned by getRestriction.
    """
    def __init__(__self__, id=None, ignored=None, required=None, tags=None):
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if ignored and not isinstance(ignored, str):
            raise TypeError("Expected argument 'ignored' to be a str")
        pulumi.set(__self__, "ignored", ignored)
        if required and not isinstance(required, str):
            raise TypeError("Expected argument 'required' to be a str")
        pulumi.set(__self__, "required", required)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Restriction ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ignored(self) -> str:
        """
        Ignored.
        """
        return pulumi.get(self, "ignored")

    @property
    @pulumi.getter
    def required(self) -> str:
        """
        Required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetRestrictionResult(GetRestrictionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRestrictionResult(
            id=self.id,
            ignored=self.ignored,
            required=self.required,
            tags=self.tags)


def get_restriction(id: Optional[int] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRestrictionResult:
    """
    <!-- subcategory:Indexers -->Single Restriction.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_whisparr as whisparr

    example = whisparr.Indexers.get_restriction(id=3)
    ```


    :param int id: Restriction ID.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('whisparr:Indexers/getRestriction:getRestriction', __args__, opts=opts, typ=GetRestrictionResult).value

    return AwaitableGetRestrictionResult(
        id=pulumi.get(__ret__, 'id'),
        ignored=pulumi.get(__ret__, 'ignored'),
        required=pulumi.get(__ret__, 'required'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_restriction)
def get_restriction_output(id: Optional[pulumi.Input[int]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRestrictionResult]:
    """
    <!-- subcategory:Indexers -->Single Restriction.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_whisparr as whisparr

    example = whisparr.Indexers.get_restriction(id=3)
    ```


    :param int id: Restriction ID.
    """
    ...
