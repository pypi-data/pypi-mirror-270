# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CustomFormatSpecification',
    'ProfileFormatItem',
    'ProfileLanguage',
    'ProfileQualityGroup',
    'ProfileQualityGroupQuality',
    'GetCustomFormatSpecificationResult',
    'GetCustomFormatsCustomFormatResult',
    'GetCustomFormatsCustomFormatSpecificationResult',
    'GetDefinitionsQualityDefinitionResult',
    'GetDelayProfilesDelayProfileResult',
    'GetProfileFormatItemResult',
    'GetProfileLanguageResult',
    'GetProfileQualityGroupResult',
    'GetProfileQualityGroupQualityResult',
    'GetProfilesQualityProfileResult',
    'GetProfilesQualityProfileFormatItemResult',
    'GetProfilesQualityProfileLanguageResult',
    'GetProfilesQualityProfileQualityGroupResult',
    'GetProfilesQualityProfileQualityGroupQualityResult',
]

@pulumi.output_type
class CustomFormatSpecification(dict):
    def __init__(__self__, *,
                 implementation: Optional[str] = None,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 name: Optional[str] = None,
                 negate: Optional[bool] = None,
                 required: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str implementation: Implementation.
        :param int max: Max.
        :param int min: Min.
        :param str name: Specification name.
        :param bool negate: Negate flag.
        :param bool required: Required flag.
        :param str value: Value.
        """
        if implementation is not None:
            pulumi.set(__self__, "implementation", implementation)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def implementation(self) -> Optional[str]:
        """
        Implementation.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        """
        Max.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        """
        Min.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        """
        Negate flag.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Required flag.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ProfileFormatItem(dict):
    def __init__(__self__, *,
                 format: Optional[int] = None,
                 name: Optional[str] = None,
                 score: Optional[int] = None):
        """
        :param int format: Format.
        :param str name: Name.
        :param int score: Score.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if score is not None:
            pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter
    def format(self) -> Optional[int]:
        """
        Format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        """
        Score.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class ProfileLanguage(dict):
    def __init__(__self__, *,
                 id: int,
                 name: Optional[str] = None):
        """
        :param int id: ID.
        :param str name: Name.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileQualityGroup(dict):
    def __init__(__self__, *,
                 qualities: Sequence['outputs.ProfileQualityGroupQuality'],
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ProfileQualityGroupQualityArgs'] qualities: Qualities in group.
        :param int id: Quality group ID.
        :param str name: Quality group name.
        """
        pulumi.set(__self__, "qualities", qualities)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def qualities(self) -> Sequence['outputs.ProfileQualityGroupQuality']:
        """
        Qualities in group.
        """
        return pulumi.get(self, "qualities")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Quality group ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Quality group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileQualityGroupQuality(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 resolution: Optional[int] = None,
                 source: Optional[str] = None):
        """
        :param int id: ID.
        :param str name: Name.
        :param int resolution: Resolution.
        :param str source: Source.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resolution is not None:
            pulumi.set(__self__, "resolution", resolution)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resolution(self) -> Optional[int]:
        """
        Resolution.
        """
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Source.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class GetCustomFormatSpecificationResult(dict):
    def __init__(__self__, *,
                 implementation: str,
                 max: int,
                 min: int,
                 name: str,
                 negate: bool,
                 required: bool,
                 value: str):
        """
        :param str implementation: Implementation.
        :param int max: Max.
        :param int min: Min.
        :param str name: Specification name.
        :param bool negate: Negate flag.
        :param bool required: Computed flag.
        :param str value: Value.
        """
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "negate", negate)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Implementation.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        Max.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        Min.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def negate(self) -> bool:
        """
        Negate flag.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Computed flag.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCustomFormatsCustomFormatResult(dict):
    def __init__(__self__, *,
                 id: int,
                 include_custom_format_when_renaming: bool,
                 name: str,
                 specifications: Sequence['outputs.GetCustomFormatsCustomFormatSpecificationResult']):
        """
        :param int id: Custom Format ID.
        :param bool include_custom_format_when_renaming: Include custom format when renaming flag.
        :param str name: Custom Format name.
        :param Sequence['GetCustomFormatsCustomFormatSpecificationArgs'] specifications: Specifications.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "include_custom_format_when_renaming", include_custom_format_when_renaming)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "specifications", specifications)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Custom Format ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeCustomFormatWhenRenaming")
    def include_custom_format_when_renaming(self) -> bool:
        """
        Include custom format when renaming flag.
        """
        return pulumi.get(self, "include_custom_format_when_renaming")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom Format name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def specifications(self) -> Sequence['outputs.GetCustomFormatsCustomFormatSpecificationResult']:
        """
        Specifications.
        """
        return pulumi.get(self, "specifications")


@pulumi.output_type
class GetCustomFormatsCustomFormatSpecificationResult(dict):
    def __init__(__self__, *,
                 implementation: str,
                 max: int,
                 min: int,
                 name: str,
                 negate: bool,
                 required: bool,
                 value: str):
        """
        :param str implementation: Implementation.
        :param int max: Max.
        :param int min: Min.
        :param str name: Custom Format name.
        :param bool negate: Negate flag.
        :param bool required: Computed flag.
        :param str value: Value.
        """
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "negate", negate)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Implementation.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        Max.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        Min.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom Format name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def negate(self) -> bool:
        """
        Negate flag.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Computed flag.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDefinitionsQualityDefinitionResult(dict):
    def __init__(__self__, *,
                 id: int,
                 max_size: float,
                 min_size: float,
                 preferred_size: float,
                 quality_id: int,
                 quality_name: str,
                 resolution: int,
                 source: str,
                 title: str):
        """
        :param int id: Quality Definition ID.
        :param float max_size: Maximum size MB/min.
        :param float min_size: Minimum size MB/min.
        :param float preferred_size: Preferred size MB/min.
        :param int quality_id: Quality ID.
        :param str quality_name: Quality Name.
        :param int resolution: Quality Resolution.
        :param str source: Quality source.
        :param str title: Quality Definition Title.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "preferred_size", preferred_size)
        pulumi.set(__self__, "quality_id", quality_id)
        pulumi.set(__self__, "quality_name", quality_name)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Quality Definition ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> float:
        """
        Maximum size MB/min.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> float:
        """
        Minimum size MB/min.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="preferredSize")
    def preferred_size(self) -> float:
        """
        Preferred size MB/min.
        """
        return pulumi.get(self, "preferred_size")

    @property
    @pulumi.getter(name="qualityId")
    def quality_id(self) -> int:
        """
        Quality ID.
        """
        return pulumi.get(self, "quality_id")

    @property
    @pulumi.getter(name="qualityName")
    def quality_name(self) -> str:
        """
        Quality Name.
        """
        return pulumi.get(self, "quality_name")

    @property
    @pulumi.getter
    def resolution(self) -> int:
        """
        Quality Resolution.
        """
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Quality source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Quality Definition Title.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetDelayProfilesDelayProfileResult(dict):
    def __init__(__self__, *,
                 bypass_if_highest_quality: bool,
                 enable_torrent: bool,
                 enable_usenet: bool,
                 id: int,
                 order: int,
                 preferred_protocol: str,
                 tags: Sequence[int],
                 torrent_delay: int,
                 usenet_delay: int):
        """
        :param bool bypass_if_highest_quality: Bypass for highest quality Flag.
        :param bool enable_torrent: Torrent allowed Flag.
        :param bool enable_usenet: Usenet allowed Flag.
        :param int id: Delay Profile ID.
        :param int order: Order.
        :param str preferred_protocol: Preferred protocol.
        :param Sequence[int] tags: List of associated tags.
        :param int torrent_delay: Torrent Delay.
        :param int usenet_delay: Usenet delay.
        """
        pulumi.set(__self__, "bypass_if_highest_quality", bypass_if_highest_quality)
        pulumi.set(__self__, "enable_torrent", enable_torrent)
        pulumi.set(__self__, "enable_usenet", enable_usenet)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "preferred_protocol", preferred_protocol)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "torrent_delay", torrent_delay)
        pulumi.set(__self__, "usenet_delay", usenet_delay)

    @property
    @pulumi.getter(name="bypassIfHighestQuality")
    def bypass_if_highest_quality(self) -> bool:
        """
        Bypass for highest quality Flag.
        """
        return pulumi.get(self, "bypass_if_highest_quality")

    @property
    @pulumi.getter(name="enableTorrent")
    def enable_torrent(self) -> bool:
        """
        Torrent allowed Flag.
        """
        return pulumi.get(self, "enable_torrent")

    @property
    @pulumi.getter(name="enableUsenet")
    def enable_usenet(self) -> bool:
        """
        Usenet allowed Flag.
        """
        return pulumi.get(self, "enable_usenet")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Delay Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def order(self) -> int:
        """
        Order.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="preferredProtocol")
    def preferred_protocol(self) -> str:
        """
        Preferred protocol.
        """
        return pulumi.get(self, "preferred_protocol")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="torrentDelay")
    def torrent_delay(self) -> int:
        """
        Torrent Delay.
        """
        return pulumi.get(self, "torrent_delay")

    @property
    @pulumi.getter(name="usenetDelay")
    def usenet_delay(self) -> int:
        """
        Usenet delay.
        """
        return pulumi.get(self, "usenet_delay")


@pulumi.output_type
class GetProfileFormatItemResult(dict):
    def __init__(__self__, *,
                 format: int,
                 name: str,
                 score: int):
        """
        :param int format: Format.
        :param str name: Name.
        :param int score: Score.
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter
    def format(self) -> int:
        """
        Format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def score(self) -> int:
        """
        Score.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class GetProfileLanguageResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: ID.
        :param str name: Name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetProfileQualityGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 qualities: Sequence['outputs.GetProfileQualityGroupQualityResult']):
        """
        :param int id: Quality group ID.
        :param str name: Quality group name.
        :param Sequence['GetProfileQualityGroupQualityArgs'] qualities: Qualities in group.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "qualities", qualities)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Quality group ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Quality group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def qualities(self) -> Sequence['outputs.GetProfileQualityGroupQualityResult']:
        """
        Qualities in group.
        """
        return pulumi.get(self, "qualities")


@pulumi.output_type
class GetProfileQualityGroupQualityResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 resolution: int,
                 source: str):
        """
        :param int id: ID.
        :param str name: Name.
        :param int resolution: Resolution.
        :param str source: Source.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resolution(self) -> int:
        """
        Resolution.
        """
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Source.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class GetProfilesQualityProfileResult(dict):
    def __init__(__self__, *,
                 cutoff: int,
                 cutoff_format_score: int,
                 format_items: Sequence['outputs.GetProfilesQualityProfileFormatItemResult'],
                 id: int,
                 language: 'outputs.GetProfilesQualityProfileLanguageResult',
                 min_format_score: int,
                 name: str,
                 quality_groups: Sequence['outputs.GetProfilesQualityProfileQualityGroupResult'],
                 upgrade_allowed: bool):
        """
        :param int cutoff: Quality ID to which cutoff.
        :param int cutoff_format_score: Cutoff format score.
        :param Sequence['GetProfilesQualityProfileFormatItemArgs'] format_items: Format items.
        :param int id: Quality Profile ID.
        :param 'GetProfilesQualityProfileLanguageArgs' language: Language.
        :param int min_format_score: Min format score.
        :param str name: Quality Profile Name.
        :param Sequence['GetProfilesQualityProfileQualityGroupArgs'] quality_groups: Quality groups.
        :param bool upgrade_allowed: Upgrade allowed flag.
        """
        pulumi.set(__self__, "cutoff", cutoff)
        pulumi.set(__self__, "cutoff_format_score", cutoff_format_score)
        pulumi.set(__self__, "format_items", format_items)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "min_format_score", min_format_score)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "quality_groups", quality_groups)
        pulumi.set(__self__, "upgrade_allowed", upgrade_allowed)

    @property
    @pulumi.getter
    def cutoff(self) -> int:
        """
        Quality ID to which cutoff.
        """
        return pulumi.get(self, "cutoff")

    @property
    @pulumi.getter(name="cutoffFormatScore")
    def cutoff_format_score(self) -> int:
        """
        Cutoff format score.
        """
        return pulumi.get(self, "cutoff_format_score")

    @property
    @pulumi.getter(name="formatItems")
    def format_items(self) -> Sequence['outputs.GetProfilesQualityProfileFormatItemResult']:
        """
        Format items.
        """
        return pulumi.get(self, "format_items")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Quality Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def language(self) -> 'outputs.GetProfilesQualityProfileLanguageResult':
        """
        Language.
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter(name="minFormatScore")
    def min_format_score(self) -> int:
        """
        Min format score.
        """
        return pulumi.get(self, "min_format_score")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Quality Profile Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualityGroups")
    def quality_groups(self) -> Sequence['outputs.GetProfilesQualityProfileQualityGroupResult']:
        """
        Quality groups.
        """
        return pulumi.get(self, "quality_groups")

    @property
    @pulumi.getter(name="upgradeAllowed")
    def upgrade_allowed(self) -> bool:
        """
        Upgrade allowed flag.
        """
        return pulumi.get(self, "upgrade_allowed")


@pulumi.output_type
class GetProfilesQualityProfileFormatItemResult(dict):
    def __init__(__self__, *,
                 format: int,
                 name: str,
                 score: int):
        """
        :param int format: Format.
        :param str name: Name.
        :param int score: Score.
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter
    def format(self) -> int:
        """
        Format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def score(self) -> int:
        """
        Score.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class GetProfilesQualityProfileLanguageResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: Quality Profile ID.
        :param str name: Name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Quality Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetProfilesQualityProfileQualityGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 qualities: Sequence['outputs.GetProfilesQualityProfileQualityGroupQualityResult']):
        """
        :param int id: Quality Profile ID.
        :param str name: Name.
        :param Sequence['GetProfilesQualityProfileQualityGroupQualityArgs'] qualities: Qualities in group.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "qualities", qualities)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Quality Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def qualities(self) -> Sequence['outputs.GetProfilesQualityProfileQualityGroupQualityResult']:
        """
        Qualities in group.
        """
        return pulumi.get(self, "qualities")


@pulumi.output_type
class GetProfilesQualityProfileQualityGroupQualityResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 resolution: int,
                 source: str):
        """
        :param int id: Quality Profile ID.
        :param str name: Name.
        :param int resolution: Resolution.
        :param str source: Source.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Quality Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resolution(self) -> int:
        """
        Resolution.
        """
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Source.
        """
        return pulumi.get(self, "source")


