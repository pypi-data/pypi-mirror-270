# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MovieArgs', 'Movie']

@pulumi.input_type
class MovieArgs:
    def __init__(__self__, *,
                 monitored: pulumi.Input[bool],
                 path: pulumi.Input[str],
                 quality_profile_id: pulumi.Input[int],
                 title: pulumi.Input[str],
                 tmdb_id: pulumi.Input[int],
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a Movie resource.
        :param pulumi.Input[bool] monitored: Monitored flag.
        :param pulumi.Input[str] path: Full movie path.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] title: Movie title.
        :param pulumi.Input[int] tmdb_id: TMDB ID.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
               Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        pulumi.set(__self__, "monitored", monitored)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "tmdb_id", tmdb_id)
        if minimum_availability is not None:
            pulumi.set(__self__, "minimum_availability", minimum_availability)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def monitored(self) -> pulumi.Input[bool]:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @monitored.setter
    def monitored(self, value: pulumi.Input[bool]):
        pulumi.set(self, "monitored", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Full movie path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> pulumi.Input[int]:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @quality_profile_id.setter
    def quality_profile_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "quality_profile_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Movie title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="tmdbId")
    def tmdb_id(self) -> pulumi.Input[int]:
        """
        TMDB ID.
        """
        return pulumi.get(self, "tmdb_id")

    @tmdb_id.setter
    def tmdb_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "tmdb_id", value)

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum availability.
        Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
        """
        return pulumi.get(self, "minimum_availability")

    @minimum_availability.setter
    def minimum_availability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum_availability", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _MovieState:
    def __init__(__self__, *,
                 genres: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 imdb_id: Optional[pulumi.Input[str]] = None,
                 is_available: Optional[pulumi.Input[bool]] = None,
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 monitored: Optional[pulumi.Input[bool]] = None,
                 original_language: Optional[pulumi.Input['MovieOriginalLanguageArgs']] = None,
                 original_title: Optional[pulumi.Input[str]] = None,
                 overview: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 tmdb_id: Optional[pulumi.Input[int]] = None,
                 website: Optional[pulumi.Input[str]] = None,
                 year: Optional[pulumi.Input[int]] = None,
                 youtube_trailer_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Movie resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] genres: List genres.
        :param pulumi.Input[str] imdb_id: IMDB ID.
        :param pulumi.Input[bool] is_available: Availability flag.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
               Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
        :param pulumi.Input[bool] monitored: Monitored flag.
        :param pulumi.Input['MovieOriginalLanguageArgs'] original_language: Original language.
        :param pulumi.Input[str] original_title: Movie original title.
        :param pulumi.Input[str] overview: Overview.
        :param pulumi.Input[str] path: Full movie path.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] status: Movie status.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] title: Movie title.
        :param pulumi.Input[int] tmdb_id: TMDB ID.
        :param pulumi.Input[str] website: Website.
        :param pulumi.Input[int] year: Year.
        :param pulumi.Input[str] youtube_trailer_id: Youtube trailer ID.
        """
        if genres is not None:
            pulumi.set(__self__, "genres", genres)
        if imdb_id is not None:
            pulumi.set(__self__, "imdb_id", imdb_id)
        if is_available is not None:
            pulumi.set(__self__, "is_available", is_available)
        if minimum_availability is not None:
            pulumi.set(__self__, "minimum_availability", minimum_availability)
        if monitored is not None:
            pulumi.set(__self__, "monitored", monitored)
        if original_language is not None:
            pulumi.set(__self__, "original_language", original_language)
        if original_title is not None:
            pulumi.set(__self__, "original_title", original_title)
        if overview is not None:
            pulumi.set(__self__, "overview", overview)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if quality_profile_id is not None:
            pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if tmdb_id is not None:
            pulumi.set(__self__, "tmdb_id", tmdb_id)
        if website is not None:
            pulumi.set(__self__, "website", website)
        if year is not None:
            pulumi.set(__self__, "year", year)
        if youtube_trailer_id is not None:
            pulumi.set(__self__, "youtube_trailer_id", youtube_trailer_id)

    @property
    @pulumi.getter
    def genres(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List genres.
        """
        return pulumi.get(self, "genres")

    @genres.setter
    def genres(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "genres", value)

    @property
    @pulumi.getter(name="imdbId")
    def imdb_id(self) -> Optional[pulumi.Input[str]]:
        """
        IMDB ID.
        """
        return pulumi.get(self, "imdb_id")

    @imdb_id.setter
    def imdb_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imdb_id", value)

    @property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> Optional[pulumi.Input[bool]]:
        """
        Availability flag.
        """
        return pulumi.get(self, "is_available")

    @is_available.setter
    def is_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_available", value)

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum availability.
        Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
        """
        return pulumi.get(self, "minimum_availability")

    @minimum_availability.setter
    def minimum_availability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum_availability", value)

    @property
    @pulumi.getter
    def monitored(self) -> Optional[pulumi.Input[bool]]:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @monitored.setter
    def monitored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored", value)

    @property
    @pulumi.getter(name="originalLanguage")
    def original_language(self) -> Optional[pulumi.Input['MovieOriginalLanguageArgs']]:
        """
        Original language.
        """
        return pulumi.get(self, "original_language")

    @original_language.setter
    def original_language(self, value: Optional[pulumi.Input['MovieOriginalLanguageArgs']]):
        pulumi.set(self, "original_language", value)

    @property
    @pulumi.getter(name="originalTitle")
    def original_title(self) -> Optional[pulumi.Input[str]]:
        """
        Movie original title.
        """
        return pulumi.get(self, "original_title")

    @original_title.setter
    def original_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_title", value)

    @property
    @pulumi.getter
    def overview(self) -> Optional[pulumi.Input[str]]:
        """
        Overview.
        """
        return pulumi.get(self, "overview")

    @overview.setter
    def overview(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overview", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Full movie path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> Optional[pulumi.Input[int]]:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @quality_profile_id.setter
    def quality_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_profile_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Movie status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Movie title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="tmdbId")
    def tmdb_id(self) -> Optional[pulumi.Input[int]]:
        """
        TMDB ID.
        """
        return pulumi.get(self, "tmdb_id")

    @tmdb_id.setter
    def tmdb_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tmdb_id", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[str]]:
        """
        Website.
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website", value)

    @property
    @pulumi.getter
    def year(self) -> Optional[pulumi.Input[int]]:
        """
        Year.
        """
        return pulumi.get(self, "year")

    @year.setter
    def year(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "year", value)

    @property
    @pulumi.getter(name="youtubeTrailerId")
    def youtube_trailer_id(self) -> Optional[pulumi.Input[str]]:
        """
        Youtube trailer ID.
        """
        return pulumi.get(self, "youtube_trailer_id")

    @youtube_trailer_id.setter
    def youtube_trailer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube_trailer_id", value)


class Movie(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 monitored: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 tmdb_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        <!-- subcategory:Movies -->Movie resource.
        For more information refer to [Movies](https://wiki.servarr.com/whisparr/library#movies) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_whisparr as whisparr

        example = whisparr.movies.Movie("example",
            minimum_availability="inCinemas",
            monitored=False,
            path="/movies/Blue_Movie_1969",
            quality_profile_id=1,
            title="Blue Movie",
            tmdb_id=242423)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import whisparr:Movies/movie:Movie example 10
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
               Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
        :param pulumi.Input[bool] monitored: Monitored flag.
        :param pulumi.Input[str] path: Full movie path.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] title: Movie title.
        :param pulumi.Input[int] tmdb_id: TMDB ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MovieArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Movies -->Movie resource.
        For more information refer to [Movies](https://wiki.servarr.com/whisparr/library#movies) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_whisparr as whisparr

        example = whisparr.movies.Movie("example",
            minimum_availability="inCinemas",
            monitored=False,
            path="/movies/Blue_Movie_1969",
            quality_profile_id=1,
            title="Blue Movie",
            tmdb_id=242423)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import whisparr:Movies/movie:Movie example 10
        ```

        :param str resource_name: The name of the resource.
        :param MovieArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MovieArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 minimum_availability: Optional[pulumi.Input[str]] = None,
                 monitored: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 tmdb_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MovieArgs.__new__(MovieArgs)

            __props__.__dict__["minimum_availability"] = minimum_availability
            if monitored is None and not opts.urn:
                raise TypeError("Missing required property 'monitored'")
            __props__.__dict__["monitored"] = monitored
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            if quality_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'quality_profile_id'")
            __props__.__dict__["quality_profile_id"] = quality_profile_id
            __props__.__dict__["tags"] = tags
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            if tmdb_id is None and not opts.urn:
                raise TypeError("Missing required property 'tmdb_id'")
            __props__.__dict__["tmdb_id"] = tmdb_id
            __props__.__dict__["genres"] = None
            __props__.__dict__["imdb_id"] = None
            __props__.__dict__["is_available"] = None
            __props__.__dict__["original_language"] = None
            __props__.__dict__["original_title"] = None
            __props__.__dict__["overview"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["website"] = None
            __props__.__dict__["year"] = None
            __props__.__dict__["youtube_trailer_id"] = None
        super(Movie, __self__).__init__(
            'whisparr:Movies/movie:Movie',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            genres: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            imdb_id: Optional[pulumi.Input[str]] = None,
            is_available: Optional[pulumi.Input[bool]] = None,
            minimum_availability: Optional[pulumi.Input[str]] = None,
            monitored: Optional[pulumi.Input[bool]] = None,
            original_language: Optional[pulumi.Input[pulumi.InputType['MovieOriginalLanguageArgs']]] = None,
            original_title: Optional[pulumi.Input[str]] = None,
            overview: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            quality_profile_id: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            title: Optional[pulumi.Input[str]] = None,
            tmdb_id: Optional[pulumi.Input[int]] = None,
            website: Optional[pulumi.Input[str]] = None,
            year: Optional[pulumi.Input[int]] = None,
            youtube_trailer_id: Optional[pulumi.Input[str]] = None) -> 'Movie':
        """
        Get an existing Movie resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] genres: List genres.
        :param pulumi.Input[str] imdb_id: IMDB ID.
        :param pulumi.Input[bool] is_available: Availability flag.
        :param pulumi.Input[str] minimum_availability: Minimum availability.
               Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
        :param pulumi.Input[bool] monitored: Monitored flag.
        :param pulumi.Input[pulumi.InputType['MovieOriginalLanguageArgs']] original_language: Original language.
        :param pulumi.Input[str] original_title: Movie original title.
        :param pulumi.Input[str] overview: Overview.
        :param pulumi.Input[str] path: Full movie path.
        :param pulumi.Input[int] quality_profile_id: Quality profile ID.
        :param pulumi.Input[str] status: Movie status.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] title: Movie title.
        :param pulumi.Input[int] tmdb_id: TMDB ID.
        :param pulumi.Input[str] website: Website.
        :param pulumi.Input[int] year: Year.
        :param pulumi.Input[str] youtube_trailer_id: Youtube trailer ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MovieState.__new__(_MovieState)

        __props__.__dict__["genres"] = genres
        __props__.__dict__["imdb_id"] = imdb_id
        __props__.__dict__["is_available"] = is_available
        __props__.__dict__["minimum_availability"] = minimum_availability
        __props__.__dict__["monitored"] = monitored
        __props__.__dict__["original_language"] = original_language
        __props__.__dict__["original_title"] = original_title
        __props__.__dict__["overview"] = overview
        __props__.__dict__["path"] = path
        __props__.__dict__["quality_profile_id"] = quality_profile_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["title"] = title
        __props__.__dict__["tmdb_id"] = tmdb_id
        __props__.__dict__["website"] = website
        __props__.__dict__["year"] = year
        __props__.__dict__["youtube_trailer_id"] = youtube_trailer_id
        return Movie(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def genres(self) -> pulumi.Output[Sequence[str]]:
        """
        List genres.
        """
        return pulumi.get(self, "genres")

    @property
    @pulumi.getter(name="imdbId")
    def imdb_id(self) -> pulumi.Output[str]:
        """
        IMDB ID.
        """
        return pulumi.get(self, "imdb_id")

    @property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> pulumi.Output[bool]:
        """
        Availability flag.
        """
        return pulumi.get(self, "is_available")

    @property
    @pulumi.getter(name="minimumAvailability")
    def minimum_availability(self) -> pulumi.Output[str]:
        """
        Minimum availability.
        Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
        """
        return pulumi.get(self, "minimum_availability")

    @property
    @pulumi.getter
    def monitored(self) -> pulumi.Output[bool]:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @property
    @pulumi.getter(name="originalLanguage")
    def original_language(self) -> pulumi.Output['outputs.MovieOriginalLanguage']:
        """
        Original language.
        """
        return pulumi.get(self, "original_language")

    @property
    @pulumi.getter(name="originalTitle")
    def original_title(self) -> pulumi.Output[str]:
        """
        Movie original title.
        """
        return pulumi.get(self, "original_title")

    @property
    @pulumi.getter
    def overview(self) -> pulumi.Output[str]:
        """
        Overview.
        """
        return pulumi.get(self, "overview")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        Full movie path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> pulumi.Output[int]:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Movie status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        Movie title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="tmdbId")
    def tmdb_id(self) -> pulumi.Output[int]:
        """
        TMDB ID.
        """
        return pulumi.get(self, "tmdb_id")

    @property
    @pulumi.getter
    def website(self) -> pulumi.Output[str]:
        """
        Website.
        """
        return pulumi.get(self, "website")

    @property
    @pulumi.getter
    def year(self) -> pulumi.Output[int]:
        """
        Year.
        """
        return pulumi.get(self, "year")

    @property
    @pulumi.getter(name="youtubeTrailerId")
    def youtube_trailer_id(self) -> pulumi.Output[str]:
        """
        Youtube trailer ID.
        """
        return pulumi.get(self, "youtube_trailer_id")

