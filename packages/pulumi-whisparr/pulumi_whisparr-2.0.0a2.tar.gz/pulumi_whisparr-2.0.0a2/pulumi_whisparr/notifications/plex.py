# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PlexArgs', 'Plex']

@pulumi.input_type
class PlexArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[str],
                 host: pulumi.Input[str],
                 on_movie_delete: pulumi.Input[bool],
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Plex resource.
        :param pulumi.Input[str] auth_token: Auth Token.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[bool] on_movie_delete: On movie delete flag.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationPlex name.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_movie_file_delete: On movie file delete flag.
        :param pulumi.Input[bool] on_movie_file_delete_for_upgrade: On movie file delete for upgrade flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        """
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "on_movie_delete", on_movie_delete)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_download is not None:
            pulumi.set(__self__, "on_download", on_download)
        if on_movie_file_delete is not None:
            pulumi.set(__self__, "on_movie_file_delete", on_movie_file_delete)
        if on_movie_file_delete_for_upgrade is not None:
            pulumi.set(__self__, "on_movie_file_delete_for_upgrade", on_movie_file_delete_for_upgrade)
        if on_rename is not None:
            pulumi.set(__self__, "on_rename", on_rename)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_library is not None:
            pulumi.set(__self__, "update_library", update_library)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        """
        Auth Token.
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="onMovieDelete")
    def on_movie_delete(self) -> pulumi.Input[bool]:
        """
        On movie delete flag.
        """
        return pulumi.get(self, "on_movie_delete")

    @on_movie_delete.setter
    def on_movie_delete(self, value: pulumi.Input[bool]):
        pulumi.set(self, "on_movie_delete", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationPlex name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> Optional[pulumi.Input[bool]]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @on_download.setter
    def on_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_download", value)

    @property
    @pulumi.getter(name="onMovieFileDelete")
    def on_movie_file_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie file delete flag.
        """
        return pulumi.get(self, "on_movie_file_delete")

    @on_movie_file_delete.setter
    def on_movie_file_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_file_delete", value)

    @property
    @pulumi.getter(name="onMovieFileDeleteForUpgrade")
    def on_movie_file_delete_for_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie file delete for upgrade flag.
        """
        return pulumi.get(self, "on_movie_file_delete_for_upgrade")

    @on_movie_file_delete_for_upgrade.setter
    def on_movie_file_delete_for_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_file_delete_for_upgrade", value)

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> Optional[pulumi.Input[bool]]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @on_rename.setter
    def on_rename(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_rename", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @update_library.setter
    def update_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_library", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)


@pulumi.input_type
class _PlexState:
    def __init__(__self__, *,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_movie_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Plex resources.
        :param pulumi.Input[str] auth_token: Auth Token.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationPlex name.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_movie_delete: On movie delete flag.
        :param pulumi.Input[bool] on_movie_file_delete: On movie file delete flag.
        :param pulumi.Input[bool] on_movie_file_delete_for_upgrade: On movie file delete for upgrade flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        """
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_download is not None:
            pulumi.set(__self__, "on_download", on_download)
        if on_movie_delete is not None:
            pulumi.set(__self__, "on_movie_delete", on_movie_delete)
        if on_movie_file_delete is not None:
            pulumi.set(__self__, "on_movie_file_delete", on_movie_file_delete)
        if on_movie_file_delete_for_upgrade is not None:
            pulumi.set(__self__, "on_movie_file_delete_for_upgrade", on_movie_file_delete_for_upgrade)
        if on_rename is not None:
            pulumi.set(__self__, "on_rename", on_rename)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_library is not None:
            pulumi.set(__self__, "update_library", update_library)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        Auth Token.
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationPlex name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> Optional[pulumi.Input[bool]]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @on_download.setter
    def on_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_download", value)

    @property
    @pulumi.getter(name="onMovieDelete")
    def on_movie_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie delete flag.
        """
        return pulumi.get(self, "on_movie_delete")

    @on_movie_delete.setter
    def on_movie_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_delete", value)

    @property
    @pulumi.getter(name="onMovieFileDelete")
    def on_movie_file_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie file delete flag.
        """
        return pulumi.get(self, "on_movie_file_delete")

    @on_movie_file_delete.setter
    def on_movie_file_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_file_delete", value)

    @property
    @pulumi.getter(name="onMovieFileDeleteForUpgrade")
    def on_movie_file_delete_for_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On movie file delete for upgrade flag.
        """
        return pulumi.get(self, "on_movie_file_delete_for_upgrade")

    @on_movie_file_delete_for_upgrade.setter
    def on_movie_file_delete_for_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_movie_file_delete_for_upgrade", value)

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> Optional[pulumi.Input[bool]]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @on_rename.setter
    def on_rename(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_rename", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @update_library.setter
    def update_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_library", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)


class Plex(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_movie_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        <!-- subcategory:Notifications -->Notification Plex resource.
        For more information refer to [Notification](https://wiki.servarr.com/whisparr/settings#connect) and [Plex](https://wiki.servarr.com/whisparr/supported#plexserver).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_whisparr as whisparr

        example = whisparr.notifications.Plex("example",
            auth_token="AuthTOKEN",
            host="plex.lcl",
            include_health_warnings=False,
            on_download=True,
            on_movie_delete=False,
            on_movie_file_delete=False,
            on_movie_file_delete_for_upgrade=True,
            on_rename=False,
            on_upgrade=True,
            port=32400)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import whisparr:Notifications/plex:Plex example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_token: Auth Token.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationPlex name.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_movie_delete: On movie delete flag.
        :param pulumi.Input[bool] on_movie_file_delete: On movie file delete flag.
        :param pulumi.Input[bool] on_movie_file_delete_for_upgrade: On movie file delete for upgrade flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlexArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Notifications -->Notification Plex resource.
        For more information refer to [Notification](https://wiki.servarr.com/whisparr/settings#connect) and [Plex](https://wiki.servarr.com/whisparr/supported#plexserver).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_whisparr as whisparr

        example = whisparr.notifications.Plex("example",
            auth_token="AuthTOKEN",
            host="plex.lcl",
            include_health_warnings=False,
            on_download=True,
            on_movie_delete=False,
            on_movie_file_delete=False,
            on_movie_file_delete_for_upgrade=True,
            on_rename=False,
            on_upgrade=True,
            port=32400)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import whisparr:Notifications/plex:Plex example 1
        ```

        :param str resource_name: The name of the resource.
        :param PlexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_movie_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlexArgs.__new__(PlexArgs)

            if auth_token is None and not opts.urn:
                raise TypeError("Missing required property 'auth_token'")
            __props__.__dict__["auth_token"] = None if auth_token is None else pulumi.Output.secret(auth_token)
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["include_health_warnings"] = include_health_warnings
            __props__.__dict__["name"] = name
            __props__.__dict__["on_download"] = on_download
            if on_movie_delete is None and not opts.urn:
                raise TypeError("Missing required property 'on_movie_delete'")
            __props__.__dict__["on_movie_delete"] = on_movie_delete
            __props__.__dict__["on_movie_file_delete"] = on_movie_file_delete
            __props__.__dict__["on_movie_file_delete_for_upgrade"] = on_movie_file_delete_for_upgrade
            __props__.__dict__["on_rename"] = on_rename
            __props__.__dict__["on_upgrade"] = on_upgrade
            __props__.__dict__["port"] = port
            __props__.__dict__["tags"] = tags
            __props__.__dict__["update_library"] = update_library
            __props__.__dict__["use_ssl"] = use_ssl
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Plex, __self__).__init__(
            'whisparr:Notifications/plex:Plex',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_token: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            include_health_warnings: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            on_download: Optional[pulumi.Input[bool]] = None,
            on_movie_delete: Optional[pulumi.Input[bool]] = None,
            on_movie_file_delete: Optional[pulumi.Input[bool]] = None,
            on_movie_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
            on_rename: Optional[pulumi.Input[bool]] = None,
            on_upgrade: Optional[pulumi.Input[bool]] = None,
            port: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            update_library: Optional[pulumi.Input[bool]] = None,
            use_ssl: Optional[pulumi.Input[bool]] = None) -> 'Plex':
        """
        Get an existing Plex resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_token: Auth Token.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationPlex name.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_movie_delete: On movie delete flag.
        :param pulumi.Input[bool] on_movie_file_delete: On movie file delete flag.
        :param pulumi.Input[bool] on_movie_file_delete_for_upgrade: On movie file delete for upgrade flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlexState.__new__(_PlexState)

        __props__.__dict__["auth_token"] = auth_token
        __props__.__dict__["host"] = host
        __props__.__dict__["include_health_warnings"] = include_health_warnings
        __props__.__dict__["name"] = name
        __props__.__dict__["on_download"] = on_download
        __props__.__dict__["on_movie_delete"] = on_movie_delete
        __props__.__dict__["on_movie_file_delete"] = on_movie_file_delete
        __props__.__dict__["on_movie_file_delete_for_upgrade"] = on_movie_file_delete_for_upgrade
        __props__.__dict__["on_rename"] = on_rename
        __props__.__dict__["on_upgrade"] = on_upgrade
        __props__.__dict__["port"] = port
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_library"] = update_library
        __props__.__dict__["use_ssl"] = use_ssl
        return Plex(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Output[str]:
        """
        Auth Token.
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> pulumi.Output[bool]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        NotificationPlex name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> pulumi.Output[bool]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @property
    @pulumi.getter(name="onMovieDelete")
    def on_movie_delete(self) -> pulumi.Output[bool]:
        """
        On movie delete flag.
        """
        return pulumi.get(self, "on_movie_delete")

    @property
    @pulumi.getter(name="onMovieFileDelete")
    def on_movie_file_delete(self) -> pulumi.Output[bool]:
        """
        On movie file delete flag.
        """
        return pulumi.get(self, "on_movie_file_delete")

    @property
    @pulumi.getter(name="onMovieFileDeleteForUpgrade")
    def on_movie_file_delete_for_upgrade(self) -> pulumi.Output[bool]:
        """
        On movie file delete for upgrade flag.
        """
        return pulumi.get(self, "on_movie_file_delete_for_upgrade")

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> pulumi.Output[bool]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> pulumi.Output[bool]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> pulumi.Output[bool]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> pulumi.Output[bool]:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

