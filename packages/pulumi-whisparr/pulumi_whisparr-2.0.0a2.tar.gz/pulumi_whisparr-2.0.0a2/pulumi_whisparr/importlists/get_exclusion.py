# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetExclusionResult',
    'AwaitableGetExclusionResult',
    'get_exclusion',
    'get_exclusion_output',
]

@pulumi.output_type
class GetExclusionResult:
    """
    A collection of values returned by getExclusion.
    """
    def __init__(__self__, id=None, title=None, tmdb_id=None, year=None):
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)
        if tmdb_id and not isinstance(tmdb_id, int):
            raise TypeError("Expected argument 'tmdb_id' to be a int")
        pulumi.set(__self__, "tmdb_id", tmdb_id)
        if year and not isinstance(year, int):
            raise TypeError("Expected argument 'year' to be a int")
        pulumi.set(__self__, "year", year)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Import List Exclusion ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Movie to be excluded.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="tmdbId")
    def tmdb_id(self) -> int:
        """
        Movie TMDB ID.
        """
        return pulumi.get(self, "tmdb_id")

    @property
    @pulumi.getter
    def year(self) -> int:
        """
        Year.
        """
        return pulumi.get(self, "year")


class AwaitableGetExclusionResult(GetExclusionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExclusionResult(
            id=self.id,
            title=self.title,
            tmdb_id=self.tmdb_id,
            year=self.year)


def get_exclusion(tmdb_id: Optional[int] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExclusionResult:
    """
    <!-- subcategory:Import Lists -->Single ImportListExclusion.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_whisparr as whisparr

    example = whisparr.ImportLists.get_exclusion(tmdb_id=987)
    ```


    :param int tmdb_id: Movie TMDB ID.
    """
    __args__ = dict()
    __args__['tmdbId'] = tmdb_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('whisparr:ImportLists/getExclusion:getExclusion', __args__, opts=opts, typ=GetExclusionResult).value

    return AwaitableGetExclusionResult(
        id=pulumi.get(__ret__, 'id'),
        title=pulumi.get(__ret__, 'title'),
        tmdb_id=pulumi.get(__ret__, 'tmdb_id'),
        year=pulumi.get(__ret__, 'year'))


@_utilities.lift_output_func(get_exclusion)
def get_exclusion_output(tmdb_id: Optional[pulumi.Input[int]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetExclusionResult]:
    """
    <!-- subcategory:Import Lists -->Single ImportListExclusion.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_whisparr as whisparr

    example = whisparr.ImportLists.get_exclusion(tmdb_id=987)
    ```


    :param int tmdb_id: Movie TMDB ID.
    """
    ...
