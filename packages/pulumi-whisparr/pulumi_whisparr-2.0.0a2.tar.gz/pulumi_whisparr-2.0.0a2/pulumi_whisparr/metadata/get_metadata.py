# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetMetadataResult',
    'AwaitableGetMetadataResult',
    'get_metadata',
    'get_metadata_output',
]

@pulumi.output_type
class GetMetadataResult:
    """
    A collection of values returned by getMetadata.
    """
    def __init__(__self__, config_contract=None, enable=None, id=None, implementation=None, movie_images=None, movie_metadata=None, movie_metadata_language=None, movie_metadata_url=None, name=None, tags=None, use_movie_nfo=None):
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if enable and not isinstance(enable, bool):
            raise TypeError("Expected argument 'enable' to be a bool")
        pulumi.set(__self__, "enable", enable)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if movie_images and not isinstance(movie_images, bool):
            raise TypeError("Expected argument 'movie_images' to be a bool")
        pulumi.set(__self__, "movie_images", movie_images)
        if movie_metadata and not isinstance(movie_metadata, bool):
            raise TypeError("Expected argument 'movie_metadata' to be a bool")
        pulumi.set(__self__, "movie_metadata", movie_metadata)
        if movie_metadata_language and not isinstance(movie_metadata_language, int):
            raise TypeError("Expected argument 'movie_metadata_language' to be a int")
        pulumi.set(__self__, "movie_metadata_language", movie_metadata_language)
        if movie_metadata_url and not isinstance(movie_metadata_url, bool):
            raise TypeError("Expected argument 'movie_metadata_url' to be a bool")
        pulumi.set(__self__, "movie_metadata_url", movie_metadata_url)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if use_movie_nfo and not isinstance(use_movie_nfo, bool):
            raise TypeError("Expected argument 'use_movie_nfo' to be a bool")
        pulumi.set(__self__, "use_movie_nfo", use_movie_nfo)

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Metadata configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Metadata ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Metadata implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="movieImages")
    def movie_images(self) -> bool:
        """
        Movie images flag.
        """
        return pulumi.get(self, "movie_images")

    @property
    @pulumi.getter(name="movieMetadata")
    def movie_metadata(self) -> bool:
        """
        Movie metafata flag.
        """
        return pulumi.get(self, "movie_metadata")

    @property
    @pulumi.getter(name="movieMetadataLanguage")
    def movie_metadata_language(self) -> int:
        """
        Movie metadata language.
        """
        return pulumi.get(self, "movie_metadata_language")

    @property
    @pulumi.getter(name="movieMetadataUrl")
    def movie_metadata_url(self) -> bool:
        """
        Movie metadata URL flag.
        """
        return pulumi.get(self, "movie_metadata_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Metadata name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="useMovieNfo")
    def use_movie_nfo(self) -> bool:
        """
        Use movie nfo flag.
        """
        return pulumi.get(self, "use_movie_nfo")


class AwaitableGetMetadataResult(GetMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetadataResult(
            config_contract=self.config_contract,
            enable=self.enable,
            id=self.id,
            implementation=self.implementation,
            movie_images=self.movie_images,
            movie_metadata=self.movie_metadata,
            movie_metadata_language=self.movie_metadata_language,
            movie_metadata_url=self.movie_metadata_url,
            name=self.name,
            tags=self.tags,
            use_movie_nfo=self.use_movie_nfo)


def get_metadata(name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetadataResult:
    """
    <!-- subcategory:Metadata -->Single Metadata.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_whisparr as whisparr

    example = whisparr.Metadata.get_metadata(name="Example")
    ```


    :param str name: Metadata name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('whisparr:Metadata/getMetadata:getMetadata', __args__, opts=opts, typ=GetMetadataResult).value

    return AwaitableGetMetadataResult(
        config_contract=pulumi.get(__ret__, 'config_contract'),
        enable=pulumi.get(__ret__, 'enable'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        movie_images=pulumi.get(__ret__, 'movie_images'),
        movie_metadata=pulumi.get(__ret__, 'movie_metadata'),
        movie_metadata_language=pulumi.get(__ret__, 'movie_metadata_language'),
        movie_metadata_url=pulumi.get(__ret__, 'movie_metadata_url'),
        name=pulumi.get(__ret__, 'name'),
        tags=pulumi.get(__ret__, 'tags'),
        use_movie_nfo=pulumi.get(__ret__, 'use_movie_nfo'))


@_utilities.lift_output_func(get_metadata)
def get_metadata_output(name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetadataResult]:
    """
    <!-- subcategory:Metadata -->Single Metadata.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_whisparr as whisparr

    example = whisparr.Metadata.get_metadata(name="Example")
    ```


    :param str name: Metadata name.
    """
    ...
