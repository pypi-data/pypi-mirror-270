# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_object_list.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import ld_msgs.msg
import std_msgs.msg

class ld_object_list(genpy.Message):
  _md5sum = "6a9415b4787db64734058235ce26678b"
  _type = "ld_msgs/ld_object_list"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint32          frame_number #@shawn
ld_object[] objects
           

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ld_msgs/ld_object
std_msgs/Header                 header
################ object character
uint32                          id  # ukf_id
uint32                          tracking_age # frames the obj being tracked
std_msgs/Time                   Age # Current age of the obj in timestamp
std_msgs/Time                   lifetime # longevity of the obj in timestamp
string                          object_status # dynamic or static status of the object
float32                         confidence   # Overall detected confidence of the object
std_msgs/ColorRGBA              color   # Define this object specific color

################ 3D BB
bool                            pose_reliable
uint8                           box_label  # Null = 0, on_road = 1, on_edge = 2, edge_left = 3, edge_right = 4

geometry_msgs/Pose              pose
geometry_msgs/Point             pose_var 
geometry_msgs/Point             gps_pos
geometry_msgs/Point             gps_var

geometry_msgs/Point             tracking_points # tracking points for tracking

uint8                           tracking_point_type # tracking point type 0,1,2,3,4,5,6,7,8,9(unknown)

geometry_msgs/Pose              jsk_pose # pose from accociated bbox

float32                         yaw # yaw angel in radian
float32                         yaw_var # cov of yaw angel in radian
float32                         heading_angle
float32                         heading_angle_var

float32                         pitch # pitch of the obj in radian
float32                         pitch_var # pitch var of the obj in radian

float32                         roll # roll of the obj in radian
float32                         roll_var # roll var of the obj in radian

geometry_msgs/Vector3           dimensions
geometry_msgs/Point             dimensions_var  
geometry_msgs/Vector3           clustered_dimensions # dimension of 3D BB from clustering module

############### obj movement status
geometry_msgs/Twist             velocity
geometry_msgs/Twist             velocity_var
float32                         abs_velocity
float32                         abs_velocity_var

geometry_msgs/Twist             rel_velocity
geometry_msgs/Twist             rel_velocity_var
float32                         rel_abs_velocity
float32                         rel_abs_velocity_var

geometry_msgs/Twist             acceleration
geometry_msgs/Twist             acceleration_var
float32                         abs_acceleration
float32                         abs_acceleration_var

geometry_msgs/Twist             rel_acceleration
geometry_msgs/Twist             rel_acceleration_var
float32                         rel_abs_acceleration
float32                         rel_abs_acceleration_var

################## obj in which lane
int8                            lane_relation 

# 0 in ego lane
# -1 left first lane relative to ego
# -2 left second lane relative to ego
# -3 left third lane relative to ego
# -4 left forth lane relative to ego
# 1 right first lane relative to ego
# 2 right second lane relative to ego
# 3 right third lane relative to ego
# 4 right forth lane relative to ego

################## obj feature regarding to visibility
uint8                           visibility  # 0%, 10%, 20%, ..., 100%
float32                         solid_angle #
float32                         reflectivity #
string                          occlusion # Fully, Partly, Not, Null
string                          occlusion_l # Fully, Partly, Not, Null
string                          occlusion_h # Fully, Partly, Not, Null
string                          occlusion_w # Fully, Partly, Not, Null

bool                            occlusion_lowerpart # occlusion in lower part of the bounding box
bool                            validity # validity of bounding box
bool                            has_sun # if sun inside in FOV
uint8                           relation_type # relation type: INDIVIDUAL = 0, PARENT = 1, CHILD = 2
uint32                          relation_id # relation id
bool                            has_child # if has child

#################  class label info
string                          class_label_true # ground truth labels
string                          class_label_pred # predicted class labels
bool                            target_added # manually added target by labeling tool
bool                            target_deleted # manually deleted target by labeling tool

################# sub label info
string                          subclass_label_true # ground truth labels of subclass
string                          subclass_label_pred # predicted subclass labels

############### Behavior State of the Detected Object
uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6



================================================================================
MSG: std_msgs/Time
time data

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular
"""
  __slots__ = ['header','frame_number','objects']
  _slot_types = ['std_msgs/Header','uint32','ld_msgs/ld_object[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_number,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_object_list, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_number is None:
        self.frame_number = 0
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.frame_number = 0
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_number
      buff.write(_get_struct_I().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.tracking_age))
        _v3 = val1.Age
        _v4 = _v3.data
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v5 = val1.lifetime
        _v6 = _v5.data
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1.object_status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
        _v7 = val1.color
        _x = _v7
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.pose_reliable, _x.box_label))
        _v8 = val1.pose
        _v9 = _v8.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = _v8.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v11 = val1.pose_var
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.gps_pos
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = val1.gps_var
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = val1.tracking_points
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.tracking_point_type
        buff.write(_get_struct_B().pack(_x))
        _v15 = val1.jsk_pose
        _v16 = _v15.position
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v17 = _v15.orientation
        _x = _v17
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_8f().pack(_x.yaw, _x.yaw_var, _x.heading_angle, _x.heading_angle_var, _x.pitch, _x.pitch_var, _x.roll, _x.roll_var))
        _v18 = val1.dimensions
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = val1.dimensions_var
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v20 = val1.clustered_dimensions
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v21 = val1.velocity
        _v22 = _v21.linear
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v23 = _v21.angular
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = val1.velocity_var
        _v25 = _v24.linear
        _x = _v25
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v26 = _v24.angular
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.abs_velocity, _x.abs_velocity_var))
        _v27 = val1.rel_velocity
        _v28 = _v27.linear
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v29 = _v27.angular
        _x = _v29
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v30 = val1.rel_velocity_var
        _v31 = _v30.linear
        _x = _v31
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v32 = _v30.angular
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.rel_abs_velocity, _x.rel_abs_velocity_var))
        _v33 = val1.acceleration
        _v34 = _v33.linear
        _x = _v34
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v35 = _v33.angular
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = val1.acceleration_var
        _v37 = _v36.linear
        _x = _v37
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v38 = _v36.angular
        _x = _v38
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.abs_acceleration, _x.abs_acceleration_var))
        _v39 = val1.rel_acceleration
        _v40 = _v39.linear
        _x = _v40
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v41 = _v39.angular
        _x = _v41
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v42 = val1.rel_acceleration_var
        _v43 = _v42.linear
        _x = _v43
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v44 = _v42.angular
        _x = _v44
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2fbB2f().pack(_x.rel_abs_acceleration, _x.rel_abs_acceleration_var, _x.lane_relation, _x.visibility, _x.solid_angle, _x.reflectivity))
        _x = val1.occlusion
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.occlusion_l
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.occlusion_h
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.occlusion_w
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4BIB().pack(_x.occlusion_lowerpart, _x.validity, _x.has_sun, _x.relation_type, _x.relation_id, _x.has_child))
        _x = val1.class_label_true
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.class_label_pred
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.target_added, _x.target_deleted))
        _x = val1.subclass_label_true
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.subclass_label_pred
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.behavior_state
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_number,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_object()
        _v45 = val1.header
        start = end
        end += 4
        (_v45.seq,) = _get_struct_I().unpack(str[start:end])
        _v46 = _v45.stamp
        _x = _v46
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v45.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v45.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.id, _x.tracking_age,) = _get_struct_2I().unpack(str[start:end])
        _v47 = val1.Age
        _v48 = _v47.data
        _x = _v48
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v49 = val1.lifetime
        _v50 = _v49.data
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object_status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.object_status = str[start:end]
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        _v51 = val1.color
        _x = _v51
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.pose_reliable, _x.box_label,) = _get_struct_2B().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        _v52 = val1.pose
        _v53 = _v52.position
        _x = _v53
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v54 = _v52.orientation
        _x = _v54
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v55 = val1.pose_var
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = val1.gps_pos
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v57 = val1.gps_var
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v58 = val1.tracking_points
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.tracking_point_type,) = _get_struct_B().unpack(str[start:end])
        _v59 = val1.jsk_pose
        _v60 = _v59.position
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v61 = _v59.orientation
        _x = _v61
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.yaw, _x.yaw_var, _x.heading_angle, _x.heading_angle_var, _x.pitch, _x.pitch_var, _x.roll, _x.roll_var,) = _get_struct_8f().unpack(str[start:end])
        _v62 = val1.dimensions
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v63 = val1.dimensions_var
        _x = _v63
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v64 = val1.clustered_dimensions
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v65 = val1.velocity
        _v66 = _v65.linear
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v67 = _v65.angular
        _x = _v67
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v68 = val1.velocity_var
        _v69 = _v68.linear
        _x = _v69
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v70 = _v68.angular
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.abs_velocity, _x.abs_velocity_var,) = _get_struct_2f().unpack(str[start:end])
        _v71 = val1.rel_velocity
        _v72 = _v71.linear
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v73 = _v71.angular
        _x = _v73
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v74 = val1.rel_velocity_var
        _v75 = _v74.linear
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v76 = _v74.angular
        _x = _v76
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.rel_abs_velocity, _x.rel_abs_velocity_var,) = _get_struct_2f().unpack(str[start:end])
        _v77 = val1.acceleration
        _v78 = _v77.linear
        _x = _v78
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v79 = _v77.angular
        _x = _v79
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v80 = val1.acceleration_var
        _v81 = _v80.linear
        _x = _v81
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v82 = _v80.angular
        _x = _v82
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.abs_acceleration, _x.abs_acceleration_var,) = _get_struct_2f().unpack(str[start:end])
        _v83 = val1.rel_acceleration
        _v84 = _v83.linear
        _x = _v84
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v85 = _v83.angular
        _x = _v85
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v86 = val1.rel_acceleration_var
        _v87 = _v86.linear
        _x = _v87
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v88 = _v86.angular
        _x = _v88
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 18
        (_x.rel_abs_acceleration, _x.rel_abs_acceleration_var, _x.lane_relation, _x.visibility, _x.solid_angle, _x.reflectivity,) = _get_struct_2fbB2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.occlusion = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.occlusion = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.occlusion_l = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.occlusion_l = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.occlusion_h = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.occlusion_h = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.occlusion_w = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.occlusion_w = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.occlusion_lowerpart, _x.validity, _x.has_sun, _x.relation_type, _x.relation_id, _x.has_child,) = _get_struct_4BIB().unpack(str[start:end])
        val1.occlusion_lowerpart = bool(val1.occlusion_lowerpart)
        val1.validity = bool(val1.validity)
        val1.has_sun = bool(val1.has_sun)
        val1.has_child = bool(val1.has_child)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_label_true = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_label_true = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_label_pred = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_label_pred = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.target_added, _x.target_deleted,) = _get_struct_2B().unpack(str[start:end])
        val1.target_added = bool(val1.target_added)
        val1.target_deleted = bool(val1.target_deleted)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subclass_label_true = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.subclass_label_true = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subclass_label_pred = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.subclass_label_pred = str[start:end]
        start = end
        end += 1
        (val1.behavior_state,) = _get_struct_B().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_number
      buff.write(_get_struct_I().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v89 = val1.header
        _x = _v89.seq
        buff.write(_get_struct_I().pack(_x))
        _v90 = _v89.stamp
        _x = _v90
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v89.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.tracking_age))
        _v91 = val1.Age
        _v92 = _v91.data
        _x = _v92
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v93 = val1.lifetime
        _v94 = _v93.data
        _x = _v94
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1.object_status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
        _v95 = val1.color
        _x = _v95
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.pose_reliable, _x.box_label))
        _v96 = val1.pose
        _v97 = _v96.position
        _x = _v97
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v98 = _v96.orientation
        _x = _v98
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v99 = val1.pose_var
        _x = _v99
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v100 = val1.gps_pos
        _x = _v100
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v101 = val1.gps_var
        _x = _v101
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v102 = val1.tracking_points
        _x = _v102
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.tracking_point_type
        buff.write(_get_struct_B().pack(_x))
        _v103 = val1.jsk_pose
        _v104 = _v103.position
        _x = _v104
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v105 = _v103.orientation
        _x = _v105
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_8f().pack(_x.yaw, _x.yaw_var, _x.heading_angle, _x.heading_angle_var, _x.pitch, _x.pitch_var, _x.roll, _x.roll_var))
        _v106 = val1.dimensions
        _x = _v106
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v107 = val1.dimensions_var
        _x = _v107
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v108 = val1.clustered_dimensions
        _x = _v108
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v109 = val1.velocity
        _v110 = _v109.linear
        _x = _v110
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v111 = _v109.angular
        _x = _v111
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v112 = val1.velocity_var
        _v113 = _v112.linear
        _x = _v113
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v114 = _v112.angular
        _x = _v114
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.abs_velocity, _x.abs_velocity_var))
        _v115 = val1.rel_velocity
        _v116 = _v115.linear
        _x = _v116
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v117 = _v115.angular
        _x = _v117
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v118 = val1.rel_velocity_var
        _v119 = _v118.linear
        _x = _v119
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v120 = _v118.angular
        _x = _v120
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.rel_abs_velocity, _x.rel_abs_velocity_var))
        _v121 = val1.acceleration
        _v122 = _v121.linear
        _x = _v122
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v123 = _v121.angular
        _x = _v123
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v124 = val1.acceleration_var
        _v125 = _v124.linear
        _x = _v125
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v126 = _v124.angular
        _x = _v126
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.abs_acceleration, _x.abs_acceleration_var))
        _v127 = val1.rel_acceleration
        _v128 = _v127.linear
        _x = _v128
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v129 = _v127.angular
        _x = _v129
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v130 = val1.rel_acceleration_var
        _v131 = _v130.linear
        _x = _v131
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v132 = _v130.angular
        _x = _v132
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2fbB2f().pack(_x.rel_abs_acceleration, _x.rel_abs_acceleration_var, _x.lane_relation, _x.visibility, _x.solid_angle, _x.reflectivity))
        _x = val1.occlusion
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.occlusion_l
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.occlusion_h
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.occlusion_w
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4BIB().pack(_x.occlusion_lowerpart, _x.validity, _x.has_sun, _x.relation_type, _x.relation_id, _x.has_child))
        _x = val1.class_label_true
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.class_label_pred
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.target_added, _x.target_deleted))
        _x = val1.subclass_label_true
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.subclass_label_pred
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.behavior_state
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_number,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_object()
        _v133 = val1.header
        start = end
        end += 4
        (_v133.seq,) = _get_struct_I().unpack(str[start:end])
        _v134 = _v133.stamp
        _x = _v134
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v133.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.id, _x.tracking_age,) = _get_struct_2I().unpack(str[start:end])
        _v135 = val1.Age
        _v136 = _v135.data
        _x = _v136
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v137 = val1.lifetime
        _v138 = _v137.data
        _x = _v138
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object_status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.object_status = str[start:end]
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        _v139 = val1.color
        _x = _v139
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.pose_reliable, _x.box_label,) = _get_struct_2B().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        _v140 = val1.pose
        _v141 = _v140.position
        _x = _v141
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v142 = _v140.orientation
        _x = _v142
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v143 = val1.pose_var
        _x = _v143
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v144 = val1.gps_pos
        _x = _v144
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v145 = val1.gps_var
        _x = _v145
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v146 = val1.tracking_points
        _x = _v146
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.tracking_point_type,) = _get_struct_B().unpack(str[start:end])
        _v147 = val1.jsk_pose
        _v148 = _v147.position
        _x = _v148
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v149 = _v147.orientation
        _x = _v149
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.yaw, _x.yaw_var, _x.heading_angle, _x.heading_angle_var, _x.pitch, _x.pitch_var, _x.roll, _x.roll_var,) = _get_struct_8f().unpack(str[start:end])
        _v150 = val1.dimensions
        _x = _v150
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v151 = val1.dimensions_var
        _x = _v151
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v152 = val1.clustered_dimensions
        _x = _v152
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v153 = val1.velocity
        _v154 = _v153.linear
        _x = _v154
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v155 = _v153.angular
        _x = _v155
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v156 = val1.velocity_var
        _v157 = _v156.linear
        _x = _v157
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v158 = _v156.angular
        _x = _v158
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.abs_velocity, _x.abs_velocity_var,) = _get_struct_2f().unpack(str[start:end])
        _v159 = val1.rel_velocity
        _v160 = _v159.linear
        _x = _v160
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v161 = _v159.angular
        _x = _v161
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v162 = val1.rel_velocity_var
        _v163 = _v162.linear
        _x = _v163
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v164 = _v162.angular
        _x = _v164
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.rel_abs_velocity, _x.rel_abs_velocity_var,) = _get_struct_2f().unpack(str[start:end])
        _v165 = val1.acceleration
        _v166 = _v165.linear
        _x = _v166
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v167 = _v165.angular
        _x = _v167
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v168 = val1.acceleration_var
        _v169 = _v168.linear
        _x = _v169
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v170 = _v168.angular
        _x = _v170
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.abs_acceleration, _x.abs_acceleration_var,) = _get_struct_2f().unpack(str[start:end])
        _v171 = val1.rel_acceleration
        _v172 = _v171.linear
        _x = _v172
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v173 = _v171.angular
        _x = _v173
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v174 = val1.rel_acceleration_var
        _v175 = _v174.linear
        _x = _v175
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v176 = _v174.angular
        _x = _v176
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 18
        (_x.rel_abs_acceleration, _x.rel_abs_acceleration_var, _x.lane_relation, _x.visibility, _x.solid_angle, _x.reflectivity,) = _get_struct_2fbB2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.occlusion = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.occlusion = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.occlusion_l = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.occlusion_l = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.occlusion_h = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.occlusion_h = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.occlusion_w = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.occlusion_w = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.occlusion_lowerpart, _x.validity, _x.has_sun, _x.relation_type, _x.relation_id, _x.has_child,) = _get_struct_4BIB().unpack(str[start:end])
        val1.occlusion_lowerpart = bool(val1.occlusion_lowerpart)
        val1.validity = bool(val1.validity)
        val1.has_sun = bool(val1.has_sun)
        val1.has_child = bool(val1.has_child)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_label_true = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_label_true = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_label_pred = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_label_pred = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.target_added, _x.target_deleted,) = _get_struct_2B().unpack(str[start:end])
        val1.target_added = bool(val1.target_added)
        val1.target_deleted = bool(val1.target_deleted)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subclass_label_true = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.subclass_label_true = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subclass_label_pred = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.subclass_label_pred = str[start:end]
        start = end
        end += 1
        (val1.behavior_state,) = _get_struct_B().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2fbB2f = None
def _get_struct_2fbB2f():
    global _struct_2fbB2f
    if _struct_2fbB2f is None:
        _struct_2fbB2f = struct.Struct("<2fbB2f")
    return _struct_2fbB2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4BIB = None
def _get_struct_4BIB():
    global _struct_4BIB
    if _struct_4BIB is None:
        _struct_4BIB = struct.Struct("<4BIB")
    return _struct_4BIB
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
