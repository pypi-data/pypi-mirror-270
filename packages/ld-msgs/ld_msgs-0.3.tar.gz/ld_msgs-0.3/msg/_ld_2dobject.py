# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_2dobject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import std_msgs.msg

class ld_2dobject(genpy.Message):
  _md5sum = "07806de550cf767921df51cbf031efb0"
  _type = "ld_msgs/ld_2dobject"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header                 header
################ object character
uint32                          id
std_msgs/ColorRGBA              color   # Define this object specific color

################ class info 8000
string                          class_label_pred # Predicted class label "Null", "Unknown Big", " Unknown Small", "Pedestrian" "Bike" " Car", "Truck", "Motocycle", "Cyclist", "Tricycle", "Van"
string                          subclass_label_pred # Predicted sub class label: "Null" "CarVan" "Bus" "TramTrain" "VanTransporter" "AgriculturalVeh" "ConstructionVeh" "Truck" "SpecialTruck" "Rider" "Cargo" "Animal" "SittingLyingPed" "Wheelchair" "Trailer" "Ghost" "MobAid" "Group" "UnsafeLoad"
float32                         confidence   # Overall detected confidence of the object

################ tracking info
bool                            pose_reliable # from tracking status. true is Status::Stable
uint32                          tracking_age
std_msgs/Time                   age
std_msgs/Time                   lifetime

################ object status
string object_status # dynamic or static object

################ 2D Bounding Box
geometry_msgs/Point             LeftTop
geometry_msgs/Point             RightBottom

################ 3D Bounding Box
bool                            has_3dinfo

geometry_msgs/Twist             velocity
geometry_msgs/Twist             velocity_var

geometry_msgs/Twist             acceleration
geometry_msgs/Twist             acceleration_var

geometry_msgs/Pose2D[]           front_quad # the vertices of the front planar of the bounding box
geometry_msgs/Pose2D[]           back_quad # the vertices of the behind planar of the bounding box

uint32               points_num
uint32[]             points_in_boundingbox2d

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: std_msgs/Time
time data

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['header','id','color','class_label_pred','subclass_label_pred','confidence','pose_reliable','tracking_age','age','lifetime','object_status','LeftTop','RightBottom','has_3dinfo','velocity','velocity_var','acceleration','acceleration_var','front_quad','back_quad','points_num','points_in_boundingbox2d']
  _slot_types = ['std_msgs/Header','uint32','std_msgs/ColorRGBA','string','string','float32','bool','uint32','std_msgs/Time','std_msgs/Time','string','geometry_msgs/Point','geometry_msgs/Point','bool','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Pose2D[]','geometry_msgs/Pose2D[]','uint32','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,color,class_label_pred,subclass_label_pred,confidence,pose_reliable,tracking_age,age,lifetime,object_status,LeftTop,RightBottom,has_3dinfo,velocity,velocity_var,acceleration,acceleration_var,front_quad,back_quad,points_num,points_in_boundingbox2d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_2dobject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.class_label_pred is None:
        self.class_label_pred = ''
      if self.subclass_label_pred is None:
        self.subclass_label_pred = ''
      if self.confidence is None:
        self.confidence = 0.
      if self.pose_reliable is None:
        self.pose_reliable = False
      if self.tracking_age is None:
        self.tracking_age = 0
      if self.age is None:
        self.age = std_msgs.msg.Time()
      if self.lifetime is None:
        self.lifetime = std_msgs.msg.Time()
      if self.object_status is None:
        self.object_status = ''
      if self.LeftTop is None:
        self.LeftTop = geometry_msgs.msg.Point()
      if self.RightBottom is None:
        self.RightBottom = geometry_msgs.msg.Point()
      if self.has_3dinfo is None:
        self.has_3dinfo = False
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.velocity_var is None:
        self.velocity_var = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.acceleration_var is None:
        self.acceleration_var = geometry_msgs.msg.Twist()
      if self.front_quad is None:
        self.front_quad = []
      if self.back_quad is None:
        self.back_quad = []
      if self.points_num is None:
        self.points_num = 0
      if self.points_in_boundingbox2d is None:
        self.points_in_boundingbox2d = []
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.color = std_msgs.msg.ColorRGBA()
      self.class_label_pred = ''
      self.subclass_label_pred = ''
      self.confidence = 0.
      self.pose_reliable = False
      self.tracking_age = 0
      self.age = std_msgs.msg.Time()
      self.lifetime = std_msgs.msg.Time()
      self.object_status = ''
      self.LeftTop = geometry_msgs.msg.Point()
      self.RightBottom = geometry_msgs.msg.Point()
      self.has_3dinfo = False
      self.velocity = geometry_msgs.msg.Twist()
      self.velocity_var = geometry_msgs.msg.Twist()
      self.acceleration = geometry_msgs.msg.Twist()
      self.acceleration_var = geometry_msgs.msg.Twist()
      self.front_quad = []
      self.back_quad = []
      self.points_num = 0
      self.points_in_boundingbox2d = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I4f().pack(_x.id, _x.color.r, _x.color.g, _x.color.b, _x.color.a))
      _x = self.class_label_pred
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subclass_label_pred
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fB5I().pack(_x.confidence, _x.pose_reliable, _x.tracking_age, _x.age.data.secs, _x.age.data.nsecs, _x.lifetime.data.secs, _x.lifetime.data.nsecs))
      _x = self.object_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6dB24d().pack(_x.LeftTop.x, _x.LeftTop.y, _x.LeftTop.z, _x.RightBottom.x, _x.RightBottom.y, _x.RightBottom.z, _x.has_3dinfo, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.velocity_var.linear.x, _x.velocity_var.linear.y, _x.velocity_var.linear.z, _x.velocity_var.angular.x, _x.velocity_var.angular.y, _x.velocity_var.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_var.linear.x, _x.acceleration_var.linear.y, _x.acceleration_var.linear.z, _x.acceleration_var.angular.x, _x.acceleration_var.angular.y, _x.acceleration_var.angular.z))
      length = len(self.front_quad)
      buff.write(_struct_I.pack(length))
      for val1 in self.front_quad:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      length = len(self.back_quad)
      buff.write(_struct_I.pack(length))
      for val1 in self.back_quad:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      _x = self.points_num
      buff.write(_get_struct_I().pack(_x))
      length = len(self.points_in_boundingbox2d)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.points_in_boundingbox2d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.age is None:
        self.age = std_msgs.msg.Time()
      if self.lifetime is None:
        self.lifetime = std_msgs.msg.Time()
      if self.LeftTop is None:
        self.LeftTop = geometry_msgs.msg.Point()
      if self.RightBottom is None:
        self.RightBottom = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.velocity_var is None:
        self.velocity_var = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.acceleration_var is None:
        self.acceleration_var = geometry_msgs.msg.Twist()
      if self.front_quad is None:
        self.front_quad = None
      if self.back_quad is None:
        self.back_quad = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.id, _x.color.r, _x.color.g, _x.color.b, _x.color.a,) = _get_struct_I4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_label_pred = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_label_pred = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subclass_label_pred = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subclass_label_pred = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.confidence, _x.pose_reliable, _x.tracking_age, _x.age.data.secs, _x.age.data.nsecs, _x.lifetime.data.secs, _x.lifetime.data.nsecs,) = _get_struct_fB5I().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_status = str[start:end]
      _x = self
      start = end
      end += 241
      (_x.LeftTop.x, _x.LeftTop.y, _x.LeftTop.z, _x.RightBottom.x, _x.RightBottom.y, _x.RightBottom.z, _x.has_3dinfo, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.velocity_var.linear.x, _x.velocity_var.linear.y, _x.velocity_var.linear.z, _x.velocity_var.angular.x, _x.velocity_var.angular.y, _x.velocity_var.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_var.linear.x, _x.acceleration_var.linear.y, _x.acceleration_var.linear.z, _x.acceleration_var.angular.x, _x.acceleration_var.angular.y, _x.acceleration_var.angular.z,) = _get_struct_6dB24d().unpack(str[start:end])
      self.has_3dinfo = bool(self.has_3dinfo)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.front_quad = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.front_quad.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.back_quad = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.back_quad.append(val1)
      start = end
      end += 4
      (self.points_num,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.points_in_boundingbox2d = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I4f().pack(_x.id, _x.color.r, _x.color.g, _x.color.b, _x.color.a))
      _x = self.class_label_pred
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subclass_label_pred
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fB5I().pack(_x.confidence, _x.pose_reliable, _x.tracking_age, _x.age.data.secs, _x.age.data.nsecs, _x.lifetime.data.secs, _x.lifetime.data.nsecs))
      _x = self.object_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6dB24d().pack(_x.LeftTop.x, _x.LeftTop.y, _x.LeftTop.z, _x.RightBottom.x, _x.RightBottom.y, _x.RightBottom.z, _x.has_3dinfo, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.velocity_var.linear.x, _x.velocity_var.linear.y, _x.velocity_var.linear.z, _x.velocity_var.angular.x, _x.velocity_var.angular.y, _x.velocity_var.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_var.linear.x, _x.acceleration_var.linear.y, _x.acceleration_var.linear.z, _x.acceleration_var.angular.x, _x.acceleration_var.angular.y, _x.acceleration_var.angular.z))
      length = len(self.front_quad)
      buff.write(_struct_I.pack(length))
      for val1 in self.front_quad:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      length = len(self.back_quad)
      buff.write(_struct_I.pack(length))
      for val1 in self.back_quad:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      _x = self.points_num
      buff.write(_get_struct_I().pack(_x))
      length = len(self.points_in_boundingbox2d)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.points_in_boundingbox2d.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.age is None:
        self.age = std_msgs.msg.Time()
      if self.lifetime is None:
        self.lifetime = std_msgs.msg.Time()
      if self.LeftTop is None:
        self.LeftTop = geometry_msgs.msg.Point()
      if self.RightBottom is None:
        self.RightBottom = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.velocity_var is None:
        self.velocity_var = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.acceleration_var is None:
        self.acceleration_var = geometry_msgs.msg.Twist()
      if self.front_quad is None:
        self.front_quad = None
      if self.back_quad is None:
        self.back_quad = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.id, _x.color.r, _x.color.g, _x.color.b, _x.color.a,) = _get_struct_I4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_label_pred = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_label_pred = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subclass_label_pred = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subclass_label_pred = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.confidence, _x.pose_reliable, _x.tracking_age, _x.age.data.secs, _x.age.data.nsecs, _x.lifetime.data.secs, _x.lifetime.data.nsecs,) = _get_struct_fB5I().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_status = str[start:end]
      _x = self
      start = end
      end += 241
      (_x.LeftTop.x, _x.LeftTop.y, _x.LeftTop.z, _x.RightBottom.x, _x.RightBottom.y, _x.RightBottom.z, _x.has_3dinfo, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.velocity_var.linear.x, _x.velocity_var.linear.y, _x.velocity_var.linear.z, _x.velocity_var.angular.x, _x.velocity_var.angular.y, _x.velocity_var.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_var.linear.x, _x.acceleration_var.linear.y, _x.acceleration_var.linear.z, _x.acceleration_var.angular.x, _x.acceleration_var.angular.y, _x.acceleration_var.angular.z,) = _get_struct_6dB24d().unpack(str[start:end])
      self.has_3dinfo = bool(self.has_3dinfo)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.front_quad = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.front_quad.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.back_quad = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.back_quad.append(val1)
      start = end
      end += 4
      (self.points_num,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.points_in_boundingbox2d = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6dB24d = None
def _get_struct_6dB24d():
    global _struct_6dB24d
    if _struct_6dB24d is None:
        _struct_6dB24d = struct.Struct("<6dB24d")
    return _struct_6dB24d
_struct_I4f = None
def _get_struct_I4f():
    global _struct_I4f
    if _struct_I4f is None:
        _struct_I4f = struct.Struct("<I4f")
    return _struct_I4f
_struct_fB5I = None
def _get_struct_fB5I():
    global _struct_fB5I
    if _struct_fB5I is None:
        _struct_fB5I = struct.Struct("<fB5I")
    return _struct_fB5I
