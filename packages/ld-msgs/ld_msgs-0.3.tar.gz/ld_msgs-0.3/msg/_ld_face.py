# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_face.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ld_face(genpy.Message):
  _md5sum = "1d16648dc9f82d5f390ede28d767edbb"
  _type = "ld_msgs/ld_face"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point[]             vertex_list


####################################### Field for future usage

uint32                          id

geometry_msgs/Point              backup_point_0
geometry_msgs/Point              backup_point_1
geometry_msgs/Point              backup_point_2
geometry_msgs/Point              backup_point_3
geometry_msgs/Point              backup_point_4
geometry_msgs/Point              backup_point_5
geometry_msgs/Point              backup_point_6

string                           backup_string_0
string                           backup_string_1
string                           backup_string_2
string                           backup_string_3
string                           backup_string_4
string                           backup_string_5
string                           backup_string_6


bool                             backup_bool_0
bool                             backup_bool_1
bool                             backup_bool_2
bool                             backup_bool_3
bool                             backup_bool_4
bool                             backup_bool_5

float32                          backup_float_0
float32                          backup_float_1
float32                          backup_float_2
float32                          backup_float_3
float32                          backup_float_4
float32                          backup_float_5

int8                             backup_int_0
int8                             backup_int_1
int8                             backup_int_2
int8                             backup_int_3
int8                             backup_int_4
int8                             backup_int_5

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['vertex_list','id','backup_point_0','backup_point_1','backup_point_2','backup_point_3','backup_point_4','backup_point_5','backup_point_6','backup_string_0','backup_string_1','backup_string_2','backup_string_3','backup_string_4','backup_string_5','backup_string_6','backup_bool_0','backup_bool_1','backup_bool_2','backup_bool_3','backup_bool_4','backup_bool_5','backup_float_0','backup_float_1','backup_float_2','backup_float_3','backup_float_4','backup_float_5','backup_int_0','backup_int_1','backup_int_2','backup_int_3','backup_int_4','backup_int_5']
  _slot_types = ['geometry_msgs/Point[]','uint32','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','string','string','string','string','string','string','string','bool','bool','bool','bool','bool','bool','float32','float32','float32','float32','float32','float32','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vertex_list,id,backup_point_0,backup_point_1,backup_point_2,backup_point_3,backup_point_4,backup_point_5,backup_point_6,backup_string_0,backup_string_1,backup_string_2,backup_string_3,backup_string_4,backup_string_5,backup_string_6,backup_bool_0,backup_bool_1,backup_bool_2,backup_bool_3,backup_bool_4,backup_bool_5,backup_float_0,backup_float_1,backup_float_2,backup_float_3,backup_float_4,backup_float_5,backup_int_0,backup_int_1,backup_int_2,backup_int_3,backup_int_4,backup_int_5

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_face, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vertex_list is None:
        self.vertex_list = []
      if self.id is None:
        self.id = 0
      if self.backup_point_0 is None:
        self.backup_point_0 = geometry_msgs.msg.Point()
      if self.backup_point_1 is None:
        self.backup_point_1 = geometry_msgs.msg.Point()
      if self.backup_point_2 is None:
        self.backup_point_2 = geometry_msgs.msg.Point()
      if self.backup_point_3 is None:
        self.backup_point_3 = geometry_msgs.msg.Point()
      if self.backup_point_4 is None:
        self.backup_point_4 = geometry_msgs.msg.Point()
      if self.backup_point_5 is None:
        self.backup_point_5 = geometry_msgs.msg.Point()
      if self.backup_point_6 is None:
        self.backup_point_6 = geometry_msgs.msg.Point()
      if self.backup_string_0 is None:
        self.backup_string_0 = ''
      if self.backup_string_1 is None:
        self.backup_string_1 = ''
      if self.backup_string_2 is None:
        self.backup_string_2 = ''
      if self.backup_string_3 is None:
        self.backup_string_3 = ''
      if self.backup_string_4 is None:
        self.backup_string_4 = ''
      if self.backup_string_5 is None:
        self.backup_string_5 = ''
      if self.backup_string_6 is None:
        self.backup_string_6 = ''
      if self.backup_bool_0 is None:
        self.backup_bool_0 = False
      if self.backup_bool_1 is None:
        self.backup_bool_1 = False
      if self.backup_bool_2 is None:
        self.backup_bool_2 = False
      if self.backup_bool_3 is None:
        self.backup_bool_3 = False
      if self.backup_bool_4 is None:
        self.backup_bool_4 = False
      if self.backup_bool_5 is None:
        self.backup_bool_5 = False
      if self.backup_float_0 is None:
        self.backup_float_0 = 0.
      if self.backup_float_1 is None:
        self.backup_float_1 = 0.
      if self.backup_float_2 is None:
        self.backup_float_2 = 0.
      if self.backup_float_3 is None:
        self.backup_float_3 = 0.
      if self.backup_float_4 is None:
        self.backup_float_4 = 0.
      if self.backup_float_5 is None:
        self.backup_float_5 = 0.
      if self.backup_int_0 is None:
        self.backup_int_0 = 0
      if self.backup_int_1 is None:
        self.backup_int_1 = 0
      if self.backup_int_2 is None:
        self.backup_int_2 = 0
      if self.backup_int_3 is None:
        self.backup_int_3 = 0
      if self.backup_int_4 is None:
        self.backup_int_4 = 0
      if self.backup_int_5 is None:
        self.backup_int_5 = 0
    else:
      self.vertex_list = []
      self.id = 0
      self.backup_point_0 = geometry_msgs.msg.Point()
      self.backup_point_1 = geometry_msgs.msg.Point()
      self.backup_point_2 = geometry_msgs.msg.Point()
      self.backup_point_3 = geometry_msgs.msg.Point()
      self.backup_point_4 = geometry_msgs.msg.Point()
      self.backup_point_5 = geometry_msgs.msg.Point()
      self.backup_point_6 = geometry_msgs.msg.Point()
      self.backup_string_0 = ''
      self.backup_string_1 = ''
      self.backup_string_2 = ''
      self.backup_string_3 = ''
      self.backup_string_4 = ''
      self.backup_string_5 = ''
      self.backup_string_6 = ''
      self.backup_bool_0 = False
      self.backup_bool_1 = False
      self.backup_bool_2 = False
      self.backup_bool_3 = False
      self.backup_bool_4 = False
      self.backup_bool_5 = False
      self.backup_float_0 = 0.
      self.backup_float_1 = 0.
      self.backup_float_2 = 0.
      self.backup_float_3 = 0.
      self.backup_float_4 = 0.
      self.backup_float_5 = 0.
      self.backup_int_0 = 0
      self.backup_int_1 = 0
      self.backup_int_2 = 0
      self.backup_int_3 = 0
      self.backup_int_4 = 0
      self.backup_int_5 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.vertex_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.vertex_list:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_I21d().pack(_x.id, _x.backup_point_0.x, _x.backup_point_0.y, _x.backup_point_0.z, _x.backup_point_1.x, _x.backup_point_1.y, _x.backup_point_1.z, _x.backup_point_2.x, _x.backup_point_2.y, _x.backup_point_2.z, _x.backup_point_3.x, _x.backup_point_3.y, _x.backup_point_3.z, _x.backup_point_4.x, _x.backup_point_4.y, _x.backup_point_4.z, _x.backup_point_5.x, _x.backup_point_5.y, _x.backup_point_5.z, _x.backup_point_6.x, _x.backup_point_6.y, _x.backup_point_6.z))
      _x = self.backup_string_0
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_4
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_5
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_6
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vertex_list is None:
        self.vertex_list = None
      if self.backup_point_0 is None:
        self.backup_point_0 = geometry_msgs.msg.Point()
      if self.backup_point_1 is None:
        self.backup_point_1 = geometry_msgs.msg.Point()
      if self.backup_point_2 is None:
        self.backup_point_2 = geometry_msgs.msg.Point()
      if self.backup_point_3 is None:
        self.backup_point_3 = geometry_msgs.msg.Point()
      if self.backup_point_4 is None:
        self.backup_point_4 = geometry_msgs.msg.Point()
      if self.backup_point_5 is None:
        self.backup_point_5 = geometry_msgs.msg.Point()
      if self.backup_point_6 is None:
        self.backup_point_6 = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vertex_list = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.vertex_list.append(val1)
      _x = self
      start = end
      end += 172
      (_x.id, _x.backup_point_0.x, _x.backup_point_0.y, _x.backup_point_0.z, _x.backup_point_1.x, _x.backup_point_1.y, _x.backup_point_1.z, _x.backup_point_2.x, _x.backup_point_2.y, _x.backup_point_2.z, _x.backup_point_3.x, _x.backup_point_3.y, _x.backup_point_3.z, _x.backup_point_4.x, _x.backup_point_4.y, _x.backup_point_4.z, _x.backup_point_5.x, _x.backup_point_5.y, _x.backup_point_5.z, _x.backup_point_6.x, _x.backup_point_6.y, _x.backup_point_6.z,) = _get_struct_I21d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_0 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_4 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_5 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_6 = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
      self.backup_bool_0 = bool(self.backup_bool_0)
      self.backup_bool_1 = bool(self.backup_bool_1)
      self.backup_bool_2 = bool(self.backup_bool_2)
      self.backup_bool_3 = bool(self.backup_bool_3)
      self.backup_bool_4 = bool(self.backup_bool_4)
      self.backup_bool_5 = bool(self.backup_bool_5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.vertex_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.vertex_list:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_I21d().pack(_x.id, _x.backup_point_0.x, _x.backup_point_0.y, _x.backup_point_0.z, _x.backup_point_1.x, _x.backup_point_1.y, _x.backup_point_1.z, _x.backup_point_2.x, _x.backup_point_2.y, _x.backup_point_2.z, _x.backup_point_3.x, _x.backup_point_3.y, _x.backup_point_3.z, _x.backup_point_4.x, _x.backup_point_4.y, _x.backup_point_4.z, _x.backup_point_5.x, _x.backup_point_5.y, _x.backup_point_5.z, _x.backup_point_6.x, _x.backup_point_6.y, _x.backup_point_6.z))
      _x = self.backup_string_0
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_4
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_5
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_6
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vertex_list is None:
        self.vertex_list = None
      if self.backup_point_0 is None:
        self.backup_point_0 = geometry_msgs.msg.Point()
      if self.backup_point_1 is None:
        self.backup_point_1 = geometry_msgs.msg.Point()
      if self.backup_point_2 is None:
        self.backup_point_2 = geometry_msgs.msg.Point()
      if self.backup_point_3 is None:
        self.backup_point_3 = geometry_msgs.msg.Point()
      if self.backup_point_4 is None:
        self.backup_point_4 = geometry_msgs.msg.Point()
      if self.backup_point_5 is None:
        self.backup_point_5 = geometry_msgs.msg.Point()
      if self.backup_point_6 is None:
        self.backup_point_6 = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vertex_list = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.vertex_list.append(val1)
      _x = self
      start = end
      end += 172
      (_x.id, _x.backup_point_0.x, _x.backup_point_0.y, _x.backup_point_0.z, _x.backup_point_1.x, _x.backup_point_1.y, _x.backup_point_1.z, _x.backup_point_2.x, _x.backup_point_2.y, _x.backup_point_2.z, _x.backup_point_3.x, _x.backup_point_3.y, _x.backup_point_3.z, _x.backup_point_4.x, _x.backup_point_4.y, _x.backup_point_4.z, _x.backup_point_5.x, _x.backup_point_5.y, _x.backup_point_5.z, _x.backup_point_6.x, _x.backup_point_6.y, _x.backup_point_6.z,) = _get_struct_I21d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_0 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_4 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_5 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_6 = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
      self.backup_bool_0 = bool(self.backup_bool_0)
      self.backup_bool_1 = bool(self.backup_bool_1)
      self.backup_bool_2 = bool(self.backup_bool_2)
      self.backup_bool_3 = bool(self.backup_bool_3)
      self.backup_bool_4 = bool(self.backup_bool_4)
      self.backup_bool_5 = bool(self.backup_bool_5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6B6f6b = None
def _get_struct_6B6f6b():
    global _struct_6B6f6b
    if _struct_6B6f6b is None:
        _struct_6B6f6b = struct.Struct("<6B6f6b")
    return _struct_6B6f6b
_struct_I21d = None
def _get_struct_I21d():
    global _struct_I21d
    if _struct_I21d is None:
        _struct_I21d = struct.Struct("<I21d")
    return _struct_I21d
