# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_road_feature_feature.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class ld_road_feature_feature(genpy.Message):
  _md5sum = "3a94037fdcae703861b71833c88aecfe"
  _type = "ld_msgs/ld_road_feature_feature"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header                 header
################ feature character
uint32                          id_feature
uint8                           shape_type # shape type

################ Cylinder
geometry_msgs/Pose              axis_pose 
float32                         radius
float32                         height

################ Curve
float32                         a
float32                         b
float32                         c
float32                         d
float32                         start_x
float32                         end_x
uint8                           curve_type
bool                            has_width_curve
float32                         curve_confidence
bool                            side
float32                         width_curve
float32                         interval
float32                         length_curve

################ Line3D
geometry_msgs/Pose              pose 
bool                            has_length
bool                            has_width_line
float32                         length_line
float32                         width_line



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','id_feature','shape_type','axis_pose','radius','height','a','b','c','d','start_x','end_x','curve_type','has_width_curve','curve_confidence','side','width_curve','interval','length_curve','pose','has_length','has_width_line','length_line','width_line']
  _slot_types = ['std_msgs/Header','uint32','uint8','geometry_msgs/Pose','float32','float32','float32','float32','float32','float32','float32','float32','uint8','bool','float32','bool','float32','float32','float32','geometry_msgs/Pose','bool','bool','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id_feature,shape_type,axis_pose,radius,height,a,b,c,d,start_x,end_x,curve_type,has_width_curve,curve_confidence,side,width_curve,interval,length_curve,pose,has_length,has_width_line,length_line,width_line

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_road_feature_feature, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id_feature is None:
        self.id_feature = 0
      if self.shape_type is None:
        self.shape_type = 0
      if self.axis_pose is None:
        self.axis_pose = geometry_msgs.msg.Pose()
      if self.radius is None:
        self.radius = 0.
      if self.height is None:
        self.height = 0.
      if self.a is None:
        self.a = 0.
      if self.b is None:
        self.b = 0.
      if self.c is None:
        self.c = 0.
      if self.d is None:
        self.d = 0.
      if self.start_x is None:
        self.start_x = 0.
      if self.end_x is None:
        self.end_x = 0.
      if self.curve_type is None:
        self.curve_type = 0
      if self.has_width_curve is None:
        self.has_width_curve = False
      if self.curve_confidence is None:
        self.curve_confidence = 0.
      if self.side is None:
        self.side = False
      if self.width_curve is None:
        self.width_curve = 0.
      if self.interval is None:
        self.interval = 0.
      if self.length_curve is None:
        self.length_curve = 0.
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.has_length is None:
        self.has_length = False
      if self.has_width_line is None:
        self.has_width_line = False
      if self.length_line is None:
        self.length_line = 0.
      if self.width_line is None:
        self.width_line = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.id_feature = 0
      self.shape_type = 0
      self.axis_pose = geometry_msgs.msg.Pose()
      self.radius = 0.
      self.height = 0.
      self.a = 0.
      self.b = 0.
      self.c = 0.
      self.d = 0.
      self.start_x = 0.
      self.end_x = 0.
      self.curve_type = 0
      self.has_width_curve = False
      self.curve_confidence = 0.
      self.side = False
      self.width_curve = 0.
      self.interval = 0.
      self.length_curve = 0.
      self.pose = geometry_msgs.msg.Pose()
      self.has_length = False
      self.has_width_line = False
      self.length_line = 0.
      self.width_line = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IB7d8f2BfB3f7d2B2f().pack(_x.id_feature, _x.shape_type, _x.axis_pose.position.x, _x.axis_pose.position.y, _x.axis_pose.position.z, _x.axis_pose.orientation.x, _x.axis_pose.orientation.y, _x.axis_pose.orientation.z, _x.axis_pose.orientation.w, _x.radius, _x.height, _x.a, _x.b, _x.c, _x.d, _x.start_x, _x.end_x, _x.curve_type, _x.has_width_curve, _x.curve_confidence, _x.side, _x.width_curve, _x.interval, _x.length_curve, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.has_length, _x.has_width_line, _x.length_line, _x.width_line))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.axis_pose is None:
        self.axis_pose = geometry_msgs.msg.Pose()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 178
      (_x.id_feature, _x.shape_type, _x.axis_pose.position.x, _x.axis_pose.position.y, _x.axis_pose.position.z, _x.axis_pose.orientation.x, _x.axis_pose.orientation.y, _x.axis_pose.orientation.z, _x.axis_pose.orientation.w, _x.radius, _x.height, _x.a, _x.b, _x.c, _x.d, _x.start_x, _x.end_x, _x.curve_type, _x.has_width_curve, _x.curve_confidence, _x.side, _x.width_curve, _x.interval, _x.length_curve, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.has_length, _x.has_width_line, _x.length_line, _x.width_line,) = _get_struct_IB7d8f2BfB3f7d2B2f().unpack(str[start:end])
      self.has_width_curve = bool(self.has_width_curve)
      self.side = bool(self.side)
      self.has_length = bool(self.has_length)
      self.has_width_line = bool(self.has_width_line)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IB7d8f2BfB3f7d2B2f().pack(_x.id_feature, _x.shape_type, _x.axis_pose.position.x, _x.axis_pose.position.y, _x.axis_pose.position.z, _x.axis_pose.orientation.x, _x.axis_pose.orientation.y, _x.axis_pose.orientation.z, _x.axis_pose.orientation.w, _x.radius, _x.height, _x.a, _x.b, _x.c, _x.d, _x.start_x, _x.end_x, _x.curve_type, _x.has_width_curve, _x.curve_confidence, _x.side, _x.width_curve, _x.interval, _x.length_curve, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.has_length, _x.has_width_line, _x.length_line, _x.width_line))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.axis_pose is None:
        self.axis_pose = geometry_msgs.msg.Pose()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 178
      (_x.id_feature, _x.shape_type, _x.axis_pose.position.x, _x.axis_pose.position.y, _x.axis_pose.position.z, _x.axis_pose.orientation.x, _x.axis_pose.orientation.y, _x.axis_pose.orientation.z, _x.axis_pose.orientation.w, _x.radius, _x.height, _x.a, _x.b, _x.c, _x.d, _x.start_x, _x.end_x, _x.curve_type, _x.has_width_curve, _x.curve_confidence, _x.side, _x.width_curve, _x.interval, _x.length_curve, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.has_length, _x.has_width_line, _x.length_line, _x.width_line,) = _get_struct_IB7d8f2BfB3f7d2B2f().unpack(str[start:end])
      self.has_width_curve = bool(self.has_width_curve)
      self.side = bool(self.side)
      self.has_length = bool(self.has_length)
      self.has_width_line = bool(self.has_width_line)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_IB7d8f2BfB3f7d2B2f = None
def _get_struct_IB7d8f2BfB3f7d2B2f():
    global _struct_IB7d8f2BfB3f7d2B2f
    if _struct_IB7d8f2BfB3f7d2B2f is None:
        _struct_IB7d8f2BfB3f7d2B2f = struct.Struct("<IB7d8f2BfB3f7d2B2f")
    return _struct_IB7d8f2BfB3f7d2B2f
