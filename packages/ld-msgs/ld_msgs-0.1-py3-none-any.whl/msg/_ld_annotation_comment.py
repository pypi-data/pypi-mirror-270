# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_annotation_comment.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import ld_msgs.msg
import std_msgs.msg

class ld_annotation_comment(genpy.Message):
  _md5sum = "0b644e4f716f782ba697bb37e50f9c8a"
  _type = "ld_msgs/ld_annotation_comment"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header                 header

################ comment id within a certain frame. Different frames can have comments with identical id.
uint32                          id

################ comment histroy. The most recent, aka the current comment, is represented by the last item.

ld_annotation_comment_item[]    comment_stack

################ region of interest
geometry_msgs/Point[]           roi
string                          roi_type

################ screenshot
ld_image                        screenshot

################ comment metadata
time                            target_topic_timestamp
uint32                          target_topic_currnt_frame
uint32                          target_topic_start_frame
uint32                          target_topic_end_frame
string                          target_topic_name
string                          target_topic_type

################ reserved
string[]                        reserved

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ld_msgs/ld_annotation_comment_item
std_msgs/Header header

string          comment
string          sub_comment
string          additional_details
string          status #  "Pending", "In Progress", "Done", "Ignored"

################ timestamp when this comment item is created
time            comment_update_timestamp

################ [by whom / from which device] is this item created
string          comment_updated_by_user
string          comment_updated_by_ip

################ updated screenshot
ld_image        updated_screenshot

################ reserved
string[]        reserved

================================================================================
MSG: ld_msgs/ld_image
# This message contains an compressed image
# the compressed data contains the data struct header and compressed data
# 

Header header              # header timestamp shoul be acquisition time of the image

uint8 image_format         # format of the image: 0-JPEG 1-MJPEG 2-GRAY8 3-YUV420 4-YUV422

uint8 device_id            # ID for the camera device


uint32 image_width         # image width, that is, number of columns

uint32 image_height        # image height, that is, number of rows


uint8 is_bigendian         # is this data bigendian?

uint32 compressed_size     # the size of the following compressed data

uint8[] compressed_data    # the compressed image data, including the data header and compressed data 


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','id','comment_stack','roi','roi_type','screenshot','target_topic_timestamp','target_topic_currnt_frame','target_topic_start_frame','target_topic_end_frame','target_topic_name','target_topic_type','reserved']
  _slot_types = ['std_msgs/Header','uint32','ld_msgs/ld_annotation_comment_item[]','geometry_msgs/Point[]','string','ld_msgs/ld_image','time','uint32','uint32','uint32','string','string','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,comment_stack,roi,roi_type,screenshot,target_topic_timestamp,target_topic_currnt_frame,target_topic_start_frame,target_topic_end_frame,target_topic_name,target_topic_type,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_annotation_comment, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.comment_stack is None:
        self.comment_stack = []
      if self.roi is None:
        self.roi = []
      if self.roi_type is None:
        self.roi_type = ''
      if self.screenshot is None:
        self.screenshot = ld_msgs.msg.ld_image()
      if self.target_topic_timestamp is None:
        self.target_topic_timestamp = genpy.Time()
      if self.target_topic_currnt_frame is None:
        self.target_topic_currnt_frame = 0
      if self.target_topic_start_frame is None:
        self.target_topic_start_frame = 0
      if self.target_topic_end_frame is None:
        self.target_topic_end_frame = 0
      if self.target_topic_name is None:
        self.target_topic_name = ''
      if self.target_topic_type is None:
        self.target_topic_type = ''
      if self.reserved is None:
        self.reserved = []
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.comment_stack = []
      self.roi = []
      self.roi_type = ''
      self.screenshot = ld_msgs.msg.ld_image()
      self.target_topic_timestamp = genpy.Time()
      self.target_topic_currnt_frame = 0
      self.target_topic_start_frame = 0
      self.target_topic_end_frame = 0
      self.target_topic_name = ''
      self.target_topic_type = ''
      self.reserved = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      length = len(self.comment_stack)
      buff.write(_struct_I.pack(length))
      for val1 in self.comment_stack:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.sub_comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.additional_details
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.comment_update_timestamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1.comment_updated_by_user
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.comment_updated_by_ip
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v4 = val1.updated_screenshot
        _v5 = _v4.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v4
        buff.write(_get_struct_2B2IBI().pack(_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size))
        _x = _v4.compressed_data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        for val2 in val1.reserved:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
      length = len(self.roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.roi:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.roi_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.screenshot.header.seq, _x.screenshot.header.stamp.secs, _x.screenshot.header.stamp.nsecs))
      _x = self.screenshot.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2IBI().pack(_x.screenshot.image_format, _x.screenshot.device_id, _x.screenshot.image_width, _x.screenshot.image_height, _x.screenshot.is_bigendian, _x.screenshot.compressed_size))
      _x = self.screenshot.compressed_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5I().pack(_x.target_topic_timestamp.secs, _x.target_topic_timestamp.nsecs, _x.target_topic_currnt_frame, _x.target_topic_start_frame, _x.target_topic_end_frame))
      _x = self.target_topic_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.target_topic_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      for val1 in self.reserved:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.comment_stack is None:
        self.comment_stack = None
      if self.roi is None:
        self.roi = None
      if self.screenshot is None:
        self.screenshot = ld_msgs.msg.ld_image()
      if self.target_topic_timestamp is None:
        self.target_topic_timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.comment_stack = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_annotation_comment_item()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comment = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comment = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sub_comment = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sub_comment = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.additional_details = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.additional_details = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.status = str[start:end]
        _v9 = val1.comment_update_timestamp
        _x = _v9
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comment_updated_by_user = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comment_updated_by_user = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comment_updated_by_ip = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comment_updated_by_ip = str[start:end]
        _v10 = val1.updated_screenshot
        _v11 = _v10.header
        start = end
        end += 4
        (_v11.seq,) = _get_struct_I().unpack(str[start:end])
        _v12 = _v11.stamp
        _x = _v12
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v11.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v11.frame_id = str[start:end]
        _x = _v10
        start = end
        end += 15
        (_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v10.compressed_data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.reserved = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.reserved.append(val2)
        self.comment_stack.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roi = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roi_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.roi_type = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.screenshot.header.seq, _x.screenshot.header.stamp.secs, _x.screenshot.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.screenshot.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.screenshot.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.screenshot.image_format, _x.screenshot.device_id, _x.screenshot.image_width, _x.screenshot.image_height, _x.screenshot.is_bigendian, _x.screenshot.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.screenshot.compressed_data = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.target_topic_timestamp.secs, _x.target_topic_timestamp.nsecs, _x.target_topic_currnt_frame, _x.target_topic_start_frame, _x.target_topic_end_frame,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_topic_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_topic_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_topic_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_topic_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reserved = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.reserved.append(val1)
      self.target_topic_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      length = len(self.comment_stack)
      buff.write(_struct_I.pack(length))
      for val1 in self.comment_stack:
        _v13 = val1.header
        _x = _v13.seq
        buff.write(_get_struct_I().pack(_x))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.sub_comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.additional_details
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v15 = val1.comment_update_timestamp
        _x = _v15
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1.comment_updated_by_user
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.comment_updated_by_ip
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v16 = val1.updated_screenshot
        _v17 = _v16.header
        _x = _v17.seq
        buff.write(_get_struct_I().pack(_x))
        _v18 = _v17.stamp
        _x = _v18
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v17.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v16
        buff.write(_get_struct_2B2IBI().pack(_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size))
        _x = _v16.compressed_data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        for val2 in val1.reserved:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
      length = len(self.roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.roi:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.roi_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.screenshot.header.seq, _x.screenshot.header.stamp.secs, _x.screenshot.header.stamp.nsecs))
      _x = self.screenshot.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2IBI().pack(_x.screenshot.image_format, _x.screenshot.device_id, _x.screenshot.image_width, _x.screenshot.image_height, _x.screenshot.is_bigendian, _x.screenshot.compressed_size))
      _x = self.screenshot.compressed_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5I().pack(_x.target_topic_timestamp.secs, _x.target_topic_timestamp.nsecs, _x.target_topic_currnt_frame, _x.target_topic_start_frame, _x.target_topic_end_frame))
      _x = self.target_topic_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.target_topic_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      for val1 in self.reserved:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.comment_stack is None:
        self.comment_stack = None
      if self.roi is None:
        self.roi = None
      if self.screenshot is None:
        self.screenshot = ld_msgs.msg.ld_image()
      if self.target_topic_timestamp is None:
        self.target_topic_timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.comment_stack = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_annotation_comment_item()
        _v19 = val1.header
        start = end
        end += 4
        (_v19.seq,) = _get_struct_I().unpack(str[start:end])
        _v20 = _v19.stamp
        _x = _v20
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v19.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v19.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comment = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comment = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sub_comment = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sub_comment = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.additional_details = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.additional_details = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.status = str[start:end]
        _v21 = val1.comment_update_timestamp
        _x = _v21
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comment_updated_by_user = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comment_updated_by_user = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comment_updated_by_ip = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comment_updated_by_ip = str[start:end]
        _v22 = val1.updated_screenshot
        _v23 = _v22.header
        start = end
        end += 4
        (_v23.seq,) = _get_struct_I().unpack(str[start:end])
        _v24 = _v23.stamp
        _x = _v24
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v23.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v23.frame_id = str[start:end]
        _x = _v22
        start = end
        end += 15
        (_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v22.compressed_data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.reserved = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.reserved.append(val2)
        self.comment_stack.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roi = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roi_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.roi_type = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.screenshot.header.seq, _x.screenshot.header.stamp.secs, _x.screenshot.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.screenshot.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.screenshot.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.screenshot.image_format, _x.screenshot.device_id, _x.screenshot.image_width, _x.screenshot.image_height, _x.screenshot.is_bigendian, _x.screenshot.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.screenshot.compressed_data = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.target_topic_timestamp.secs, _x.target_topic_timestamp.nsecs, _x.target_topic_currnt_frame, _x.target_topic_start_frame, _x.target_topic_end_frame,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_topic_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_topic_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_topic_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_topic_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reserved = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.reserved.append(val1)
      self.target_topic_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2IBI = None
def _get_struct_2B2IBI():
    global _struct_2B2IBI
    if _struct_2B2IBI is None:
        _struct_2B2IBI = struct.Struct("<2B2IBI")
    return _struct_2B2IBI
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I
