# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_road_feature_list.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import ld_msgs.msg
import std_msgs.msg

class ld_road_feature_list(genpy.Message):
  _md5sum = "3bbdca6f44385485ff52fe8d91470858"
  _type = "ld_msgs/ld_road_feature_list"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header                 header
uint32                          frame_number
ld_road_feature_facility[]      facility
ld_road_feature_lane[]          lane
ld_road_feature_feature[]       feature
uint8                           ego_lane
uint8                           lane_num
uint8                           facility_num
uint8                           feature_num
float32                         left_distance
float32                         right_distance
float32                         left_angle
float32                         right_angle
uint8                           scene_quality
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ld_msgs/ld_road_feature_facility
std_msgs/Header                 header
################ facility character
uint32                          id_facility
string                          facility_type # dynamic or static status of the object
geometry_msgs/Point             position_facility  


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: ld_msgs/ld_road_feature_lane
std_msgs/Header                 header
################ lane character
uint32                          id_lane
geometry_msgs/Point             position_lane  
uint8                           lane_quality # quality of the lane
float32                         width  

================================================================================
MSG: ld_msgs/ld_road_feature_feature
std_msgs/Header                 header
################ feature character
uint32                          id_feature
uint8                           shape_type # shape type

################ Cylinder
geometry_msgs/Pose              axis_pose 
float32                         radius
float32                         height

################ Curve
float32                         a
float32                         b
float32                         c
float32                         d
float32                         start_x
float32                         end_x
uint8                           curve_type
bool                            has_width_curve
float32                         curve_confidence
bool                            side
float32                         width_curve
float32                         interval
float32                         length_curve

################ Line3D
geometry_msgs/Pose              pose 
bool                            has_length
bool                            has_width_line
float32                         length_line
float32                         width_line



================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','frame_number','facility','lane','feature','ego_lane','lane_num','facility_num','feature_num','left_distance','right_distance','left_angle','right_angle','scene_quality']
  _slot_types = ['std_msgs/Header','uint32','ld_msgs/ld_road_feature_facility[]','ld_msgs/ld_road_feature_lane[]','ld_msgs/ld_road_feature_feature[]','uint8','uint8','uint8','uint8','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_number,facility,lane,feature,ego_lane,lane_num,facility_num,feature_num,left_distance,right_distance,left_angle,right_angle,scene_quality

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_road_feature_list, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_number is None:
        self.frame_number = 0
      if self.facility is None:
        self.facility = []
      if self.lane is None:
        self.lane = []
      if self.feature is None:
        self.feature = []
      if self.ego_lane is None:
        self.ego_lane = 0
      if self.lane_num is None:
        self.lane_num = 0
      if self.facility_num is None:
        self.facility_num = 0
      if self.feature_num is None:
        self.feature_num = 0
      if self.left_distance is None:
        self.left_distance = 0.
      if self.right_distance is None:
        self.right_distance = 0.
      if self.left_angle is None:
        self.left_angle = 0.
      if self.right_angle is None:
        self.right_angle = 0.
      if self.scene_quality is None:
        self.scene_quality = 0
    else:
      self.header = std_msgs.msg.Header()
      self.frame_number = 0
      self.facility = []
      self.lane = []
      self.feature = []
      self.ego_lane = 0
      self.lane_num = 0
      self.facility_num = 0
      self.feature_num = 0
      self.left_distance = 0.
      self.right_distance = 0.
      self.left_angle = 0.
      self.right_angle = 0.
      self.scene_quality = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_number
      buff.write(_get_struct_I().pack(_x))
      length = len(self.facility)
      buff.write(_struct_I.pack(length))
      for val1 in self.facility:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id_facility
        buff.write(_get_struct_I().pack(_x))
        _x = val1.facility_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.position_facility
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane:
        _v4 = val1.header
        _x = _v4.seq
        buff.write(_get_struct_I().pack(_x))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id_lane
        buff.write(_get_struct_I().pack(_x))
        _v6 = val1.position_lane
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.lane_quality, _x.width))
      length = len(self.feature)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature:
        _v7 = val1.header
        _x = _v7.seq
        buff.write(_get_struct_I().pack(_x))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IB().pack(_x.id_feature, _x.shape_type))
        _v9 = val1.axis_pose
        _v10 = _v9.position
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v9.orientation
        _x = _v11
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_8f2BfB3f().pack(_x.radius, _x.height, _x.a, _x.b, _x.c, _x.d, _x.start_x, _x.end_x, _x.curve_type, _x.has_width_curve, _x.curve_confidence, _x.side, _x.width_curve, _x.interval, _x.length_curve))
        _v12 = val1.pose
        _v13 = _v12.position
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v12.orientation
        _x = _v14
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2B2f().pack(_x.has_length, _x.has_width_line, _x.length_line, _x.width_line))
      _x = self
      buff.write(_get_struct_4B4fB().pack(_x.ego_lane, _x.lane_num, _x.facility_num, _x.feature_num, _x.left_distance, _x.right_distance, _x.left_angle, _x.right_angle, _x.scene_quality))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.facility is None:
        self.facility = None
      if self.lane is None:
        self.lane = None
      if self.feature is None:
        self.feature = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_number,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.facility = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_road_feature_facility()
        _v15 = val1.header
        start = end
        end += 4
        (_v15.seq,) = _get_struct_I().unpack(str[start:end])
        _v16 = _v15.stamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id_facility,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.facility_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.facility_type = str[start:end]
        _v17 = val1.position_facility
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.facility.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_road_feature_lane()
        _v18 = val1.header
        start = end
        end += 4
        (_v18.seq,) = _get_struct_I().unpack(str[start:end])
        _v19 = _v18.stamp
        _x = _v19
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v18.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v18.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id_lane,) = _get_struct_I().unpack(str[start:end])
        _v20 = val1.position_lane
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.lane_quality, _x.width,) = _get_struct_Bf().unpack(str[start:end])
        self.lane.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_road_feature_feature()
        _v21 = val1.header
        start = end
        end += 4
        (_v21.seq,) = _get_struct_I().unpack(str[start:end])
        _v22 = _v21.stamp
        _x = _v22
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v21.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v21.frame_id = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.id_feature, _x.shape_type,) = _get_struct_IB().unpack(str[start:end])
        _v23 = val1.axis_pose
        _v24 = _v23.position
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v25 = _v23.orientation
        _x = _v25
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 51
        (_x.radius, _x.height, _x.a, _x.b, _x.c, _x.d, _x.start_x, _x.end_x, _x.curve_type, _x.has_width_curve, _x.curve_confidence, _x.side, _x.width_curve, _x.interval, _x.length_curve,) = _get_struct_8f2BfB3f().unpack(str[start:end])
        val1.has_width_curve = bool(val1.has_width_curve)
        val1.side = bool(val1.side)
        _v26 = val1.pose
        _v27 = _v26.position
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v28 = _v26.orientation
        _x = _v28
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.has_length, _x.has_width_line, _x.length_line, _x.width_line,) = _get_struct_2B2f().unpack(str[start:end])
        val1.has_length = bool(val1.has_length)
        val1.has_width_line = bool(val1.has_width_line)
        self.feature.append(val1)
      _x = self
      start = end
      end += 21
      (_x.ego_lane, _x.lane_num, _x.facility_num, _x.feature_num, _x.left_distance, _x.right_distance, _x.left_angle, _x.right_angle, _x.scene_quality,) = _get_struct_4B4fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_number
      buff.write(_get_struct_I().pack(_x))
      length = len(self.facility)
      buff.write(_struct_I.pack(length))
      for val1 in self.facility:
        _v29 = val1.header
        _x = _v29.seq
        buff.write(_get_struct_I().pack(_x))
        _v30 = _v29.stamp
        _x = _v30
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v29.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id_facility
        buff.write(_get_struct_I().pack(_x))
        _x = val1.facility_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v31 = val1.position_facility
        _x = _v31
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane:
        _v32 = val1.header
        _x = _v32.seq
        buff.write(_get_struct_I().pack(_x))
        _v33 = _v32.stamp
        _x = _v33
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v32.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id_lane
        buff.write(_get_struct_I().pack(_x))
        _v34 = val1.position_lane
        _x = _v34
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.lane_quality, _x.width))
      length = len(self.feature)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature:
        _v35 = val1.header
        _x = _v35.seq
        buff.write(_get_struct_I().pack(_x))
        _v36 = _v35.stamp
        _x = _v36
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v35.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IB().pack(_x.id_feature, _x.shape_type))
        _v37 = val1.axis_pose
        _v38 = _v37.position
        _x = _v38
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v39 = _v37.orientation
        _x = _v39
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_8f2BfB3f().pack(_x.radius, _x.height, _x.a, _x.b, _x.c, _x.d, _x.start_x, _x.end_x, _x.curve_type, _x.has_width_curve, _x.curve_confidence, _x.side, _x.width_curve, _x.interval, _x.length_curve))
        _v40 = val1.pose
        _v41 = _v40.position
        _x = _v41
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v42 = _v40.orientation
        _x = _v42
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2B2f().pack(_x.has_length, _x.has_width_line, _x.length_line, _x.width_line))
      _x = self
      buff.write(_get_struct_4B4fB().pack(_x.ego_lane, _x.lane_num, _x.facility_num, _x.feature_num, _x.left_distance, _x.right_distance, _x.left_angle, _x.right_angle, _x.scene_quality))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.facility is None:
        self.facility = None
      if self.lane is None:
        self.lane = None
      if self.feature is None:
        self.feature = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_number,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.facility = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_road_feature_facility()
        _v43 = val1.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v43.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id_facility,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.facility_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.facility_type = str[start:end]
        _v45 = val1.position_facility
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.facility.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_road_feature_lane()
        _v46 = val1.header
        start = end
        end += 4
        (_v46.seq,) = _get_struct_I().unpack(str[start:end])
        _v47 = _v46.stamp
        _x = _v47
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v46.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v46.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id_lane,) = _get_struct_I().unpack(str[start:end])
        _v48 = val1.position_lane
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.lane_quality, _x.width,) = _get_struct_Bf().unpack(str[start:end])
        self.lane.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_road_feature_feature()
        _v49 = val1.header
        start = end
        end += 4
        (_v49.seq,) = _get_struct_I().unpack(str[start:end])
        _v50 = _v49.stamp
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v49.frame_id = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.id_feature, _x.shape_type,) = _get_struct_IB().unpack(str[start:end])
        _v51 = val1.axis_pose
        _v52 = _v51.position
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v53 = _v51.orientation
        _x = _v53
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 51
        (_x.radius, _x.height, _x.a, _x.b, _x.c, _x.d, _x.start_x, _x.end_x, _x.curve_type, _x.has_width_curve, _x.curve_confidence, _x.side, _x.width_curve, _x.interval, _x.length_curve,) = _get_struct_8f2BfB3f().unpack(str[start:end])
        val1.has_width_curve = bool(val1.has_width_curve)
        val1.side = bool(val1.side)
        _v54 = val1.pose
        _v55 = _v54.position
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = _v54.orientation
        _x = _v56
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.has_length, _x.has_width_line, _x.length_line, _x.width_line,) = _get_struct_2B2f().unpack(str[start:end])
        val1.has_length = bool(val1.has_length)
        val1.has_width_line = bool(val1.has_width_line)
        self.feature.append(val1)
      _x = self
      start = end
      end += 21
      (_x.ego_lane, _x.lane_num, _x.facility_num, _x.feature_num, _x.left_distance, _x.right_distance, _x.left_angle, _x.right_angle, _x.scene_quality,) = _get_struct_4B4fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2f = None
def _get_struct_2B2f():
    global _struct_2B2f
    if _struct_2B2f is None:
        _struct_2B2f = struct.Struct("<2B2f")
    return _struct_2B2f
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4B4fB = None
def _get_struct_4B4fB():
    global _struct_4B4fB
    if _struct_4B4fB is None:
        _struct_4B4fB = struct.Struct("<4B4fB")
    return _struct_4B4fB
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_8f2BfB3f = None
def _get_struct_8f2BfB3f():
    global _struct_8f2BfB3f
    if _struct_8f2BfB3f is None:
        _struct_8f2BfB3f = struct.Struct("<8f2BfB3f")
    return _struct_8f2BfB3f
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
