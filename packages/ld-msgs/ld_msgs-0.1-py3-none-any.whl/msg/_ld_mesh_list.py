# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_mesh_list.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import ld_msgs.msg
import std_msgs.msg

class ld_mesh_list(genpy.Message):
  _md5sum = "2e14b931a17ada48ff95898866620665"
  _type = "ld_msgs/ld_mesh_list"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint32          frame_number
ld_mesh[] mesh_list
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ld_msgs/ld_mesh
string                          label
ld_face[]                       face_list
bool                            static_obj
uint32                          id  # mesh unique id, same id for same object beyond multiple frames
uint32                          tracking_age # frames the obj being tracked

####################################### bbox feature
geometry_msgs/Pose              bbox_center_point #bbox that includes mesh, easy for algo
float32                         bbox_dimension_x # bbox projection len along x axis
float32                         bbox_dimension_y # bbox projection len along y axis
float32                         bbox_dimension_z # bbox projection len along z axis


####################################### Reflectivity feature
float64                         reflectivity_average
float64                         reflectivity_minimum
float64                         reflectivity_maximum
float64                         reflectivity_95Percentile


####################################### Field for future usage

bool                            coll_relevance
int8                            lane_relation 

# 0 in ego lane
# -1 left first lane relative to ego
# -2 left second lane relative to ego
# -3 left third lane relative to ego
# -4 left forth lane relative to ego
# 1 right first lane relative to ego
# 2 right second lane relative to ego
# 3 right third lane relative to ego
# 4 right forth lane relative to ego

float32                          mesh_yaw # yaw angel in radian
string                           subclass_label
geometry_msgs/Point              backup_point_0
geometry_msgs/Point              backup_point_1
geometry_msgs/Point              backup_point_2
geometry_msgs/Point              backup_point_3
geometry_msgs/Point              backup_point_4
geometry_msgs/Point              backup_point_5
geometry_msgs/Point              backup_point_6

string                           backup_string_0
string                           backup_string_1
string                           backup_string_2
string                           backup_string_3
string                           backup_string_4
string                           backup_string_5
string                           backup_string_6


bool                             backup_bool_0
bool                             backup_bool_1
bool                             backup_bool_2
bool                             backup_bool_3
bool                             backup_bool_4
bool                             backup_bool_5

float32                          backup_float_0
float32                          backup_float_1
float32                          backup_float_2
float32                          backup_float_3
float32                          backup_float_4
float32                          backup_float_5

int8                             backup_int_0
int8                             backup_int_1
int8                             backup_int_2
int8                             backup_int_3
int8                             backup_int_4
int8                             backup_int_5
================================================================================
MSG: ld_msgs/ld_face
geometry_msgs/Point[]             vertex_list


####################################### Field for future usage

uint32                          id

geometry_msgs/Point              backup_point_0
geometry_msgs/Point              backup_point_1
geometry_msgs/Point              backup_point_2
geometry_msgs/Point              backup_point_3
geometry_msgs/Point              backup_point_4
geometry_msgs/Point              backup_point_5
geometry_msgs/Point              backup_point_6

string                           backup_string_0
string                           backup_string_1
string                           backup_string_2
string                           backup_string_3
string                           backup_string_4
string                           backup_string_5
string                           backup_string_6


bool                             backup_bool_0
bool                             backup_bool_1
bool                             backup_bool_2
bool                             backup_bool_3
bool                             backup_bool_4
bool                             backup_bool_5

float32                          backup_float_0
float32                          backup_float_1
float32                          backup_float_2
float32                          backup_float_3
float32                          backup_float_4
float32                          backup_float_5

int8                             backup_int_0
int8                             backup_int_1
int8                             backup_int_2
int8                             backup_int_3
int8                             backup_int_4
int8                             backup_int_5

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','frame_number','mesh_list']
  _slot_types = ['std_msgs/Header','uint32','ld_msgs/ld_mesh[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_number,mesh_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_mesh_list, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_number is None:
        self.frame_number = 0
      if self.mesh_list is None:
        self.mesh_list = []
    else:
      self.header = std_msgs.msg.Header()
      self.frame_number = 0
      self.mesh_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_number
      buff.write(_get_struct_I().pack(_x))
      length = len(self.mesh_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh_list:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.face_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.face_list:
          length = len(val2.vertex_list)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertex_list:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.id
          buff.write(_get_struct_I().pack(_x))
          _v1 = val2.backup_point_0
          _x = _v1
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v2 = val2.backup_point_1
          _x = _v2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v3 = val2.backup_point_2
          _x = _v3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v4 = val2.backup_point_3
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v5 = val2.backup_point_4
          _x = _v5
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v6 = val2.backup_point_5
          _x = _v6
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v7 = val2.backup_point_6
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.backup_string_0
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_1
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_2
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_3
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_4
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_5
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_6
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
        _x = val1
        buff.write(_get_struct_B2I().pack(_x.static_obj, _x.id, _x.tracking_age))
        _v8 = val1.bbox_center_point
        _v9 = _v8.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = _v8.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_3f4dBbf().pack(_x.bbox_dimension_x, _x.bbox_dimension_y, _x.bbox_dimension_z, _x.reflectivity_average, _x.reflectivity_minimum, _x.reflectivity_maximum, _x.reflectivity_95Percentile, _x.coll_relevance, _x.lane_relation, _x.mesh_yaw))
        _x = val1.subclass_label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v11 = val1.backup_point_0
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.backup_point_1
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = val1.backup_point_2
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = val1.backup_point_3
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = val1.backup_point_4
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v16 = val1.backup_point_5
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v17 = val1.backup_point_6
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.backup_string_0
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_1
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_2
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_3
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_4
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_5
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_6
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mesh_list is None:
        self.mesh_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_number,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh_list = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_mesh()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.face_list = []
        for i in range(0, length):
          val2 = ld_msgs.msg.ld_face()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertex_list = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertex_list.append(val3)
          start = end
          end += 4
          (val2.id,) = _get_struct_I().unpack(str[start:end])
          _v18 = val2.backup_point_0
          _x = _v18
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v19 = val2.backup_point_1
          _x = _v19
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v20 = val2.backup_point_2
          _x = _v20
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v21 = val2.backup_point_3
          _x = _v21
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v22 = val2.backup_point_4
          _x = _v22
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v23 = val2.backup_point_5
          _x = _v23
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v24 = val2.backup_point_6
          _x = _v24
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_0 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_1 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_2 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_3 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_4 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_5 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_6 = str[start:end]
          _x = val2
          start = end
          end += 36
          (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
          val2.backup_bool_0 = bool(val2.backup_bool_0)
          val2.backup_bool_1 = bool(val2.backup_bool_1)
          val2.backup_bool_2 = bool(val2.backup_bool_2)
          val2.backup_bool_3 = bool(val2.backup_bool_3)
          val2.backup_bool_4 = bool(val2.backup_bool_4)
          val2.backup_bool_5 = bool(val2.backup_bool_5)
          val1.face_list.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.static_obj, _x.id, _x.tracking_age,) = _get_struct_B2I().unpack(str[start:end])
        val1.static_obj = bool(val1.static_obj)
        _v25 = val1.bbox_center_point
        _v26 = _v25.position
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = _v25.orientation
        _x = _v27
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 50
        (_x.bbox_dimension_x, _x.bbox_dimension_y, _x.bbox_dimension_z, _x.reflectivity_average, _x.reflectivity_minimum, _x.reflectivity_maximum, _x.reflectivity_95Percentile, _x.coll_relevance, _x.lane_relation, _x.mesh_yaw,) = _get_struct_3f4dBbf().unpack(str[start:end])
        val1.coll_relevance = bool(val1.coll_relevance)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subclass_label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.subclass_label = str[start:end]
        _v28 = val1.backup_point_0
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v29 = val1.backup_point_1
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v30 = val1.backup_point_2
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v31 = val1.backup_point_3
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v32 = val1.backup_point_4
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v33 = val1.backup_point_5
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v34 = val1.backup_point_6
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_0 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_1 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_2 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_3 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_4 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_5 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_6 = str[start:end]
        _x = val1
        start = end
        end += 36
        (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
        val1.backup_bool_0 = bool(val1.backup_bool_0)
        val1.backup_bool_1 = bool(val1.backup_bool_1)
        val1.backup_bool_2 = bool(val1.backup_bool_2)
        val1.backup_bool_3 = bool(val1.backup_bool_3)
        val1.backup_bool_4 = bool(val1.backup_bool_4)
        val1.backup_bool_5 = bool(val1.backup_bool_5)
        self.mesh_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_number
      buff.write(_get_struct_I().pack(_x))
      length = len(self.mesh_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh_list:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.face_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.face_list:
          length = len(val2.vertex_list)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertex_list:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.id
          buff.write(_get_struct_I().pack(_x))
          _v35 = val2.backup_point_0
          _x = _v35
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v36 = val2.backup_point_1
          _x = _v36
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v37 = val2.backup_point_2
          _x = _v37
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v38 = val2.backup_point_3
          _x = _v38
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v39 = val2.backup_point_4
          _x = _v39
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v40 = val2.backup_point_5
          _x = _v40
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v41 = val2.backup_point_6
          _x = _v41
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.backup_string_0
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_1
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_2
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_3
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_4
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_5
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.backup_string_6
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
        _x = val1
        buff.write(_get_struct_B2I().pack(_x.static_obj, _x.id, _x.tracking_age))
        _v42 = val1.bbox_center_point
        _v43 = _v42.position
        _x = _v43
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v44 = _v42.orientation
        _x = _v44
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_3f4dBbf().pack(_x.bbox_dimension_x, _x.bbox_dimension_y, _x.bbox_dimension_z, _x.reflectivity_average, _x.reflectivity_minimum, _x.reflectivity_maximum, _x.reflectivity_95Percentile, _x.coll_relevance, _x.lane_relation, _x.mesh_yaw))
        _x = val1.subclass_label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v45 = val1.backup_point_0
        _x = _v45
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v46 = val1.backup_point_1
        _x = _v46
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v47 = val1.backup_point_2
        _x = _v47
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v48 = val1.backup_point_3
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v49 = val1.backup_point_4
        _x = _v49
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v50 = val1.backup_point_5
        _x = _v50
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v51 = val1.backup_point_6
        _x = _v51
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.backup_string_0
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_1
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_2
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_3
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_4
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_5
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_6
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mesh_list is None:
        self.mesh_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_number,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh_list = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_mesh()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.face_list = []
        for i in range(0, length):
          val2 = ld_msgs.msg.ld_face()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertex_list = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertex_list.append(val3)
          start = end
          end += 4
          (val2.id,) = _get_struct_I().unpack(str[start:end])
          _v52 = val2.backup_point_0
          _x = _v52
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v53 = val2.backup_point_1
          _x = _v53
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v54 = val2.backup_point_2
          _x = _v54
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v55 = val2.backup_point_3
          _x = _v55
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v56 = val2.backup_point_4
          _x = _v56
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v57 = val2.backup_point_5
          _x = _v57
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v58 = val2.backup_point_6
          _x = _v58
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_0 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_1 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_2 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_3 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_4 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_5 = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.backup_string_6 = str[start:end]
          _x = val2
          start = end
          end += 36
          (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
          val2.backup_bool_0 = bool(val2.backup_bool_0)
          val2.backup_bool_1 = bool(val2.backup_bool_1)
          val2.backup_bool_2 = bool(val2.backup_bool_2)
          val2.backup_bool_3 = bool(val2.backup_bool_3)
          val2.backup_bool_4 = bool(val2.backup_bool_4)
          val2.backup_bool_5 = bool(val2.backup_bool_5)
          val1.face_list.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.static_obj, _x.id, _x.tracking_age,) = _get_struct_B2I().unpack(str[start:end])
        val1.static_obj = bool(val1.static_obj)
        _v59 = val1.bbox_center_point
        _v60 = _v59.position
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v61 = _v59.orientation
        _x = _v61
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 50
        (_x.bbox_dimension_x, _x.bbox_dimension_y, _x.bbox_dimension_z, _x.reflectivity_average, _x.reflectivity_minimum, _x.reflectivity_maximum, _x.reflectivity_95Percentile, _x.coll_relevance, _x.lane_relation, _x.mesh_yaw,) = _get_struct_3f4dBbf().unpack(str[start:end])
        val1.coll_relevance = bool(val1.coll_relevance)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subclass_label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.subclass_label = str[start:end]
        _v62 = val1.backup_point_0
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v63 = val1.backup_point_1
        _x = _v63
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v64 = val1.backup_point_2
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v65 = val1.backup_point_3
        _x = _v65
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v66 = val1.backup_point_4
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v67 = val1.backup_point_5
        _x = _v67
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v68 = val1.backup_point_6
        _x = _v68
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_0 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_1 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_2 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_3 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_4 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_5 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_6 = str[start:end]
        _x = val1
        start = end
        end += 36
        (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
        val1.backup_bool_0 = bool(val1.backup_bool_0)
        val1.backup_bool_1 = bool(val1.backup_bool_1)
        val1.backup_bool_2 = bool(val1.backup_bool_2)
        val1.backup_bool_3 = bool(val1.backup_bool_3)
        val1.backup_bool_4 = bool(val1.backup_bool_4)
        val1.backup_bool_5 = bool(val1.backup_bool_5)
        self.mesh_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f4dBbf = None
def _get_struct_3f4dBbf():
    global _struct_3f4dBbf
    if _struct_3f4dBbf is None:
        _struct_3f4dBbf = struct.Struct("<3f4dBbf")
    return _struct_3f4dBbf
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6B6f6b = None
def _get_struct_6B6f6b():
    global _struct_6B6f6b
    if _struct_6B6f6b is None:
        _struct_6B6f6b = struct.Struct("<6B6f6b")
    return _struct_6B6f6b
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
