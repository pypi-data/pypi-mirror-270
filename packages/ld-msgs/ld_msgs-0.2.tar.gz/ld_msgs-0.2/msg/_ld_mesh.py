# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_mesh.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import ld_msgs.msg

class ld_mesh(genpy.Message):
  _md5sum = "2cfa4fbf29724f5c36c87862ab25966b"
  _type = "ld_msgs/ld_mesh"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string                          label
ld_face[]                       face_list
bool                            static_obj
uint32                          id  # mesh unique id, same id for same object beyond multiple frames
uint32                          tracking_age # frames the obj being tracked

####################################### bbox feature
geometry_msgs/Pose              bbox_center_point #bbox that includes mesh, easy for algo
float32                         bbox_dimension_x # bbox projection len along x axis
float32                         bbox_dimension_y # bbox projection len along y axis
float32                         bbox_dimension_z # bbox projection len along z axis


####################################### Reflectivity feature
float64                         reflectivity_average
float64                         reflectivity_minimum
float64                         reflectivity_maximum
float64                         reflectivity_95Percentile


####################################### Field for future usage

bool                            coll_relevance
int8                            lane_relation 

# 0 in ego lane
# -1 left first lane relative to ego
# -2 left second lane relative to ego
# -3 left third lane relative to ego
# -4 left forth lane relative to ego
# 1 right first lane relative to ego
# 2 right second lane relative to ego
# 3 right third lane relative to ego
# 4 right forth lane relative to ego

float32                          mesh_yaw # yaw angel in radian
string                           subclass_label
geometry_msgs/Point              backup_point_0
geometry_msgs/Point              backup_point_1
geometry_msgs/Point              backup_point_2
geometry_msgs/Point              backup_point_3
geometry_msgs/Point              backup_point_4
geometry_msgs/Point              backup_point_5
geometry_msgs/Point              backup_point_6

string                           backup_string_0
string                           backup_string_1
string                           backup_string_2
string                           backup_string_3
string                           backup_string_4
string                           backup_string_5
string                           backup_string_6


bool                             backup_bool_0
bool                             backup_bool_1
bool                             backup_bool_2
bool                             backup_bool_3
bool                             backup_bool_4
bool                             backup_bool_5

float32                          backup_float_0
float32                          backup_float_1
float32                          backup_float_2
float32                          backup_float_3
float32                          backup_float_4
float32                          backup_float_5

int8                             backup_int_0
int8                             backup_int_1
int8                             backup_int_2
int8                             backup_int_3
int8                             backup_int_4
int8                             backup_int_5
================================================================================
MSG: ld_msgs/ld_face
geometry_msgs/Point[]             vertex_list


####################################### Field for future usage

uint32                          id

geometry_msgs/Point              backup_point_0
geometry_msgs/Point              backup_point_1
geometry_msgs/Point              backup_point_2
geometry_msgs/Point              backup_point_3
geometry_msgs/Point              backup_point_4
geometry_msgs/Point              backup_point_5
geometry_msgs/Point              backup_point_6

string                           backup_string_0
string                           backup_string_1
string                           backup_string_2
string                           backup_string_3
string                           backup_string_4
string                           backup_string_5
string                           backup_string_6


bool                             backup_bool_0
bool                             backup_bool_1
bool                             backup_bool_2
bool                             backup_bool_3
bool                             backup_bool_4
bool                             backup_bool_5

float32                          backup_float_0
float32                          backup_float_1
float32                          backup_float_2
float32                          backup_float_3
float32                          backup_float_4
float32                          backup_float_5

int8                             backup_int_0
int8                             backup_int_1
int8                             backup_int_2
int8                             backup_int_3
int8                             backup_int_4
int8                             backup_int_5

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['label','face_list','static_obj','id','tracking_age','bbox_center_point','bbox_dimension_x','bbox_dimension_y','bbox_dimension_z','reflectivity_average','reflectivity_minimum','reflectivity_maximum','reflectivity_95Percentile','coll_relevance','lane_relation','mesh_yaw','subclass_label','backup_point_0','backup_point_1','backup_point_2','backup_point_3','backup_point_4','backup_point_5','backup_point_6','backup_string_0','backup_string_1','backup_string_2','backup_string_3','backup_string_4','backup_string_5','backup_string_6','backup_bool_0','backup_bool_1','backup_bool_2','backup_bool_3','backup_bool_4','backup_bool_5','backup_float_0','backup_float_1','backup_float_2','backup_float_3','backup_float_4','backup_float_5','backup_int_0','backup_int_1','backup_int_2','backup_int_3','backup_int_4','backup_int_5']
  _slot_types = ['string','ld_msgs/ld_face[]','bool','uint32','uint32','geometry_msgs/Pose','float32','float32','float32','float64','float64','float64','float64','bool','int8','float32','string','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','string','string','string','string','string','string','string','bool','bool','bool','bool','bool','bool','float32','float32','float32','float32','float32','float32','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       label,face_list,static_obj,id,tracking_age,bbox_center_point,bbox_dimension_x,bbox_dimension_y,bbox_dimension_z,reflectivity_average,reflectivity_minimum,reflectivity_maximum,reflectivity_95Percentile,coll_relevance,lane_relation,mesh_yaw,subclass_label,backup_point_0,backup_point_1,backup_point_2,backup_point_3,backup_point_4,backup_point_5,backup_point_6,backup_string_0,backup_string_1,backup_string_2,backup_string_3,backup_string_4,backup_string_5,backup_string_6,backup_bool_0,backup_bool_1,backup_bool_2,backup_bool_3,backup_bool_4,backup_bool_5,backup_float_0,backup_float_1,backup_float_2,backup_float_3,backup_float_4,backup_float_5,backup_int_0,backup_int_1,backup_int_2,backup_int_3,backup_int_4,backup_int_5

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_mesh, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.label is None:
        self.label = ''
      if self.face_list is None:
        self.face_list = []
      if self.static_obj is None:
        self.static_obj = False
      if self.id is None:
        self.id = 0
      if self.tracking_age is None:
        self.tracking_age = 0
      if self.bbox_center_point is None:
        self.bbox_center_point = geometry_msgs.msg.Pose()
      if self.bbox_dimension_x is None:
        self.bbox_dimension_x = 0.
      if self.bbox_dimension_y is None:
        self.bbox_dimension_y = 0.
      if self.bbox_dimension_z is None:
        self.bbox_dimension_z = 0.
      if self.reflectivity_average is None:
        self.reflectivity_average = 0.
      if self.reflectivity_minimum is None:
        self.reflectivity_minimum = 0.
      if self.reflectivity_maximum is None:
        self.reflectivity_maximum = 0.
      if self.reflectivity_95Percentile is None:
        self.reflectivity_95Percentile = 0.
      if self.coll_relevance is None:
        self.coll_relevance = False
      if self.lane_relation is None:
        self.lane_relation = 0
      if self.mesh_yaw is None:
        self.mesh_yaw = 0.
      if self.subclass_label is None:
        self.subclass_label = ''
      if self.backup_point_0 is None:
        self.backup_point_0 = geometry_msgs.msg.Point()
      if self.backup_point_1 is None:
        self.backup_point_1 = geometry_msgs.msg.Point()
      if self.backup_point_2 is None:
        self.backup_point_2 = geometry_msgs.msg.Point()
      if self.backup_point_3 is None:
        self.backup_point_3 = geometry_msgs.msg.Point()
      if self.backup_point_4 is None:
        self.backup_point_4 = geometry_msgs.msg.Point()
      if self.backup_point_5 is None:
        self.backup_point_5 = geometry_msgs.msg.Point()
      if self.backup_point_6 is None:
        self.backup_point_6 = geometry_msgs.msg.Point()
      if self.backup_string_0 is None:
        self.backup_string_0 = ''
      if self.backup_string_1 is None:
        self.backup_string_1 = ''
      if self.backup_string_2 is None:
        self.backup_string_2 = ''
      if self.backup_string_3 is None:
        self.backup_string_3 = ''
      if self.backup_string_4 is None:
        self.backup_string_4 = ''
      if self.backup_string_5 is None:
        self.backup_string_5 = ''
      if self.backup_string_6 is None:
        self.backup_string_6 = ''
      if self.backup_bool_0 is None:
        self.backup_bool_0 = False
      if self.backup_bool_1 is None:
        self.backup_bool_1 = False
      if self.backup_bool_2 is None:
        self.backup_bool_2 = False
      if self.backup_bool_3 is None:
        self.backup_bool_3 = False
      if self.backup_bool_4 is None:
        self.backup_bool_4 = False
      if self.backup_bool_5 is None:
        self.backup_bool_5 = False
      if self.backup_float_0 is None:
        self.backup_float_0 = 0.
      if self.backup_float_1 is None:
        self.backup_float_1 = 0.
      if self.backup_float_2 is None:
        self.backup_float_2 = 0.
      if self.backup_float_3 is None:
        self.backup_float_3 = 0.
      if self.backup_float_4 is None:
        self.backup_float_4 = 0.
      if self.backup_float_5 is None:
        self.backup_float_5 = 0.
      if self.backup_int_0 is None:
        self.backup_int_0 = 0
      if self.backup_int_1 is None:
        self.backup_int_1 = 0
      if self.backup_int_2 is None:
        self.backup_int_2 = 0
      if self.backup_int_3 is None:
        self.backup_int_3 = 0
      if self.backup_int_4 is None:
        self.backup_int_4 = 0
      if self.backup_int_5 is None:
        self.backup_int_5 = 0
    else:
      self.label = ''
      self.face_list = []
      self.static_obj = False
      self.id = 0
      self.tracking_age = 0
      self.bbox_center_point = geometry_msgs.msg.Pose()
      self.bbox_dimension_x = 0.
      self.bbox_dimension_y = 0.
      self.bbox_dimension_z = 0.
      self.reflectivity_average = 0.
      self.reflectivity_minimum = 0.
      self.reflectivity_maximum = 0.
      self.reflectivity_95Percentile = 0.
      self.coll_relevance = False
      self.lane_relation = 0
      self.mesh_yaw = 0.
      self.subclass_label = ''
      self.backup_point_0 = geometry_msgs.msg.Point()
      self.backup_point_1 = geometry_msgs.msg.Point()
      self.backup_point_2 = geometry_msgs.msg.Point()
      self.backup_point_3 = geometry_msgs.msg.Point()
      self.backup_point_4 = geometry_msgs.msg.Point()
      self.backup_point_5 = geometry_msgs.msg.Point()
      self.backup_point_6 = geometry_msgs.msg.Point()
      self.backup_string_0 = ''
      self.backup_string_1 = ''
      self.backup_string_2 = ''
      self.backup_string_3 = ''
      self.backup_string_4 = ''
      self.backup_string_5 = ''
      self.backup_string_6 = ''
      self.backup_bool_0 = False
      self.backup_bool_1 = False
      self.backup_bool_2 = False
      self.backup_bool_3 = False
      self.backup_bool_4 = False
      self.backup_bool_5 = False
      self.backup_float_0 = 0.
      self.backup_float_1 = 0.
      self.backup_float_2 = 0.
      self.backup_float_3 = 0.
      self.backup_float_4 = 0.
      self.backup_float_5 = 0.
      self.backup_int_0 = 0
      self.backup_int_1 = 0
      self.backup_int_2 = 0
      self.backup_int_3 = 0
      self.backup_int_4 = 0
      self.backup_int_5 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.face_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.face_list:
        length = len(val1.vertex_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.vertex_list:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _v1 = val1.backup_point_0
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.backup_point_1
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = val1.backup_point_2
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.backup_point_3
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.backup_point_4
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.backup_point_5
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.backup_point_6
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.backup_string_0
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_1
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_2
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_3
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_4
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_5
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_6
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
      _x = self
      buff.write(_get_struct_B2I7d3f4dBbf().pack(_x.static_obj, _x.id, _x.tracking_age, _x.bbox_center_point.position.x, _x.bbox_center_point.position.y, _x.bbox_center_point.position.z, _x.bbox_center_point.orientation.x, _x.bbox_center_point.orientation.y, _x.bbox_center_point.orientation.z, _x.bbox_center_point.orientation.w, _x.bbox_dimension_x, _x.bbox_dimension_y, _x.bbox_dimension_z, _x.reflectivity_average, _x.reflectivity_minimum, _x.reflectivity_maximum, _x.reflectivity_95Percentile, _x.coll_relevance, _x.lane_relation, _x.mesh_yaw))
      _x = self.subclass_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_21d().pack(_x.backup_point_0.x, _x.backup_point_0.y, _x.backup_point_0.z, _x.backup_point_1.x, _x.backup_point_1.y, _x.backup_point_1.z, _x.backup_point_2.x, _x.backup_point_2.y, _x.backup_point_2.z, _x.backup_point_3.x, _x.backup_point_3.y, _x.backup_point_3.z, _x.backup_point_4.x, _x.backup_point_4.y, _x.backup_point_4.z, _x.backup_point_5.x, _x.backup_point_5.y, _x.backup_point_5.z, _x.backup_point_6.x, _x.backup_point_6.y, _x.backup_point_6.z))
      _x = self.backup_string_0
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_4
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_5
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_6
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.face_list is None:
        self.face_list = None
      if self.bbox_center_point is None:
        self.bbox_center_point = geometry_msgs.msg.Pose()
      if self.backup_point_0 is None:
        self.backup_point_0 = geometry_msgs.msg.Point()
      if self.backup_point_1 is None:
        self.backup_point_1 = geometry_msgs.msg.Point()
      if self.backup_point_2 is None:
        self.backup_point_2 = geometry_msgs.msg.Point()
      if self.backup_point_3 is None:
        self.backup_point_3 = geometry_msgs.msg.Point()
      if self.backup_point_4 is None:
        self.backup_point_4 = geometry_msgs.msg.Point()
      if self.backup_point_5 is None:
        self.backup_point_5 = geometry_msgs.msg.Point()
      if self.backup_point_6 is None:
        self.backup_point_6 = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.face_list = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_face()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.vertex_list = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.vertex_list.append(val2)
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        _v8 = val1.backup_point_0
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v9 = val1.backup_point_1
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v10 = val1.backup_point_2
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v11 = val1.backup_point_3
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = val1.backup_point_4
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v13 = val1.backup_point_5
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.backup_point_6
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_0 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_1 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_2 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_3 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_4 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_5 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_6 = str[start:end]
        _x = val1
        start = end
        end += 36
        (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
        val1.backup_bool_0 = bool(val1.backup_bool_0)
        val1.backup_bool_1 = bool(val1.backup_bool_1)
        val1.backup_bool_2 = bool(val1.backup_bool_2)
        val1.backup_bool_3 = bool(val1.backup_bool_3)
        val1.backup_bool_4 = bool(val1.backup_bool_4)
        val1.backup_bool_5 = bool(val1.backup_bool_5)
        self.face_list.append(val1)
      _x = self
      start = end
      end += 115
      (_x.static_obj, _x.id, _x.tracking_age, _x.bbox_center_point.position.x, _x.bbox_center_point.position.y, _x.bbox_center_point.position.z, _x.bbox_center_point.orientation.x, _x.bbox_center_point.orientation.y, _x.bbox_center_point.orientation.z, _x.bbox_center_point.orientation.w, _x.bbox_dimension_x, _x.bbox_dimension_y, _x.bbox_dimension_z, _x.reflectivity_average, _x.reflectivity_minimum, _x.reflectivity_maximum, _x.reflectivity_95Percentile, _x.coll_relevance, _x.lane_relation, _x.mesh_yaw,) = _get_struct_B2I7d3f4dBbf().unpack(str[start:end])
      self.static_obj = bool(self.static_obj)
      self.coll_relevance = bool(self.coll_relevance)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subclass_label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subclass_label = str[start:end]
      _x = self
      start = end
      end += 168
      (_x.backup_point_0.x, _x.backup_point_0.y, _x.backup_point_0.z, _x.backup_point_1.x, _x.backup_point_1.y, _x.backup_point_1.z, _x.backup_point_2.x, _x.backup_point_2.y, _x.backup_point_2.z, _x.backup_point_3.x, _x.backup_point_3.y, _x.backup_point_3.z, _x.backup_point_4.x, _x.backup_point_4.y, _x.backup_point_4.z, _x.backup_point_5.x, _x.backup_point_5.y, _x.backup_point_5.z, _x.backup_point_6.x, _x.backup_point_6.y, _x.backup_point_6.z,) = _get_struct_21d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_0 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_4 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_5 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_6 = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
      self.backup_bool_0 = bool(self.backup_bool_0)
      self.backup_bool_1 = bool(self.backup_bool_1)
      self.backup_bool_2 = bool(self.backup_bool_2)
      self.backup_bool_3 = bool(self.backup_bool_3)
      self.backup_bool_4 = bool(self.backup_bool_4)
      self.backup_bool_5 = bool(self.backup_bool_5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.face_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.face_list:
        length = len(val1.vertex_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.vertex_list:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _v15 = val1.backup_point_0
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v16 = val1.backup_point_1
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v17 = val1.backup_point_2
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = val1.backup_point_3
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = val1.backup_point_4
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v20 = val1.backup_point_5
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v21 = val1.backup_point_6
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.backup_string_0
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_1
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_2
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_3
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_4
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_5
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.backup_string_6
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
      _x = self
      buff.write(_get_struct_B2I7d3f4dBbf().pack(_x.static_obj, _x.id, _x.tracking_age, _x.bbox_center_point.position.x, _x.bbox_center_point.position.y, _x.bbox_center_point.position.z, _x.bbox_center_point.orientation.x, _x.bbox_center_point.orientation.y, _x.bbox_center_point.orientation.z, _x.bbox_center_point.orientation.w, _x.bbox_dimension_x, _x.bbox_dimension_y, _x.bbox_dimension_z, _x.reflectivity_average, _x.reflectivity_minimum, _x.reflectivity_maximum, _x.reflectivity_95Percentile, _x.coll_relevance, _x.lane_relation, _x.mesh_yaw))
      _x = self.subclass_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_21d().pack(_x.backup_point_0.x, _x.backup_point_0.y, _x.backup_point_0.z, _x.backup_point_1.x, _x.backup_point_1.y, _x.backup_point_1.z, _x.backup_point_2.x, _x.backup_point_2.y, _x.backup_point_2.z, _x.backup_point_3.x, _x.backup_point_3.y, _x.backup_point_3.z, _x.backup_point_4.x, _x.backup_point_4.y, _x.backup_point_4.z, _x.backup_point_5.x, _x.backup_point_5.y, _x.backup_point_5.z, _x.backup_point_6.x, _x.backup_point_6.y, _x.backup_point_6.z))
      _x = self.backup_string_0
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_4
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_5
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.backup_string_6
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6B6f6b().pack(_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.face_list is None:
        self.face_list = None
      if self.bbox_center_point is None:
        self.bbox_center_point = geometry_msgs.msg.Pose()
      if self.backup_point_0 is None:
        self.backup_point_0 = geometry_msgs.msg.Point()
      if self.backup_point_1 is None:
        self.backup_point_1 = geometry_msgs.msg.Point()
      if self.backup_point_2 is None:
        self.backup_point_2 = geometry_msgs.msg.Point()
      if self.backup_point_3 is None:
        self.backup_point_3 = geometry_msgs.msg.Point()
      if self.backup_point_4 is None:
        self.backup_point_4 = geometry_msgs.msg.Point()
      if self.backup_point_5 is None:
        self.backup_point_5 = geometry_msgs.msg.Point()
      if self.backup_point_6 is None:
        self.backup_point_6 = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.face_list = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_face()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.vertex_list = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.vertex_list.append(val2)
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        _v22 = val1.backup_point_0
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v23 = val1.backup_point_1
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = val1.backup_point_2
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v25 = val1.backup_point_3
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v26 = val1.backup_point_4
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = val1.backup_point_5
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v28 = val1.backup_point_6
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_0 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_1 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_2 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_3 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_4 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_5 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.backup_string_6 = str[start:end]
        _x = val1
        start = end
        end += 36
        (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
        val1.backup_bool_0 = bool(val1.backup_bool_0)
        val1.backup_bool_1 = bool(val1.backup_bool_1)
        val1.backup_bool_2 = bool(val1.backup_bool_2)
        val1.backup_bool_3 = bool(val1.backup_bool_3)
        val1.backup_bool_4 = bool(val1.backup_bool_4)
        val1.backup_bool_5 = bool(val1.backup_bool_5)
        self.face_list.append(val1)
      _x = self
      start = end
      end += 115
      (_x.static_obj, _x.id, _x.tracking_age, _x.bbox_center_point.position.x, _x.bbox_center_point.position.y, _x.bbox_center_point.position.z, _x.bbox_center_point.orientation.x, _x.bbox_center_point.orientation.y, _x.bbox_center_point.orientation.z, _x.bbox_center_point.orientation.w, _x.bbox_dimension_x, _x.bbox_dimension_y, _x.bbox_dimension_z, _x.reflectivity_average, _x.reflectivity_minimum, _x.reflectivity_maximum, _x.reflectivity_95Percentile, _x.coll_relevance, _x.lane_relation, _x.mesh_yaw,) = _get_struct_B2I7d3f4dBbf().unpack(str[start:end])
      self.static_obj = bool(self.static_obj)
      self.coll_relevance = bool(self.coll_relevance)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subclass_label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subclass_label = str[start:end]
      _x = self
      start = end
      end += 168
      (_x.backup_point_0.x, _x.backup_point_0.y, _x.backup_point_0.z, _x.backup_point_1.x, _x.backup_point_1.y, _x.backup_point_1.z, _x.backup_point_2.x, _x.backup_point_2.y, _x.backup_point_2.z, _x.backup_point_3.x, _x.backup_point_3.y, _x.backup_point_3.z, _x.backup_point_4.x, _x.backup_point_4.y, _x.backup_point_4.z, _x.backup_point_5.x, _x.backup_point_5.y, _x.backup_point_5.z, _x.backup_point_6.x, _x.backup_point_6.y, _x.backup_point_6.z,) = _get_struct_21d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_0 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_0 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_4 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_4 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_5 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_5 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_string_6 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.backup_string_6 = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.backup_bool_0, _x.backup_bool_1, _x.backup_bool_2, _x.backup_bool_3, _x.backup_bool_4, _x.backup_bool_5, _x.backup_float_0, _x.backup_float_1, _x.backup_float_2, _x.backup_float_3, _x.backup_float_4, _x.backup_float_5, _x.backup_int_0, _x.backup_int_1, _x.backup_int_2, _x.backup_int_3, _x.backup_int_4, _x.backup_int_5,) = _get_struct_6B6f6b().unpack(str[start:end])
      self.backup_bool_0 = bool(self.backup_bool_0)
      self.backup_bool_1 = bool(self.backup_bool_1)
      self.backup_bool_2 = bool(self.backup_bool_2)
      self.backup_bool_3 = bool(self.backup_bool_3)
      self.backup_bool_4 = bool(self.backup_bool_4)
      self.backup_bool_5 = bool(self.backup_bool_5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_21d = None
def _get_struct_21d():
    global _struct_21d
    if _struct_21d is None:
        _struct_21d = struct.Struct("<21d")
    return _struct_21d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6B6f6b = None
def _get_struct_6B6f6b():
    global _struct_6B6f6b
    if _struct_6B6f6b is None:
        _struct_6B6f6b = struct.Struct("<6B6f6b")
    return _struct_6B6f6b
_struct_B2I7d3f4dBbf = None
def _get_struct_B2I7d3f4dBbf():
    global _struct_B2I7d3f4dBbf
    if _struct_B2I7d3f4dBbf is None:
        _struct_B2I7d3f4dBbf = struct.Struct("<B2I7d3f4dBbf")
    return _struct_B2I7d3f4dBbf
