# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_2dobject_list.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import ld_msgs.msg
import std_msgs.msg

class ld_2dobject_list(genpy.Message):
  _md5sum = "e8775496f6e5674cfc41827d4658392b"
  _type = "ld_msgs/ld_2dobject_list"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint32          frame_number 
ld_2dobject[] objects

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ld_msgs/ld_2dobject
std_msgs/Header                 header
################ object character
uint32                          id
std_msgs/ColorRGBA              color   # Define this object specific color

################ class info 8000
string                          class_label_pred # Predicted class label "Null", "Unknown Big", " Unknown Small", "Pedestrian" "Bike" " Car", "Truck", "Motocycle", "Cyclist", "Tricycle", "Van"
string                          subclass_label_pred # Predicted sub class label: "Null" "CarVan" "Bus" "TramTrain" "VanTransporter" "AgriculturalVeh" "ConstructionVeh" "Truck" "SpecialTruck" "Rider" "Cargo" "Animal" "SittingLyingPed" "Wheelchair" "Trailer" "Ghost" "MobAid" "Group" "UnsafeLoad"
float32                         confidence   # Overall detected confidence of the object

################ tracking info
bool                            pose_reliable # from tracking status. true is Status::Stable
uint32                          tracking_age
std_msgs/Time                   age
std_msgs/Time                   lifetime

################ object status
string object_status # dynamic or static object

################ 2D Bounding Box
geometry_msgs/Point             LeftTop
geometry_msgs/Point             RightBottom

################ 3D Bounding Box
bool                            has_3dinfo

geometry_msgs/Twist             velocity
geometry_msgs/Twist             velocity_var

geometry_msgs/Twist             acceleration
geometry_msgs/Twist             acceleration_var

geometry_msgs/Pose2D[]           front_quad # the vertices of the front planar of the bounding box
geometry_msgs/Pose2D[]           back_quad # the vertices of the behind planar of the bounding box

uint32               points_num
uint32[]             points_in_boundingbox2d

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: std_msgs/Time
time data

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['header','frame_number','objects']
  _slot_types = ['std_msgs/Header','uint32','ld_msgs/ld_2dobject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_number,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_2dobject_list, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_number is None:
        self.frame_number = 0
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.frame_number = 0
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_number
      buff.write(_get_struct_I().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _v3 = val1.color
        _x = _v3
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1.class_label_pred
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.subclass_label_pred
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_fBI().pack(_x.confidence, _x.pose_reliable, _x.tracking_age))
        _v4 = val1.age
        _v5 = _v4.data
        _x = _v5
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v6 = val1.lifetime
        _v7 = _v6.data
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1.object_status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v8 = val1.LeftTop
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.RightBottom
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.has_3dinfo
        buff.write(_get_struct_B().pack(_x))
        _v10 = val1.velocity
        _v11 = _v10.linear
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v10.angular
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = val1.velocity_var
        _v14 = _v13.linear
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.angular
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v16 = val1.acceleration
        _v17 = _v16.linear
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = _v16.angular
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = val1.acceleration_var
        _v20 = _v19.linear
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v21 = _v19.angular
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.front_quad)
        buff.write(_struct_I.pack(length))
        for val2 in val1.front_quad:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        length = len(val1.back_quad)
        buff.write(_struct_I.pack(length))
        for val2 in val1.back_quad:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.points_num
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.points_in_boundingbox2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.points_in_boundingbox2d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_number,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_2dobject()
        _v22 = val1.header
        start = end
        end += 4
        (_v22.seq,) = _get_struct_I().unpack(str[start:end])
        _v23 = _v22.stamp
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v22.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v22.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        _v24 = val1.color
        _x = _v24
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_label_pred = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_label_pred = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subclass_label_pred = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.subclass_label_pred = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.confidence, _x.pose_reliable, _x.tracking_age,) = _get_struct_fBI().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        _v25 = val1.age
        _v26 = _v25.data
        _x = _v26
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v27 = val1.lifetime
        _v28 = _v27.data
        _x = _v28
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object_status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.object_status = str[start:end]
        _v29 = val1.LeftTop
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v30 = val1.RightBottom
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.has_3dinfo,) = _get_struct_B().unpack(str[start:end])
        val1.has_3dinfo = bool(val1.has_3dinfo)
        _v31 = val1.velocity
        _v32 = _v31.linear
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v33 = _v31.angular
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v34 = val1.velocity_var
        _v35 = _v34.linear
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = _v34.angular
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v37 = val1.acceleration
        _v38 = _v37.linear
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v39 = _v37.angular
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v40 = val1.acceleration_var
        _v41 = _v40.linear
        _x = _v41
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v42 = _v40.angular
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.front_quad = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose2D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
          val1.front_quad.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.back_quad = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose2D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
          val1.back_quad.append(val2)
        start = end
        end += 4
        (val1.points_num,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.points_in_boundingbox2d = s.unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_number
      buff.write(_get_struct_I().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v43 = val1.header
        _x = _v43.seq
        buff.write(_get_struct_I().pack(_x))
        _v44 = _v43.stamp
        _x = _v44
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v43.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _v45 = val1.color
        _x = _v45
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1.class_label_pred
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.subclass_label_pred
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_fBI().pack(_x.confidence, _x.pose_reliable, _x.tracking_age))
        _v46 = val1.age
        _v47 = _v46.data
        _x = _v47
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v48 = val1.lifetime
        _v49 = _v48.data
        _x = _v49
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1.object_status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v50 = val1.LeftTop
        _x = _v50
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v51 = val1.RightBottom
        _x = _v51
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.has_3dinfo
        buff.write(_get_struct_B().pack(_x))
        _v52 = val1.velocity
        _v53 = _v52.linear
        _x = _v53
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v54 = _v52.angular
        _x = _v54
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v55 = val1.velocity_var
        _v56 = _v55.linear
        _x = _v56
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v57 = _v55.angular
        _x = _v57
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v58 = val1.acceleration
        _v59 = _v58.linear
        _x = _v59
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v60 = _v58.angular
        _x = _v60
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v61 = val1.acceleration_var
        _v62 = _v61.linear
        _x = _v62
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v63 = _v61.angular
        _x = _v63
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.front_quad)
        buff.write(_struct_I.pack(length))
        for val2 in val1.front_quad:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        length = len(val1.back_quad)
        buff.write(_struct_I.pack(length))
        for val2 in val1.back_quad:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.points_num
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.points_in_boundingbox2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.points_in_boundingbox2d.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_number,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_2dobject()
        _v64 = val1.header
        start = end
        end += 4
        (_v64.seq,) = _get_struct_I().unpack(str[start:end])
        _v65 = _v64.stamp
        _x = _v65
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v64.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v64.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        _v66 = val1.color
        _x = _v66
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_label_pred = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_label_pred = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subclass_label_pred = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.subclass_label_pred = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.confidence, _x.pose_reliable, _x.tracking_age,) = _get_struct_fBI().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        _v67 = val1.age
        _v68 = _v67.data
        _x = _v68
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v69 = val1.lifetime
        _v70 = _v69.data
        _x = _v70
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object_status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.object_status = str[start:end]
        _v71 = val1.LeftTop
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v72 = val1.RightBottom
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.has_3dinfo,) = _get_struct_B().unpack(str[start:end])
        val1.has_3dinfo = bool(val1.has_3dinfo)
        _v73 = val1.velocity
        _v74 = _v73.linear
        _x = _v74
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v75 = _v73.angular
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v76 = val1.velocity_var
        _v77 = _v76.linear
        _x = _v77
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v78 = _v76.angular
        _x = _v78
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v79 = val1.acceleration
        _v80 = _v79.linear
        _x = _v80
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v81 = _v79.angular
        _x = _v81
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v82 = val1.acceleration_var
        _v83 = _v82.linear
        _x = _v83
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v84 = _v82.angular
        _x = _v84
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.front_quad = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose2D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
          val1.front_quad.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.back_quad = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose2D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
          val1.back_quad.append(val2)
        start = end
        end += 4
        (val1.points_num,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.points_in_boundingbox2d = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_fBI = None
def _get_struct_fBI():
    global _struct_fBI
    if _struct_fBI is None:
        _struct_fBI = struct.Struct("<fBI")
    return _struct_fBI
