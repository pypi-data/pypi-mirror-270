# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_object.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import std_msgs.msg

class ld_object(genpy.Message):
  _md5sum = "589150472e0902983fb4d6f742ad2933"
  _type = "ld_msgs/ld_object"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header                 header
################ object character
uint32                          id  # ukf_id
uint32                          tracking_age # frames the obj being tracked
std_msgs/Time                   Age # Current age of the obj in timestamp
std_msgs/Time                   lifetime # longevity of the obj in timestamp
string                          object_status # dynamic or static status of the object
float32                         confidence   # Overall detected confidence of the object
std_msgs/ColorRGBA              color   # Define this object specific color

################ 3D BB
bool                            pose_reliable
uint8                           box_label  # Null = 0, on_road = 1, on_edge = 2, edge_left = 3, edge_right = 4

geometry_msgs/Pose              pose
geometry_msgs/Point             pose_var 
geometry_msgs/Point             gps_pos
geometry_msgs/Point             gps_var

geometry_msgs/Point             tracking_points # tracking points for tracking

uint8                           tracking_point_type # tracking point type 0,1,2,3,4,5,6,7,8,9(unknown)

geometry_msgs/Pose              jsk_pose # pose from accociated bbox

float32                         yaw # yaw angel in radian
float32                         yaw_var # cov of yaw angel in radian
float32                         heading_angle
float32                         heading_angle_var

float32                         pitch # pitch of the obj in radian
float32                         pitch_var # pitch var of the obj in radian

float32                         roll # roll of the obj in radian
float32                         roll_var # roll var of the obj in radian

geometry_msgs/Vector3           dimensions
geometry_msgs/Point             dimensions_var  
geometry_msgs/Vector3           clustered_dimensions # dimension of 3D BB from clustering module

############### obj movement status
geometry_msgs/Twist             velocity
geometry_msgs/Twist             velocity_var
float32                         abs_velocity
float32                         abs_velocity_var

geometry_msgs/Twist             rel_velocity
geometry_msgs/Twist             rel_velocity_var
float32                         rel_abs_velocity
float32                         rel_abs_velocity_var

geometry_msgs/Twist             acceleration
geometry_msgs/Twist             acceleration_var
float32                         abs_acceleration
float32                         abs_acceleration_var

geometry_msgs/Twist             rel_acceleration
geometry_msgs/Twist             rel_acceleration_var
float32                         rel_abs_acceleration
float32                         rel_abs_acceleration_var

################## obj in which lane
int8                            lane_relation 

# 0 in ego lane
# -1 left first lane relative to ego
# -2 left second lane relative to ego
# -3 left third lane relative to ego
# -4 left forth lane relative to ego
# 1 right first lane relative to ego
# 2 right second lane relative to ego
# 3 right third lane relative to ego
# 4 right forth lane relative to ego

################## obj feature regarding to visibility
uint8                           visibility  # 0%, 10%, 20%, ..., 100%
float32                         solid_angle #
float32                         reflectivity #
string                          occlusion # Fully, Partly, Not, Null
string                          occlusion_l # Fully, Partly, Not, Null
string                          occlusion_h # Fully, Partly, Not, Null
string                          occlusion_w # Fully, Partly, Not, Null

bool                            occlusion_lowerpart # occlusion in lower part of the bounding box
bool                            validity # validity of bounding box
bool                            has_sun # if sun inside in FOV
uint8                           relation_type # relation type: INDIVIDUAL = 0, PARENT = 1, CHILD = 2
uint32                          relation_id # relation id
bool                            has_child # if has child

#################  class label info
string                          class_label_true # ground truth labels
string                          class_label_pred # predicted class labels
bool                            target_added # manually added target by labeling tool
bool                            target_deleted # manually deleted target by labeling tool

################# sub label info
string                          subclass_label_true # ground truth labels of subclass
string                          subclass_label_pred # predicted subclass labels

############### Behavior State of the Detected Object
uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/Time
time data

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular
"""
  __slots__ = ['header','id','tracking_age','Age','lifetime','object_status','confidence','color','pose_reliable','box_label','pose','pose_var','gps_pos','gps_var','tracking_points','tracking_point_type','jsk_pose','yaw','yaw_var','heading_angle','heading_angle_var','pitch','pitch_var','roll','roll_var','dimensions','dimensions_var','clustered_dimensions','velocity','velocity_var','abs_velocity','abs_velocity_var','rel_velocity','rel_velocity_var','rel_abs_velocity','rel_abs_velocity_var','acceleration','acceleration_var','abs_acceleration','abs_acceleration_var','rel_acceleration','rel_acceleration_var','rel_abs_acceleration','rel_abs_acceleration_var','lane_relation','visibility','solid_angle','reflectivity','occlusion','occlusion_l','occlusion_h','occlusion_w','occlusion_lowerpart','validity','has_sun','relation_type','relation_id','has_child','class_label_true','class_label_pred','target_added','target_deleted','subclass_label_true','subclass_label_pred','behavior_state']
  _slot_types = ['std_msgs/Header','uint32','uint32','std_msgs/Time','std_msgs/Time','string','float32','std_msgs/ColorRGBA','bool','uint8','geometry_msgs/Pose','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','uint8','geometry_msgs/Pose','float32','float32','float32','float32','float32','float32','float32','float32','geometry_msgs/Vector3','geometry_msgs/Point','geometry_msgs/Vector3','geometry_msgs/Twist','geometry_msgs/Twist','float32','float32','geometry_msgs/Twist','geometry_msgs/Twist','float32','float32','geometry_msgs/Twist','geometry_msgs/Twist','float32','float32','geometry_msgs/Twist','geometry_msgs/Twist','float32','float32','int8','uint8','float32','float32','string','string','string','string','bool','bool','bool','uint8','uint32','bool','string','string','bool','bool','string','string','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,tracking_age,Age,lifetime,object_status,confidence,color,pose_reliable,box_label,pose,pose_var,gps_pos,gps_var,tracking_points,tracking_point_type,jsk_pose,yaw,yaw_var,heading_angle,heading_angle_var,pitch,pitch_var,roll,roll_var,dimensions,dimensions_var,clustered_dimensions,velocity,velocity_var,abs_velocity,abs_velocity_var,rel_velocity,rel_velocity_var,rel_abs_velocity,rel_abs_velocity_var,acceleration,acceleration_var,abs_acceleration,abs_acceleration_var,rel_acceleration,rel_acceleration_var,rel_abs_acceleration,rel_abs_acceleration_var,lane_relation,visibility,solid_angle,reflectivity,occlusion,occlusion_l,occlusion_h,occlusion_w,occlusion_lowerpart,validity,has_sun,relation_type,relation_id,has_child,class_label_true,class_label_pred,target_added,target_deleted,subclass_label_true,subclass_label_pred,behavior_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_object, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.tracking_age is None:
        self.tracking_age = 0
      if self.Age is None:
        self.Age = std_msgs.msg.Time()
      if self.lifetime is None:
        self.lifetime = std_msgs.msg.Time()
      if self.object_status is None:
        self.object_status = ''
      if self.confidence is None:
        self.confidence = 0.
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.pose_reliable is None:
        self.pose_reliable = False
      if self.box_label is None:
        self.box_label = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.pose_var is None:
        self.pose_var = geometry_msgs.msg.Point()
      if self.gps_pos is None:
        self.gps_pos = geometry_msgs.msg.Point()
      if self.gps_var is None:
        self.gps_var = geometry_msgs.msg.Point()
      if self.tracking_points is None:
        self.tracking_points = geometry_msgs.msg.Point()
      if self.tracking_point_type is None:
        self.tracking_point_type = 0
      if self.jsk_pose is None:
        self.jsk_pose = geometry_msgs.msg.Pose()
      if self.yaw is None:
        self.yaw = 0.
      if self.yaw_var is None:
        self.yaw_var = 0.
      if self.heading_angle is None:
        self.heading_angle = 0.
      if self.heading_angle_var is None:
        self.heading_angle_var = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.pitch_var is None:
        self.pitch_var = 0.
      if self.roll is None:
        self.roll = 0.
      if self.roll_var is None:
        self.roll_var = 0.
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.dimensions_var is None:
        self.dimensions_var = geometry_msgs.msg.Point()
      if self.clustered_dimensions is None:
        self.clustered_dimensions = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.velocity_var is None:
        self.velocity_var = geometry_msgs.msg.Twist()
      if self.abs_velocity is None:
        self.abs_velocity = 0.
      if self.abs_velocity_var is None:
        self.abs_velocity_var = 0.
      if self.rel_velocity is None:
        self.rel_velocity = geometry_msgs.msg.Twist()
      if self.rel_velocity_var is None:
        self.rel_velocity_var = geometry_msgs.msg.Twist()
      if self.rel_abs_velocity is None:
        self.rel_abs_velocity = 0.
      if self.rel_abs_velocity_var is None:
        self.rel_abs_velocity_var = 0.
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.acceleration_var is None:
        self.acceleration_var = geometry_msgs.msg.Twist()
      if self.abs_acceleration is None:
        self.abs_acceleration = 0.
      if self.abs_acceleration_var is None:
        self.abs_acceleration_var = 0.
      if self.rel_acceleration is None:
        self.rel_acceleration = geometry_msgs.msg.Twist()
      if self.rel_acceleration_var is None:
        self.rel_acceleration_var = geometry_msgs.msg.Twist()
      if self.rel_abs_acceleration is None:
        self.rel_abs_acceleration = 0.
      if self.rel_abs_acceleration_var is None:
        self.rel_abs_acceleration_var = 0.
      if self.lane_relation is None:
        self.lane_relation = 0
      if self.visibility is None:
        self.visibility = 0
      if self.solid_angle is None:
        self.solid_angle = 0.
      if self.reflectivity is None:
        self.reflectivity = 0.
      if self.occlusion is None:
        self.occlusion = ''
      if self.occlusion_l is None:
        self.occlusion_l = ''
      if self.occlusion_h is None:
        self.occlusion_h = ''
      if self.occlusion_w is None:
        self.occlusion_w = ''
      if self.occlusion_lowerpart is None:
        self.occlusion_lowerpart = False
      if self.validity is None:
        self.validity = False
      if self.has_sun is None:
        self.has_sun = False
      if self.relation_type is None:
        self.relation_type = 0
      if self.relation_id is None:
        self.relation_id = 0
      if self.has_child is None:
        self.has_child = False
      if self.class_label_true is None:
        self.class_label_true = ''
      if self.class_label_pred is None:
        self.class_label_pred = ''
      if self.target_added is None:
        self.target_added = False
      if self.target_deleted is None:
        self.target_deleted = False
      if self.subclass_label_true is None:
        self.subclass_label_true = ''
      if self.subclass_label_pred is None:
        self.subclass_label_pred = ''
      if self.behavior_state is None:
        self.behavior_state = 0
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.tracking_age = 0
      self.Age = std_msgs.msg.Time()
      self.lifetime = std_msgs.msg.Time()
      self.object_status = ''
      self.confidence = 0.
      self.color = std_msgs.msg.ColorRGBA()
      self.pose_reliable = False
      self.box_label = 0
      self.pose = geometry_msgs.msg.Pose()
      self.pose_var = geometry_msgs.msg.Point()
      self.gps_pos = geometry_msgs.msg.Point()
      self.gps_var = geometry_msgs.msg.Point()
      self.tracking_points = geometry_msgs.msg.Point()
      self.tracking_point_type = 0
      self.jsk_pose = geometry_msgs.msg.Pose()
      self.yaw = 0.
      self.yaw_var = 0.
      self.heading_angle = 0.
      self.heading_angle_var = 0.
      self.pitch = 0.
      self.pitch_var = 0.
      self.roll = 0.
      self.roll_var = 0.
      self.dimensions = geometry_msgs.msg.Vector3()
      self.dimensions_var = geometry_msgs.msg.Point()
      self.clustered_dimensions = geometry_msgs.msg.Vector3()
      self.velocity = geometry_msgs.msg.Twist()
      self.velocity_var = geometry_msgs.msg.Twist()
      self.abs_velocity = 0.
      self.abs_velocity_var = 0.
      self.rel_velocity = geometry_msgs.msg.Twist()
      self.rel_velocity_var = geometry_msgs.msg.Twist()
      self.rel_abs_velocity = 0.
      self.rel_abs_velocity_var = 0.
      self.acceleration = geometry_msgs.msg.Twist()
      self.acceleration_var = geometry_msgs.msg.Twist()
      self.abs_acceleration = 0.
      self.abs_acceleration_var = 0.
      self.rel_acceleration = geometry_msgs.msg.Twist()
      self.rel_acceleration_var = geometry_msgs.msg.Twist()
      self.rel_abs_acceleration = 0.
      self.rel_abs_acceleration_var = 0.
      self.lane_relation = 0
      self.visibility = 0
      self.solid_angle = 0.
      self.reflectivity = 0.
      self.occlusion = ''
      self.occlusion_l = ''
      self.occlusion_h = ''
      self.occlusion_w = ''
      self.occlusion_lowerpart = False
      self.validity = False
      self.has_sun = False
      self.relation_type = 0
      self.relation_id = 0
      self.has_child = False
      self.class_label_true = ''
      self.class_label_pred = ''
      self.target_added = False
      self.target_deleted = False
      self.subclass_label_true = ''
      self.subclass_label_pred = ''
      self.behavior_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6I().pack(_x.id, _x.tracking_age, _x.Age.data.secs, _x.Age.data.nsecs, _x.lifetime.data.secs, _x.lifetime.data.nsecs))
      _x = self.object_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f().pack(_x.confidence, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.pose_reliable, _x.box_label, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pose_var.x, _x.pose_var.y, _x.pose_var.z, _x.gps_pos.x, _x.gps_pos.y, _x.gps_pos.z, _x.gps_var.x, _x.gps_var.y, _x.gps_var.z, _x.tracking_points.x, _x.tracking_points.y, _x.tracking_points.z, _x.tracking_point_type, _x.jsk_pose.position.x, _x.jsk_pose.position.y, _x.jsk_pose.position.z, _x.jsk_pose.orientation.x, _x.jsk_pose.orientation.y, _x.jsk_pose.orientation.z, _x.jsk_pose.orientation.w, _x.yaw, _x.yaw_var, _x.heading_angle, _x.heading_angle_var, _x.pitch, _x.pitch_var, _x.roll, _x.roll_var, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.dimensions_var.x, _x.dimensions_var.y, _x.dimensions_var.z, _x.clustered_dimensions.x, _x.clustered_dimensions.y, _x.clustered_dimensions.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.velocity_var.linear.x, _x.velocity_var.linear.y, _x.velocity_var.linear.z, _x.velocity_var.angular.x, _x.velocity_var.angular.y, _x.velocity_var.angular.z, _x.abs_velocity, _x.abs_velocity_var, _x.rel_velocity.linear.x, _x.rel_velocity.linear.y, _x.rel_velocity.linear.z, _x.rel_velocity.angular.x, _x.rel_velocity.angular.y, _x.rel_velocity.angular.z, _x.rel_velocity_var.linear.x, _x.rel_velocity_var.linear.y, _x.rel_velocity_var.linear.z, _x.rel_velocity_var.angular.x, _x.rel_velocity_var.angular.y, _x.rel_velocity_var.angular.z, _x.rel_abs_velocity, _x.rel_abs_velocity_var, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_var.linear.x, _x.acceleration_var.linear.y, _x.acceleration_var.linear.z, _x.acceleration_var.angular.x, _x.acceleration_var.angular.y, _x.acceleration_var.angular.z, _x.abs_acceleration, _x.abs_acceleration_var, _x.rel_acceleration.linear.x, _x.rel_acceleration.linear.y, _x.rel_acceleration.linear.z, _x.rel_acceleration.angular.x, _x.rel_acceleration.angular.y, _x.rel_acceleration.angular.z, _x.rel_acceleration_var.linear.x, _x.rel_acceleration_var.linear.y, _x.rel_acceleration_var.linear.z, _x.rel_acceleration_var.angular.x, _x.rel_acceleration_var.angular.y, _x.rel_acceleration_var.angular.z, _x.rel_abs_acceleration, _x.rel_abs_acceleration_var, _x.lane_relation, _x.visibility, _x.solid_angle, _x.reflectivity))
      _x = self.occlusion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.occlusion_l
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.occlusion_h
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.occlusion_w
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4BIB().pack(_x.occlusion_lowerpart, _x.validity, _x.has_sun, _x.relation_type, _x.relation_id, _x.has_child))
      _x = self.class_label_true
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.class_label_pred
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.target_added, _x.target_deleted))
      _x = self.subclass_label_true
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subclass_label_pred
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.behavior_state
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Age is None:
        self.Age = std_msgs.msg.Time()
      if self.lifetime is None:
        self.lifetime = std_msgs.msg.Time()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.pose_var is None:
        self.pose_var = geometry_msgs.msg.Point()
      if self.gps_pos is None:
        self.gps_pos = geometry_msgs.msg.Point()
      if self.gps_var is None:
        self.gps_var = geometry_msgs.msg.Point()
      if self.tracking_points is None:
        self.tracking_points = geometry_msgs.msg.Point()
      if self.jsk_pose is None:
        self.jsk_pose = geometry_msgs.msg.Pose()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.dimensions_var is None:
        self.dimensions_var = geometry_msgs.msg.Point()
      if self.clustered_dimensions is None:
        self.clustered_dimensions = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.velocity_var is None:
        self.velocity_var = geometry_msgs.msg.Twist()
      if self.rel_velocity is None:
        self.rel_velocity = geometry_msgs.msg.Twist()
      if self.rel_velocity_var is None:
        self.rel_velocity_var = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.acceleration_var is None:
        self.acceleration_var = geometry_msgs.msg.Twist()
      if self.rel_acceleration is None:
        self.rel_acceleration = geometry_msgs.msg.Twist()
      if self.rel_acceleration_var is None:
        self.rel_acceleration_var = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.id, _x.tracking_age, _x.Age.data.secs, _x.Age.data.nsecs, _x.lifetime.data.secs, _x.lifetime.data.nsecs,) = _get_struct_6I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_status = str[start:end]
      _x = self
      start = end
      end += 761
      (_x.confidence, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.pose_reliable, _x.box_label, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pose_var.x, _x.pose_var.y, _x.pose_var.z, _x.gps_pos.x, _x.gps_pos.y, _x.gps_pos.z, _x.gps_var.x, _x.gps_var.y, _x.gps_var.z, _x.tracking_points.x, _x.tracking_points.y, _x.tracking_points.z, _x.tracking_point_type, _x.jsk_pose.position.x, _x.jsk_pose.position.y, _x.jsk_pose.position.z, _x.jsk_pose.orientation.x, _x.jsk_pose.orientation.y, _x.jsk_pose.orientation.z, _x.jsk_pose.orientation.w, _x.yaw, _x.yaw_var, _x.heading_angle, _x.heading_angle_var, _x.pitch, _x.pitch_var, _x.roll, _x.roll_var, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.dimensions_var.x, _x.dimensions_var.y, _x.dimensions_var.z, _x.clustered_dimensions.x, _x.clustered_dimensions.y, _x.clustered_dimensions.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.velocity_var.linear.x, _x.velocity_var.linear.y, _x.velocity_var.linear.z, _x.velocity_var.angular.x, _x.velocity_var.angular.y, _x.velocity_var.angular.z, _x.abs_velocity, _x.abs_velocity_var, _x.rel_velocity.linear.x, _x.rel_velocity.linear.y, _x.rel_velocity.linear.z, _x.rel_velocity.angular.x, _x.rel_velocity.angular.y, _x.rel_velocity.angular.z, _x.rel_velocity_var.linear.x, _x.rel_velocity_var.linear.y, _x.rel_velocity_var.linear.z, _x.rel_velocity_var.angular.x, _x.rel_velocity_var.angular.y, _x.rel_velocity_var.angular.z, _x.rel_abs_velocity, _x.rel_abs_velocity_var, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_var.linear.x, _x.acceleration_var.linear.y, _x.acceleration_var.linear.z, _x.acceleration_var.angular.x, _x.acceleration_var.angular.y, _x.acceleration_var.angular.z, _x.abs_acceleration, _x.abs_acceleration_var, _x.rel_acceleration.linear.x, _x.rel_acceleration.linear.y, _x.rel_acceleration.linear.z, _x.rel_acceleration.angular.x, _x.rel_acceleration.angular.y, _x.rel_acceleration.angular.z, _x.rel_acceleration_var.linear.x, _x.rel_acceleration_var.linear.y, _x.rel_acceleration_var.linear.z, _x.rel_acceleration_var.angular.x, _x.rel_acceleration_var.angular.y, _x.rel_acceleration_var.angular.z, _x.rel_abs_acceleration, _x.rel_abs_acceleration_var, _x.lane_relation, _x.visibility, _x.solid_angle, _x.reflectivity,) = _get_struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.occlusion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.occlusion = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.occlusion_l = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.occlusion_l = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.occlusion_h = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.occlusion_h = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.occlusion_w = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.occlusion_w = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.occlusion_lowerpart, _x.validity, _x.has_sun, _x.relation_type, _x.relation_id, _x.has_child,) = _get_struct_4BIB().unpack(str[start:end])
      self.occlusion_lowerpart = bool(self.occlusion_lowerpart)
      self.validity = bool(self.validity)
      self.has_sun = bool(self.has_sun)
      self.has_child = bool(self.has_child)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_label_true = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_label_true = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_label_pred = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_label_pred = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.target_added, _x.target_deleted,) = _get_struct_2B().unpack(str[start:end])
      self.target_added = bool(self.target_added)
      self.target_deleted = bool(self.target_deleted)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subclass_label_true = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subclass_label_true = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subclass_label_pred = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subclass_label_pred = str[start:end]
      start = end
      end += 1
      (self.behavior_state,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6I().pack(_x.id, _x.tracking_age, _x.Age.data.secs, _x.Age.data.nsecs, _x.lifetime.data.secs, _x.lifetime.data.nsecs))
      _x = self.object_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f().pack(_x.confidence, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.pose_reliable, _x.box_label, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pose_var.x, _x.pose_var.y, _x.pose_var.z, _x.gps_pos.x, _x.gps_pos.y, _x.gps_pos.z, _x.gps_var.x, _x.gps_var.y, _x.gps_var.z, _x.tracking_points.x, _x.tracking_points.y, _x.tracking_points.z, _x.tracking_point_type, _x.jsk_pose.position.x, _x.jsk_pose.position.y, _x.jsk_pose.position.z, _x.jsk_pose.orientation.x, _x.jsk_pose.orientation.y, _x.jsk_pose.orientation.z, _x.jsk_pose.orientation.w, _x.yaw, _x.yaw_var, _x.heading_angle, _x.heading_angle_var, _x.pitch, _x.pitch_var, _x.roll, _x.roll_var, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.dimensions_var.x, _x.dimensions_var.y, _x.dimensions_var.z, _x.clustered_dimensions.x, _x.clustered_dimensions.y, _x.clustered_dimensions.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.velocity_var.linear.x, _x.velocity_var.linear.y, _x.velocity_var.linear.z, _x.velocity_var.angular.x, _x.velocity_var.angular.y, _x.velocity_var.angular.z, _x.abs_velocity, _x.abs_velocity_var, _x.rel_velocity.linear.x, _x.rel_velocity.linear.y, _x.rel_velocity.linear.z, _x.rel_velocity.angular.x, _x.rel_velocity.angular.y, _x.rel_velocity.angular.z, _x.rel_velocity_var.linear.x, _x.rel_velocity_var.linear.y, _x.rel_velocity_var.linear.z, _x.rel_velocity_var.angular.x, _x.rel_velocity_var.angular.y, _x.rel_velocity_var.angular.z, _x.rel_abs_velocity, _x.rel_abs_velocity_var, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_var.linear.x, _x.acceleration_var.linear.y, _x.acceleration_var.linear.z, _x.acceleration_var.angular.x, _x.acceleration_var.angular.y, _x.acceleration_var.angular.z, _x.abs_acceleration, _x.abs_acceleration_var, _x.rel_acceleration.linear.x, _x.rel_acceleration.linear.y, _x.rel_acceleration.linear.z, _x.rel_acceleration.angular.x, _x.rel_acceleration.angular.y, _x.rel_acceleration.angular.z, _x.rel_acceleration_var.linear.x, _x.rel_acceleration_var.linear.y, _x.rel_acceleration_var.linear.z, _x.rel_acceleration_var.angular.x, _x.rel_acceleration_var.angular.y, _x.rel_acceleration_var.angular.z, _x.rel_abs_acceleration, _x.rel_abs_acceleration_var, _x.lane_relation, _x.visibility, _x.solid_angle, _x.reflectivity))
      _x = self.occlusion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.occlusion_l
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.occlusion_h
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.occlusion_w
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4BIB().pack(_x.occlusion_lowerpart, _x.validity, _x.has_sun, _x.relation_type, _x.relation_id, _x.has_child))
      _x = self.class_label_true
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.class_label_pred
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.target_added, _x.target_deleted))
      _x = self.subclass_label_true
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subclass_label_pred
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.behavior_state
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Age is None:
        self.Age = std_msgs.msg.Time()
      if self.lifetime is None:
        self.lifetime = std_msgs.msg.Time()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.pose_var is None:
        self.pose_var = geometry_msgs.msg.Point()
      if self.gps_pos is None:
        self.gps_pos = geometry_msgs.msg.Point()
      if self.gps_var is None:
        self.gps_var = geometry_msgs.msg.Point()
      if self.tracking_points is None:
        self.tracking_points = geometry_msgs.msg.Point()
      if self.jsk_pose is None:
        self.jsk_pose = geometry_msgs.msg.Pose()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.dimensions_var is None:
        self.dimensions_var = geometry_msgs.msg.Point()
      if self.clustered_dimensions is None:
        self.clustered_dimensions = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.velocity_var is None:
        self.velocity_var = geometry_msgs.msg.Twist()
      if self.rel_velocity is None:
        self.rel_velocity = geometry_msgs.msg.Twist()
      if self.rel_velocity_var is None:
        self.rel_velocity_var = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.acceleration_var is None:
        self.acceleration_var = geometry_msgs.msg.Twist()
      if self.rel_acceleration is None:
        self.rel_acceleration = geometry_msgs.msg.Twist()
      if self.rel_acceleration_var is None:
        self.rel_acceleration_var = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.id, _x.tracking_age, _x.Age.data.secs, _x.Age.data.nsecs, _x.lifetime.data.secs, _x.lifetime.data.nsecs,) = _get_struct_6I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_status = str[start:end]
      _x = self
      start = end
      end += 761
      (_x.confidence, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.pose_reliable, _x.box_label, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pose_var.x, _x.pose_var.y, _x.pose_var.z, _x.gps_pos.x, _x.gps_pos.y, _x.gps_pos.z, _x.gps_var.x, _x.gps_var.y, _x.gps_var.z, _x.tracking_points.x, _x.tracking_points.y, _x.tracking_points.z, _x.tracking_point_type, _x.jsk_pose.position.x, _x.jsk_pose.position.y, _x.jsk_pose.position.z, _x.jsk_pose.orientation.x, _x.jsk_pose.orientation.y, _x.jsk_pose.orientation.z, _x.jsk_pose.orientation.w, _x.yaw, _x.yaw_var, _x.heading_angle, _x.heading_angle_var, _x.pitch, _x.pitch_var, _x.roll, _x.roll_var, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.dimensions_var.x, _x.dimensions_var.y, _x.dimensions_var.z, _x.clustered_dimensions.x, _x.clustered_dimensions.y, _x.clustered_dimensions.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.velocity_var.linear.x, _x.velocity_var.linear.y, _x.velocity_var.linear.z, _x.velocity_var.angular.x, _x.velocity_var.angular.y, _x.velocity_var.angular.z, _x.abs_velocity, _x.abs_velocity_var, _x.rel_velocity.linear.x, _x.rel_velocity.linear.y, _x.rel_velocity.linear.z, _x.rel_velocity.angular.x, _x.rel_velocity.angular.y, _x.rel_velocity.angular.z, _x.rel_velocity_var.linear.x, _x.rel_velocity_var.linear.y, _x.rel_velocity_var.linear.z, _x.rel_velocity_var.angular.x, _x.rel_velocity_var.angular.y, _x.rel_velocity_var.angular.z, _x.rel_abs_velocity, _x.rel_abs_velocity_var, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_var.linear.x, _x.acceleration_var.linear.y, _x.acceleration_var.linear.z, _x.acceleration_var.angular.x, _x.acceleration_var.angular.y, _x.acceleration_var.angular.z, _x.abs_acceleration, _x.abs_acceleration_var, _x.rel_acceleration.linear.x, _x.rel_acceleration.linear.y, _x.rel_acceleration.linear.z, _x.rel_acceleration.angular.x, _x.rel_acceleration.angular.y, _x.rel_acceleration.angular.z, _x.rel_acceleration_var.linear.x, _x.rel_acceleration_var.linear.y, _x.rel_acceleration_var.linear.z, _x.rel_acceleration_var.angular.x, _x.rel_acceleration_var.angular.y, _x.rel_acceleration_var.angular.z, _x.rel_abs_acceleration, _x.rel_abs_acceleration_var, _x.lane_relation, _x.visibility, _x.solid_angle, _x.reflectivity,) = _get_struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.occlusion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.occlusion = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.occlusion_l = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.occlusion_l = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.occlusion_h = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.occlusion_h = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.occlusion_w = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.occlusion_w = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.occlusion_lowerpart, _x.validity, _x.has_sun, _x.relation_type, _x.relation_id, _x.has_child,) = _get_struct_4BIB().unpack(str[start:end])
      self.occlusion_lowerpart = bool(self.occlusion_lowerpart)
      self.validity = bool(self.validity)
      self.has_sun = bool(self.has_sun)
      self.has_child = bool(self.has_child)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_label_true = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_label_true = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_label_pred = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_label_pred = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.target_added, _x.target_deleted,) = _get_struct_2B().unpack(str[start:end])
      self.target_added = bool(self.target_added)
      self.target_deleted = bool(self.target_deleted)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subclass_label_true = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subclass_label_true = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subclass_label_pred = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subclass_label_pred = str[start:end]
      start = end
      end += 1
      (self.behavior_state,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4BIB = None
def _get_struct_4BIB():
    global _struct_4BIB
    if _struct_4BIB is None:
        _struct_4BIB = struct.Struct("<4BIB")
    return _struct_4BIB
_struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f = None
def _get_struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f():
    global _struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f
    if _struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f is None:
        _struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f = struct.Struct("<5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f")
    return _struct_5f2B19dB7d8f21d2f12d2f12d2f12d2fbB2f
_struct_6I = None
def _get_struct_6I():
    global _struct_6I
    if _struct_6I is None:
        _struct_6I = struct.Struct("<6I")
    return _struct_6I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
