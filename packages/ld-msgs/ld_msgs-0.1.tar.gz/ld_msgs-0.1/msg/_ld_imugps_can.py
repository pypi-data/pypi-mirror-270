# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_imugps_can.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import std_msgs.msg

class ld_imugps_can(genpy.Message):
  _md5sum = "c5fa84ba8cca77f2af30305dec211727"
  _type = "ld_msgs/ld_imugps_can"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

time can_ts
time gps_ts
time imu_ts

# velocity from CAN message [m/s]
float64 v_x_CAN
float64 v_x_CAN_covariance

# yawrate from CAN message [rad/s]
float64 yawrate
float64 yawrate_covariance

# x accelerate from CAN message [m/s^2]
float64 acceleration_x
float64 acceleration_x_covariance

# y accelerate from CAN message [m/s^2]
float64 acceleration_y
float64 acceleration_y_covariance

# orientation information from imugps
geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

# angular velocity from imugps [rad/s]
geometry_msgs/Vector3 angular_velocity_imugps
float64[9] angular_velocity_imugps_covariance # Row major about x, y, z axes

# linear acceleration from imugps Longitudinal(x) cross(y) vertical(z) [m/s^2]
geometry_msgs/Vector3 linear_acceleration_imugps
float64[9] linear_acceleration_imugps_covariance # Row major x, y z 

# roll pitch yaw from imugps [rad]
geometry_msgs/Vector3 roll_pitch_yaw_imugps
float64[9] roll_pitch_yaw_imugps_covariance

# linear_velocity from imugps N(x)W(y)U(z) [m/s]
geometry_msgs/Vector3 linear_velocity_imugps
float64[9] linear_velocity_imugps_covariance

# linear_velocity from imugps V_x [m/s]
float64 v_x_imugps
float64 v_x_imugps_covariance

# position information from GPS altitude longitude latitude [rad]
float64 altitude
float64 longitude
float64 latitude
float64[9] position_covariance

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','can_ts','gps_ts','imu_ts','v_x_CAN','v_x_CAN_covariance','yawrate','yawrate_covariance','acceleration_x','acceleration_x_covariance','acceleration_y','acceleration_y_covariance','orientation','orientation_covariance','angular_velocity_imugps','angular_velocity_imugps_covariance','linear_acceleration_imugps','linear_acceleration_imugps_covariance','roll_pitch_yaw_imugps','roll_pitch_yaw_imugps_covariance','linear_velocity_imugps','linear_velocity_imugps_covariance','v_x_imugps','v_x_imugps_covariance','altitude','longitude','latitude','position_covariance']
  _slot_types = ['std_msgs/Header','time','time','time','float64','float64','float64','float64','float64','float64','float64','float64','geometry_msgs/Quaternion','float64[9]','geometry_msgs/Vector3','float64[9]','geometry_msgs/Vector3','float64[9]','geometry_msgs/Vector3','float64[9]','geometry_msgs/Vector3','float64[9]','float64','float64','float64','float64','float64','float64[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,can_ts,gps_ts,imu_ts,v_x_CAN,v_x_CAN_covariance,yawrate,yawrate_covariance,acceleration_x,acceleration_x_covariance,acceleration_y,acceleration_y_covariance,orientation,orientation_covariance,angular_velocity_imugps,angular_velocity_imugps_covariance,linear_acceleration_imugps,linear_acceleration_imugps_covariance,roll_pitch_yaw_imugps,roll_pitch_yaw_imugps_covariance,linear_velocity_imugps,linear_velocity_imugps_covariance,v_x_imugps,v_x_imugps_covariance,altitude,longitude,latitude,position_covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_imugps_can, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.can_ts is None:
        self.can_ts = genpy.Time()
      if self.gps_ts is None:
        self.gps_ts = genpy.Time()
      if self.imu_ts is None:
        self.imu_ts = genpy.Time()
      if self.v_x_CAN is None:
        self.v_x_CAN = 0.
      if self.v_x_CAN_covariance is None:
        self.v_x_CAN_covariance = 0.
      if self.yawrate is None:
        self.yawrate = 0.
      if self.yawrate_covariance is None:
        self.yawrate_covariance = 0.
      if self.acceleration_x is None:
        self.acceleration_x = 0.
      if self.acceleration_x_covariance is None:
        self.acceleration_x_covariance = 0.
      if self.acceleration_y is None:
        self.acceleration_y = 0.
      if self.acceleration_y_covariance is None:
        self.acceleration_y_covariance = 0.
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.orientation_covariance is None:
        self.orientation_covariance = [0.] * 9
      if self.angular_velocity_imugps is None:
        self.angular_velocity_imugps = geometry_msgs.msg.Vector3()
      if self.angular_velocity_imugps_covariance is None:
        self.angular_velocity_imugps_covariance = [0.] * 9
      if self.linear_acceleration_imugps is None:
        self.linear_acceleration_imugps = geometry_msgs.msg.Vector3()
      if self.linear_acceleration_imugps_covariance is None:
        self.linear_acceleration_imugps_covariance = [0.] * 9
      if self.roll_pitch_yaw_imugps is None:
        self.roll_pitch_yaw_imugps = geometry_msgs.msg.Vector3()
      if self.roll_pitch_yaw_imugps_covariance is None:
        self.roll_pitch_yaw_imugps_covariance = [0.] * 9
      if self.linear_velocity_imugps is None:
        self.linear_velocity_imugps = geometry_msgs.msg.Vector3()
      if self.linear_velocity_imugps_covariance is None:
        self.linear_velocity_imugps_covariance = [0.] * 9
      if self.v_x_imugps is None:
        self.v_x_imugps = 0.
      if self.v_x_imugps_covariance is None:
        self.v_x_imugps_covariance = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.position_covariance is None:
        self.position_covariance = [0.] * 9
    else:
      self.header = std_msgs.msg.Header()
      self.can_ts = genpy.Time()
      self.gps_ts = genpy.Time()
      self.imu_ts = genpy.Time()
      self.v_x_CAN = 0.
      self.v_x_CAN_covariance = 0.
      self.yawrate = 0.
      self.yawrate_covariance = 0.
      self.acceleration_x = 0.
      self.acceleration_x_covariance = 0.
      self.acceleration_y = 0.
      self.acceleration_y_covariance = 0.
      self.orientation = geometry_msgs.msg.Quaternion()
      self.orientation_covariance = [0.] * 9
      self.angular_velocity_imugps = geometry_msgs.msg.Vector3()
      self.angular_velocity_imugps_covariance = [0.] * 9
      self.linear_acceleration_imugps = geometry_msgs.msg.Vector3()
      self.linear_acceleration_imugps_covariance = [0.] * 9
      self.roll_pitch_yaw_imugps = geometry_msgs.msg.Vector3()
      self.roll_pitch_yaw_imugps_covariance = [0.] * 9
      self.linear_velocity_imugps = geometry_msgs.msg.Vector3()
      self.linear_velocity_imugps_covariance = [0.] * 9
      self.v_x_imugps = 0.
      self.v_x_imugps_covariance = 0.
      self.altitude = 0.
      self.longitude = 0.
      self.latitude = 0.
      self.position_covariance = [0.] * 9

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6I12d().pack(_x.can_ts.secs, _x.can_ts.nsecs, _x.gps_ts.secs, _x.gps_ts.nsecs, _x.imu_ts.secs, _x.imu_ts.nsecs, _x.v_x_CAN, _x.v_x_CAN_covariance, _x.yawrate, _x.yawrate_covariance, _x.acceleration_x, _x.acceleration_x_covariance, _x.acceleration_y, _x.acceleration_y_covariance, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
      buff.write(_get_struct_9d().pack(*self.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.angular_velocity_imugps.x, _x.angular_velocity_imugps.y, _x.angular_velocity_imugps.z))
      buff.write(_get_struct_9d().pack(*self.angular_velocity_imugps_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.linear_acceleration_imugps.x, _x.linear_acceleration_imugps.y, _x.linear_acceleration_imugps.z))
      buff.write(_get_struct_9d().pack(*self.linear_acceleration_imugps_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.roll_pitch_yaw_imugps.x, _x.roll_pitch_yaw_imugps.y, _x.roll_pitch_yaw_imugps.z))
      buff.write(_get_struct_9d().pack(*self.roll_pitch_yaw_imugps_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.linear_velocity_imugps.x, _x.linear_velocity_imugps.y, _x.linear_velocity_imugps.z))
      buff.write(_get_struct_9d().pack(*self.linear_velocity_imugps_covariance))
      _x = self
      buff.write(_get_struct_5d().pack(_x.v_x_imugps, _x.v_x_imugps_covariance, _x.altitude, _x.longitude, _x.latitude))
      buff.write(_get_struct_9d().pack(*self.position_covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.can_ts is None:
        self.can_ts = genpy.Time()
      if self.gps_ts is None:
        self.gps_ts = genpy.Time()
      if self.imu_ts is None:
        self.imu_ts = genpy.Time()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.angular_velocity_imugps is None:
        self.angular_velocity_imugps = geometry_msgs.msg.Vector3()
      if self.linear_acceleration_imugps is None:
        self.linear_acceleration_imugps = geometry_msgs.msg.Vector3()
      if self.roll_pitch_yaw_imugps is None:
        self.roll_pitch_yaw_imugps = geometry_msgs.msg.Vector3()
      if self.linear_velocity_imugps is None:
        self.linear_velocity_imugps = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.can_ts.secs, _x.can_ts.nsecs, _x.gps_ts.secs, _x.gps_ts.nsecs, _x.imu_ts.secs, _x.imu_ts.nsecs, _x.v_x_CAN, _x.v_x_CAN_covariance, _x.yawrate, _x.yawrate_covariance, _x.acceleration_x, _x.acceleration_x_covariance, _x.acceleration_y, _x.acceleration_y_covariance, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _get_struct_6I12d().unpack(str[start:end])
      start = end
      end += 72
      self.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.angular_velocity_imugps.x, _x.angular_velocity_imugps.y, _x.angular_velocity_imugps.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.angular_velocity_imugps_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.linear_acceleration_imugps.x, _x.linear_acceleration_imugps.y, _x.linear_acceleration_imugps.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.linear_acceleration_imugps_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.roll_pitch_yaw_imugps.x, _x.roll_pitch_yaw_imugps.y, _x.roll_pitch_yaw_imugps.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.roll_pitch_yaw_imugps_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.linear_velocity_imugps.x, _x.linear_velocity_imugps.y, _x.linear_velocity_imugps.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.linear_velocity_imugps_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 40
      (_x.v_x_imugps, _x.v_x_imugps_covariance, _x.altitude, _x.longitude, _x.latitude,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = _get_struct_9d().unpack(str[start:end])
      self.can_ts.canon()
      self.gps_ts.canon()
      self.imu_ts.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6I12d().pack(_x.can_ts.secs, _x.can_ts.nsecs, _x.gps_ts.secs, _x.gps_ts.nsecs, _x.imu_ts.secs, _x.imu_ts.nsecs, _x.v_x_CAN, _x.v_x_CAN_covariance, _x.yawrate, _x.yawrate_covariance, _x.acceleration_x, _x.acceleration_x_covariance, _x.acceleration_y, _x.acceleration_y_covariance, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
      buff.write(self.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.angular_velocity_imugps.x, _x.angular_velocity_imugps.y, _x.angular_velocity_imugps.z))
      buff.write(self.angular_velocity_imugps_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.linear_acceleration_imugps.x, _x.linear_acceleration_imugps.y, _x.linear_acceleration_imugps.z))
      buff.write(self.linear_acceleration_imugps_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.roll_pitch_yaw_imugps.x, _x.roll_pitch_yaw_imugps.y, _x.roll_pitch_yaw_imugps.z))
      buff.write(self.roll_pitch_yaw_imugps_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.linear_velocity_imugps.x, _x.linear_velocity_imugps.y, _x.linear_velocity_imugps.z))
      buff.write(self.linear_velocity_imugps_covariance.tostring())
      _x = self
      buff.write(_get_struct_5d().pack(_x.v_x_imugps, _x.v_x_imugps_covariance, _x.altitude, _x.longitude, _x.latitude))
      buff.write(self.position_covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.can_ts is None:
        self.can_ts = genpy.Time()
      if self.gps_ts is None:
        self.gps_ts = genpy.Time()
      if self.imu_ts is None:
        self.imu_ts = genpy.Time()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.angular_velocity_imugps is None:
        self.angular_velocity_imugps = geometry_msgs.msg.Vector3()
      if self.linear_acceleration_imugps is None:
        self.linear_acceleration_imugps = geometry_msgs.msg.Vector3()
      if self.roll_pitch_yaw_imugps is None:
        self.roll_pitch_yaw_imugps = geometry_msgs.msg.Vector3()
      if self.linear_velocity_imugps is None:
        self.linear_velocity_imugps = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.can_ts.secs, _x.can_ts.nsecs, _x.gps_ts.secs, _x.gps_ts.nsecs, _x.imu_ts.secs, _x.imu_ts.nsecs, _x.v_x_CAN, _x.v_x_CAN_covariance, _x.yawrate, _x.yawrate_covariance, _x.acceleration_x, _x.acceleration_x_covariance, _x.acceleration_y, _x.acceleration_y_covariance, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _get_struct_6I12d().unpack(str[start:end])
      start = end
      end += 72
      self.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.angular_velocity_imugps.x, _x.angular_velocity_imugps.y, _x.angular_velocity_imugps.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.angular_velocity_imugps_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.linear_acceleration_imugps.x, _x.linear_acceleration_imugps.y, _x.linear_acceleration_imugps.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.linear_acceleration_imugps_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.roll_pitch_yaw_imugps.x, _x.roll_pitch_yaw_imugps.y, _x.roll_pitch_yaw_imugps.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.roll_pitch_yaw_imugps_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.linear_velocity_imugps.x, _x.linear_velocity_imugps.y, _x.linear_velocity_imugps.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.linear_velocity_imugps_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 40
      (_x.v_x_imugps, _x.v_x_imugps_covariance, _x.altitude, _x.longitude, _x.latitude,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      self.can_ts.canon()
      self.gps_ts.canon()
      self.imu_ts.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_6I12d = None
def _get_struct_6I12d():
    global _struct_6I12d
    if _struct_6I12d is None:
        _struct_6I12d = struct.Struct("<6I12d")
    return _struct_6I12d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
