# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_mobileye_lane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ld_mobileye_lane(genpy.Message):
  _md5sum = "2576f5708d76bd715056b35997fa9bfc"
  _type = "ld_msgs/ld_mobileye_lane"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """
# not the file protocol_extlogdata2_2.25

Header header
string type

#see "AM_Ext protocol.pdf"

#0x669

float64 distance_to_left_lane
float64 distance_to_right_lane

#0x76b:number of next lane markers reported
#Header header_number_of_next_lane
uint8 number_of_next_lane

#0x76c & 0x76d + 4n (n=0..3) will be for the left lane.
#0x76e & 0x76f + 4n (n=0..3) will be for the right lane.
#remark: currently two lane marks are always reported one for left and one for
#right, and they are valid only if the lane type is solid.


# see "LKA common CAN protocol.pdf"
string address
uint8 ID
#0x766
#Header left_header_A
float64 left_c0 #bitcode ist signed 16bits
float64 left_c2
float64 left_c3
float64 left_width_marking
uint8 left_model_degree
uint8 left_quality
uint8 left_lane_type

#0x767
#Header left_header_B
float64 left_c1

#0x768
#Header right_header_A
float64 right_c0
float64 right_c2
float64 right_c3
float64 right_width_marking
uint8 right_model_degree
uint8 right_quality
uint8 right_lane_type

#0x769
#Header right_header_B
float64 right_c1



#0x76c
#Header next_1_left_header_A
float64 next_1_left_c0 
float64 next_1_left_c2
float64 next_1_left_c3
float64 next_1_left_width_marking
uint8 next_1_left_model_degree
uint8 next_1_left_quality
uint8 next_1_left_lane_type

#0x76d
#Header next_1_left_header_B
float64 next_1_left_c1

#0x76e
#Header next_1_right_header_A
float64 next_1_right_c0
float64 next_1_right_c2
float64 next_1_right_c3
float64 next_1_right_width_marking
uint8 next_1_right_model_degree
uint8 next_1_right_quality
uint8 next_1_right_lane_type

#0x76f
#Header next_1_right_header_B
float64 next_1_right_c1

#0x770
#Header next_2_left_header_A
float64 next_2_left_c0 
float64 next_2_left_c2
float64 next_2_left_c3
float64 next_2_left_width_marking
uint8 next_2_left_model_degree
uint8 next_2_left_quality
uint8 next_2_left_lane_type

#0x771
#Header next_2_left_header_B
float64 next_2_left_c1

#0x772
#Header next_2_right_header_A
float64 next_2_right_c0
float64 next_2_right_c2
float64 next_2_right_c3
float64 next_2_right_width_marking
uint8 next_2_right_model_degree
uint8 next_2_right_quality
uint8 next_2_right_lane_type

#0x773
#Header next_2_right_header_B
float64 next_2_right_c1

#0x774-next-3-left
#Header next_3_left_header_A
float64 next_3_left_c0 
float64 next_3_left_c2
float64 next_3_left_c3
float64 next_3_left_width_marking
uint8 next_3_left_model_degree
uint8 next_3_left_quality
uint8 next_3_left_lane_type

#0x775-next-3-left
#Header next_3_left_header_B
float64 next_3_left_c1

#0x777-next-3-right
#Header next_3_right_header_A
float64 next_3_right_c0
float64 next_3_right_c2
float64 next_3_right_c3
float64 next_3_right_width_marking
uint8 next_3_right_model_degree
uint8 next_3_right_quality
uint8 next_3_right_lane_type

#0x777-next-3-right
#Header next_3_right_header_B
float64 next_3_right_c1


#0x778-next-4-left
#Header next_4_left_header_A
float64 next_4_left_c0 
float64 next_4_left_c2
float64 next_4_left_c3
float64 next_4_left_width_marking
uint8 next_4_left_model_degree
uint8 next_4_left_quality
uint8 next_4_left_lane_type

#0x779-next-4-left
#Header next_4_left_header_B
float64 next_4_left_c1

#0x77a-next-4-right
#Header next_4_right_header_A
float64 next_4_right_c0
float64 next_4_right_c2
float64 next_4_right_c3
float64 next_4_right_width_marking
uint8 next_4_right_model_degree
uint8 next_4_right_quality
uint8 next_4_right_lane_type

#0x77b-next-4-right
#Header next_4_right_header_B
float64 next_4_right_c1

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','type','distance_to_left_lane','distance_to_right_lane','number_of_next_lane','address','ID','left_c0','left_c2','left_c3','left_width_marking','left_model_degree','left_quality','left_lane_type','left_c1','right_c0','right_c2','right_c3','right_width_marking','right_model_degree','right_quality','right_lane_type','right_c1','next_1_left_c0','next_1_left_c2','next_1_left_c3','next_1_left_width_marking','next_1_left_model_degree','next_1_left_quality','next_1_left_lane_type','next_1_left_c1','next_1_right_c0','next_1_right_c2','next_1_right_c3','next_1_right_width_marking','next_1_right_model_degree','next_1_right_quality','next_1_right_lane_type','next_1_right_c1','next_2_left_c0','next_2_left_c2','next_2_left_c3','next_2_left_width_marking','next_2_left_model_degree','next_2_left_quality','next_2_left_lane_type','next_2_left_c1','next_2_right_c0','next_2_right_c2','next_2_right_c3','next_2_right_width_marking','next_2_right_model_degree','next_2_right_quality','next_2_right_lane_type','next_2_right_c1','next_3_left_c0','next_3_left_c2','next_3_left_c3','next_3_left_width_marking','next_3_left_model_degree','next_3_left_quality','next_3_left_lane_type','next_3_left_c1','next_3_right_c0','next_3_right_c2','next_3_right_c3','next_3_right_width_marking','next_3_right_model_degree','next_3_right_quality','next_3_right_lane_type','next_3_right_c1','next_4_left_c0','next_4_left_c2','next_4_left_c3','next_4_left_width_marking','next_4_left_model_degree','next_4_left_quality','next_4_left_lane_type','next_4_left_c1','next_4_right_c0','next_4_right_c2','next_4_right_c3','next_4_right_width_marking','next_4_right_model_degree','next_4_right_quality','next_4_right_lane_type','next_4_right_c1']
  _slot_types = ['std_msgs/Header','string','float64','float64','uint8','string','uint8','float64','float64','float64','float64','uint8','uint8','uint8','float64','float64','float64','float64','float64','uint8','uint8','uint8','float64','float64','float64','float64','float64','uint8','uint8','uint8','float64','float64','float64','float64','float64','uint8','uint8','uint8','float64','float64','float64','float64','float64','uint8','uint8','uint8','float64','float64','float64','float64','float64','uint8','uint8','uint8','float64','float64','float64','float64','float64','uint8','uint8','uint8','float64','float64','float64','float64','float64','uint8','uint8','uint8','float64','float64','float64','float64','float64','uint8','uint8','uint8','float64','float64','float64','float64','float64','uint8','uint8','uint8','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,type,distance_to_left_lane,distance_to_right_lane,number_of_next_lane,address,ID,left_c0,left_c2,left_c3,left_width_marking,left_model_degree,left_quality,left_lane_type,left_c1,right_c0,right_c2,right_c3,right_width_marking,right_model_degree,right_quality,right_lane_type,right_c1,next_1_left_c0,next_1_left_c2,next_1_left_c3,next_1_left_width_marking,next_1_left_model_degree,next_1_left_quality,next_1_left_lane_type,next_1_left_c1,next_1_right_c0,next_1_right_c2,next_1_right_c3,next_1_right_width_marking,next_1_right_model_degree,next_1_right_quality,next_1_right_lane_type,next_1_right_c1,next_2_left_c0,next_2_left_c2,next_2_left_c3,next_2_left_width_marking,next_2_left_model_degree,next_2_left_quality,next_2_left_lane_type,next_2_left_c1,next_2_right_c0,next_2_right_c2,next_2_right_c3,next_2_right_width_marking,next_2_right_model_degree,next_2_right_quality,next_2_right_lane_type,next_2_right_c1,next_3_left_c0,next_3_left_c2,next_3_left_c3,next_3_left_width_marking,next_3_left_model_degree,next_3_left_quality,next_3_left_lane_type,next_3_left_c1,next_3_right_c0,next_3_right_c2,next_3_right_c3,next_3_right_width_marking,next_3_right_model_degree,next_3_right_quality,next_3_right_lane_type,next_3_right_c1,next_4_left_c0,next_4_left_c2,next_4_left_c3,next_4_left_width_marking,next_4_left_model_degree,next_4_left_quality,next_4_left_lane_type,next_4_left_c1,next_4_right_c0,next_4_right_c2,next_4_right_c3,next_4_right_width_marking,next_4_right_model_degree,next_4_right_quality,next_4_right_lane_type,next_4_right_c1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_mobileye_lane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.type is None:
        self.type = ''
      if self.distance_to_left_lane is None:
        self.distance_to_left_lane = 0.
      if self.distance_to_right_lane is None:
        self.distance_to_right_lane = 0.
      if self.number_of_next_lane is None:
        self.number_of_next_lane = 0
      if self.address is None:
        self.address = ''
      if self.ID is None:
        self.ID = 0
      if self.left_c0 is None:
        self.left_c0 = 0.
      if self.left_c2 is None:
        self.left_c2 = 0.
      if self.left_c3 is None:
        self.left_c3 = 0.
      if self.left_width_marking is None:
        self.left_width_marking = 0.
      if self.left_model_degree is None:
        self.left_model_degree = 0
      if self.left_quality is None:
        self.left_quality = 0
      if self.left_lane_type is None:
        self.left_lane_type = 0
      if self.left_c1 is None:
        self.left_c1 = 0.
      if self.right_c0 is None:
        self.right_c0 = 0.
      if self.right_c2 is None:
        self.right_c2 = 0.
      if self.right_c3 is None:
        self.right_c3 = 0.
      if self.right_width_marking is None:
        self.right_width_marking = 0.
      if self.right_model_degree is None:
        self.right_model_degree = 0
      if self.right_quality is None:
        self.right_quality = 0
      if self.right_lane_type is None:
        self.right_lane_type = 0
      if self.right_c1 is None:
        self.right_c1 = 0.
      if self.next_1_left_c0 is None:
        self.next_1_left_c0 = 0.
      if self.next_1_left_c2 is None:
        self.next_1_left_c2 = 0.
      if self.next_1_left_c3 is None:
        self.next_1_left_c3 = 0.
      if self.next_1_left_width_marking is None:
        self.next_1_left_width_marking = 0.
      if self.next_1_left_model_degree is None:
        self.next_1_left_model_degree = 0
      if self.next_1_left_quality is None:
        self.next_1_left_quality = 0
      if self.next_1_left_lane_type is None:
        self.next_1_left_lane_type = 0
      if self.next_1_left_c1 is None:
        self.next_1_left_c1 = 0.
      if self.next_1_right_c0 is None:
        self.next_1_right_c0 = 0.
      if self.next_1_right_c2 is None:
        self.next_1_right_c2 = 0.
      if self.next_1_right_c3 is None:
        self.next_1_right_c3 = 0.
      if self.next_1_right_width_marking is None:
        self.next_1_right_width_marking = 0.
      if self.next_1_right_model_degree is None:
        self.next_1_right_model_degree = 0
      if self.next_1_right_quality is None:
        self.next_1_right_quality = 0
      if self.next_1_right_lane_type is None:
        self.next_1_right_lane_type = 0
      if self.next_1_right_c1 is None:
        self.next_1_right_c1 = 0.
      if self.next_2_left_c0 is None:
        self.next_2_left_c0 = 0.
      if self.next_2_left_c2 is None:
        self.next_2_left_c2 = 0.
      if self.next_2_left_c3 is None:
        self.next_2_left_c3 = 0.
      if self.next_2_left_width_marking is None:
        self.next_2_left_width_marking = 0.
      if self.next_2_left_model_degree is None:
        self.next_2_left_model_degree = 0
      if self.next_2_left_quality is None:
        self.next_2_left_quality = 0
      if self.next_2_left_lane_type is None:
        self.next_2_left_lane_type = 0
      if self.next_2_left_c1 is None:
        self.next_2_left_c1 = 0.
      if self.next_2_right_c0 is None:
        self.next_2_right_c0 = 0.
      if self.next_2_right_c2 is None:
        self.next_2_right_c2 = 0.
      if self.next_2_right_c3 is None:
        self.next_2_right_c3 = 0.
      if self.next_2_right_width_marking is None:
        self.next_2_right_width_marking = 0.
      if self.next_2_right_model_degree is None:
        self.next_2_right_model_degree = 0
      if self.next_2_right_quality is None:
        self.next_2_right_quality = 0
      if self.next_2_right_lane_type is None:
        self.next_2_right_lane_type = 0
      if self.next_2_right_c1 is None:
        self.next_2_right_c1 = 0.
      if self.next_3_left_c0 is None:
        self.next_3_left_c0 = 0.
      if self.next_3_left_c2 is None:
        self.next_3_left_c2 = 0.
      if self.next_3_left_c3 is None:
        self.next_3_left_c3 = 0.
      if self.next_3_left_width_marking is None:
        self.next_3_left_width_marking = 0.
      if self.next_3_left_model_degree is None:
        self.next_3_left_model_degree = 0
      if self.next_3_left_quality is None:
        self.next_3_left_quality = 0
      if self.next_3_left_lane_type is None:
        self.next_3_left_lane_type = 0
      if self.next_3_left_c1 is None:
        self.next_3_left_c1 = 0.
      if self.next_3_right_c0 is None:
        self.next_3_right_c0 = 0.
      if self.next_3_right_c2 is None:
        self.next_3_right_c2 = 0.
      if self.next_3_right_c3 is None:
        self.next_3_right_c3 = 0.
      if self.next_3_right_width_marking is None:
        self.next_3_right_width_marking = 0.
      if self.next_3_right_model_degree is None:
        self.next_3_right_model_degree = 0
      if self.next_3_right_quality is None:
        self.next_3_right_quality = 0
      if self.next_3_right_lane_type is None:
        self.next_3_right_lane_type = 0
      if self.next_3_right_c1 is None:
        self.next_3_right_c1 = 0.
      if self.next_4_left_c0 is None:
        self.next_4_left_c0 = 0.
      if self.next_4_left_c2 is None:
        self.next_4_left_c2 = 0.
      if self.next_4_left_c3 is None:
        self.next_4_left_c3 = 0.
      if self.next_4_left_width_marking is None:
        self.next_4_left_width_marking = 0.
      if self.next_4_left_model_degree is None:
        self.next_4_left_model_degree = 0
      if self.next_4_left_quality is None:
        self.next_4_left_quality = 0
      if self.next_4_left_lane_type is None:
        self.next_4_left_lane_type = 0
      if self.next_4_left_c1 is None:
        self.next_4_left_c1 = 0.
      if self.next_4_right_c0 is None:
        self.next_4_right_c0 = 0.
      if self.next_4_right_c2 is None:
        self.next_4_right_c2 = 0.
      if self.next_4_right_c3 is None:
        self.next_4_right_c3 = 0.
      if self.next_4_right_width_marking is None:
        self.next_4_right_width_marking = 0.
      if self.next_4_right_model_degree is None:
        self.next_4_right_model_degree = 0
      if self.next_4_right_quality is None:
        self.next_4_right_quality = 0
      if self.next_4_right_lane_type is None:
        self.next_4_right_lane_type = 0
      if self.next_4_right_c1 is None:
        self.next_4_right_c1 = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.type = ''
      self.distance_to_left_lane = 0.
      self.distance_to_right_lane = 0.
      self.number_of_next_lane = 0
      self.address = ''
      self.ID = 0
      self.left_c0 = 0.
      self.left_c2 = 0.
      self.left_c3 = 0.
      self.left_width_marking = 0.
      self.left_model_degree = 0
      self.left_quality = 0
      self.left_lane_type = 0
      self.left_c1 = 0.
      self.right_c0 = 0.
      self.right_c2 = 0.
      self.right_c3 = 0.
      self.right_width_marking = 0.
      self.right_model_degree = 0
      self.right_quality = 0
      self.right_lane_type = 0
      self.right_c1 = 0.
      self.next_1_left_c0 = 0.
      self.next_1_left_c2 = 0.
      self.next_1_left_c3 = 0.
      self.next_1_left_width_marking = 0.
      self.next_1_left_model_degree = 0
      self.next_1_left_quality = 0
      self.next_1_left_lane_type = 0
      self.next_1_left_c1 = 0.
      self.next_1_right_c0 = 0.
      self.next_1_right_c2 = 0.
      self.next_1_right_c3 = 0.
      self.next_1_right_width_marking = 0.
      self.next_1_right_model_degree = 0
      self.next_1_right_quality = 0
      self.next_1_right_lane_type = 0
      self.next_1_right_c1 = 0.
      self.next_2_left_c0 = 0.
      self.next_2_left_c2 = 0.
      self.next_2_left_c3 = 0.
      self.next_2_left_width_marking = 0.
      self.next_2_left_model_degree = 0
      self.next_2_left_quality = 0
      self.next_2_left_lane_type = 0
      self.next_2_left_c1 = 0.
      self.next_2_right_c0 = 0.
      self.next_2_right_c2 = 0.
      self.next_2_right_c3 = 0.
      self.next_2_right_width_marking = 0.
      self.next_2_right_model_degree = 0
      self.next_2_right_quality = 0
      self.next_2_right_lane_type = 0
      self.next_2_right_c1 = 0.
      self.next_3_left_c0 = 0.
      self.next_3_left_c2 = 0.
      self.next_3_left_c3 = 0.
      self.next_3_left_width_marking = 0.
      self.next_3_left_model_degree = 0
      self.next_3_left_quality = 0
      self.next_3_left_lane_type = 0
      self.next_3_left_c1 = 0.
      self.next_3_right_c0 = 0.
      self.next_3_right_c2 = 0.
      self.next_3_right_c3 = 0.
      self.next_3_right_width_marking = 0.
      self.next_3_right_model_degree = 0
      self.next_3_right_quality = 0
      self.next_3_right_lane_type = 0
      self.next_3_right_c1 = 0.
      self.next_4_left_c0 = 0.
      self.next_4_left_c2 = 0.
      self.next_4_left_c3 = 0.
      self.next_4_left_width_marking = 0.
      self.next_4_left_model_degree = 0
      self.next_4_left_quality = 0
      self.next_4_left_lane_type = 0
      self.next_4_left_c1 = 0.
      self.next_4_right_c0 = 0.
      self.next_4_right_c2 = 0.
      self.next_4_right_c3 = 0.
      self.next_4_right_width_marking = 0.
      self.next_4_right_model_degree = 0
      self.next_4_right_quality = 0
      self.next_4_right_lane_type = 0
      self.next_4_right_c1 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2dB().pack(_x.distance_to_left_lane, _x.distance_to_right_lane, _x.number_of_next_lane))
      _x = self.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd().pack(_x.ID, _x.left_c0, _x.left_c2, _x.left_c3, _x.left_width_marking, _x.left_model_degree, _x.left_quality, _x.left_lane_type, _x.left_c1, _x.right_c0, _x.right_c2, _x.right_c3, _x.right_width_marking, _x.right_model_degree, _x.right_quality, _x.right_lane_type, _x.right_c1, _x.next_1_left_c0, _x.next_1_left_c2, _x.next_1_left_c3, _x.next_1_left_width_marking, _x.next_1_left_model_degree, _x.next_1_left_quality, _x.next_1_left_lane_type, _x.next_1_left_c1, _x.next_1_right_c0, _x.next_1_right_c2, _x.next_1_right_c3, _x.next_1_right_width_marking, _x.next_1_right_model_degree, _x.next_1_right_quality, _x.next_1_right_lane_type, _x.next_1_right_c1, _x.next_2_left_c0, _x.next_2_left_c2, _x.next_2_left_c3, _x.next_2_left_width_marking, _x.next_2_left_model_degree, _x.next_2_left_quality, _x.next_2_left_lane_type, _x.next_2_left_c1, _x.next_2_right_c0, _x.next_2_right_c2, _x.next_2_right_c3, _x.next_2_right_width_marking, _x.next_2_right_model_degree, _x.next_2_right_quality, _x.next_2_right_lane_type, _x.next_2_right_c1, _x.next_3_left_c0, _x.next_3_left_c2, _x.next_3_left_c3, _x.next_3_left_width_marking, _x.next_3_left_model_degree, _x.next_3_left_quality, _x.next_3_left_lane_type, _x.next_3_left_c1, _x.next_3_right_c0, _x.next_3_right_c2, _x.next_3_right_c3, _x.next_3_right_width_marking, _x.next_3_right_model_degree, _x.next_3_right_quality, _x.next_3_right_lane_type, _x.next_3_right_c1, _x.next_4_left_c0, _x.next_4_left_c2, _x.next_4_left_c3, _x.next_4_left_width_marking, _x.next_4_left_model_degree, _x.next_4_left_quality, _x.next_4_left_lane_type, _x.next_4_left_c1, _x.next_4_right_c0, _x.next_4_right_c2, _x.next_4_right_c3, _x.next_4_right_width_marking, _x.next_4_right_model_degree, _x.next_4_right_quality, _x.next_4_right_lane_type, _x.next_4_right_c1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.distance_to_left_lane, _x.distance_to_right_lane, _x.number_of_next_lane,) = _get_struct_2dB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.address = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.address = str[start:end]
      _x = self
      start = end
      end += 431
      (_x.ID, _x.left_c0, _x.left_c2, _x.left_c3, _x.left_width_marking, _x.left_model_degree, _x.left_quality, _x.left_lane_type, _x.left_c1, _x.right_c0, _x.right_c2, _x.right_c3, _x.right_width_marking, _x.right_model_degree, _x.right_quality, _x.right_lane_type, _x.right_c1, _x.next_1_left_c0, _x.next_1_left_c2, _x.next_1_left_c3, _x.next_1_left_width_marking, _x.next_1_left_model_degree, _x.next_1_left_quality, _x.next_1_left_lane_type, _x.next_1_left_c1, _x.next_1_right_c0, _x.next_1_right_c2, _x.next_1_right_c3, _x.next_1_right_width_marking, _x.next_1_right_model_degree, _x.next_1_right_quality, _x.next_1_right_lane_type, _x.next_1_right_c1, _x.next_2_left_c0, _x.next_2_left_c2, _x.next_2_left_c3, _x.next_2_left_width_marking, _x.next_2_left_model_degree, _x.next_2_left_quality, _x.next_2_left_lane_type, _x.next_2_left_c1, _x.next_2_right_c0, _x.next_2_right_c2, _x.next_2_right_c3, _x.next_2_right_width_marking, _x.next_2_right_model_degree, _x.next_2_right_quality, _x.next_2_right_lane_type, _x.next_2_right_c1, _x.next_3_left_c0, _x.next_3_left_c2, _x.next_3_left_c3, _x.next_3_left_width_marking, _x.next_3_left_model_degree, _x.next_3_left_quality, _x.next_3_left_lane_type, _x.next_3_left_c1, _x.next_3_right_c0, _x.next_3_right_c2, _x.next_3_right_c3, _x.next_3_right_width_marking, _x.next_3_right_model_degree, _x.next_3_right_quality, _x.next_3_right_lane_type, _x.next_3_right_c1, _x.next_4_left_c0, _x.next_4_left_c2, _x.next_4_left_c3, _x.next_4_left_width_marking, _x.next_4_left_model_degree, _x.next_4_left_quality, _x.next_4_left_lane_type, _x.next_4_left_c1, _x.next_4_right_c0, _x.next_4_right_c2, _x.next_4_right_c3, _x.next_4_right_width_marking, _x.next_4_right_model_degree, _x.next_4_right_quality, _x.next_4_right_lane_type, _x.next_4_right_c1,) = _get_struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2dB().pack(_x.distance_to_left_lane, _x.distance_to_right_lane, _x.number_of_next_lane))
      _x = self.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd().pack(_x.ID, _x.left_c0, _x.left_c2, _x.left_c3, _x.left_width_marking, _x.left_model_degree, _x.left_quality, _x.left_lane_type, _x.left_c1, _x.right_c0, _x.right_c2, _x.right_c3, _x.right_width_marking, _x.right_model_degree, _x.right_quality, _x.right_lane_type, _x.right_c1, _x.next_1_left_c0, _x.next_1_left_c2, _x.next_1_left_c3, _x.next_1_left_width_marking, _x.next_1_left_model_degree, _x.next_1_left_quality, _x.next_1_left_lane_type, _x.next_1_left_c1, _x.next_1_right_c0, _x.next_1_right_c2, _x.next_1_right_c3, _x.next_1_right_width_marking, _x.next_1_right_model_degree, _x.next_1_right_quality, _x.next_1_right_lane_type, _x.next_1_right_c1, _x.next_2_left_c0, _x.next_2_left_c2, _x.next_2_left_c3, _x.next_2_left_width_marking, _x.next_2_left_model_degree, _x.next_2_left_quality, _x.next_2_left_lane_type, _x.next_2_left_c1, _x.next_2_right_c0, _x.next_2_right_c2, _x.next_2_right_c3, _x.next_2_right_width_marking, _x.next_2_right_model_degree, _x.next_2_right_quality, _x.next_2_right_lane_type, _x.next_2_right_c1, _x.next_3_left_c0, _x.next_3_left_c2, _x.next_3_left_c3, _x.next_3_left_width_marking, _x.next_3_left_model_degree, _x.next_3_left_quality, _x.next_3_left_lane_type, _x.next_3_left_c1, _x.next_3_right_c0, _x.next_3_right_c2, _x.next_3_right_c3, _x.next_3_right_width_marking, _x.next_3_right_model_degree, _x.next_3_right_quality, _x.next_3_right_lane_type, _x.next_3_right_c1, _x.next_4_left_c0, _x.next_4_left_c2, _x.next_4_left_c3, _x.next_4_left_width_marking, _x.next_4_left_model_degree, _x.next_4_left_quality, _x.next_4_left_lane_type, _x.next_4_left_c1, _x.next_4_right_c0, _x.next_4_right_c2, _x.next_4_right_c3, _x.next_4_right_width_marking, _x.next_4_right_model_degree, _x.next_4_right_quality, _x.next_4_right_lane_type, _x.next_4_right_c1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.distance_to_left_lane, _x.distance_to_right_lane, _x.number_of_next_lane,) = _get_struct_2dB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.address = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.address = str[start:end]
      _x = self
      start = end
      end += 431
      (_x.ID, _x.left_c0, _x.left_c2, _x.left_c3, _x.left_width_marking, _x.left_model_degree, _x.left_quality, _x.left_lane_type, _x.left_c1, _x.right_c0, _x.right_c2, _x.right_c3, _x.right_width_marking, _x.right_model_degree, _x.right_quality, _x.right_lane_type, _x.right_c1, _x.next_1_left_c0, _x.next_1_left_c2, _x.next_1_left_c3, _x.next_1_left_width_marking, _x.next_1_left_model_degree, _x.next_1_left_quality, _x.next_1_left_lane_type, _x.next_1_left_c1, _x.next_1_right_c0, _x.next_1_right_c2, _x.next_1_right_c3, _x.next_1_right_width_marking, _x.next_1_right_model_degree, _x.next_1_right_quality, _x.next_1_right_lane_type, _x.next_1_right_c1, _x.next_2_left_c0, _x.next_2_left_c2, _x.next_2_left_c3, _x.next_2_left_width_marking, _x.next_2_left_model_degree, _x.next_2_left_quality, _x.next_2_left_lane_type, _x.next_2_left_c1, _x.next_2_right_c0, _x.next_2_right_c2, _x.next_2_right_c3, _x.next_2_right_width_marking, _x.next_2_right_model_degree, _x.next_2_right_quality, _x.next_2_right_lane_type, _x.next_2_right_c1, _x.next_3_left_c0, _x.next_3_left_c2, _x.next_3_left_c3, _x.next_3_left_width_marking, _x.next_3_left_model_degree, _x.next_3_left_quality, _x.next_3_left_lane_type, _x.next_3_left_c1, _x.next_3_right_c0, _x.next_3_right_c2, _x.next_3_right_c3, _x.next_3_right_width_marking, _x.next_3_right_model_degree, _x.next_3_right_quality, _x.next_3_right_lane_type, _x.next_3_right_c1, _x.next_4_left_c0, _x.next_4_left_c2, _x.next_4_left_c3, _x.next_4_left_width_marking, _x.next_4_left_model_degree, _x.next_4_left_quality, _x.next_4_left_lane_type, _x.next_4_left_c1, _x.next_4_right_c0, _x.next_4_right_c2, _x.next_4_right_c3, _x.next_4_right_width_marking, _x.next_4_right_model_degree, _x.next_4_right_quality, _x.next_4_right_lane_type, _x.next_4_right_c1,) = _get_struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2dB = None
def _get_struct_2dB():
    global _struct_2dB
    if _struct_2dB is None:
        _struct_2dB = struct.Struct("<2dB")
    return _struct_2dB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd = None
def _get_struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd():
    global _struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd
    if _struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd is None:
        _struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd = struct.Struct("<B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd")
    return _struct_B4d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3B5d3Bd
