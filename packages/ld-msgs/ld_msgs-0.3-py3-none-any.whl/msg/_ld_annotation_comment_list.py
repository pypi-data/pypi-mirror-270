# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_annotation_comment_list.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import ld_msgs.msg
import std_msgs.msg

class ld_annotation_comment_list(genpy.Message):
  _md5sum = "2b459e5c19175930bae8cd22fea1072a"
  _type = "ld_msgs/ld_annotation_comment_list"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header             header
uint32                      frame_index
ld_annotation_comment[]     comments

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ld_msgs/ld_annotation_comment
std_msgs/Header                 header

################ comment id within a certain frame. Different frames can have comments with identical id.
uint32                          id

################ comment histroy. The most recent, aka the current comment, is represented by the last item.

ld_annotation_comment_item[]    comment_stack

################ region of interest
geometry_msgs/Point[]           roi
string                          roi_type

################ screenshot
ld_image                        screenshot

################ comment metadata
time                            target_topic_timestamp
uint32                          target_topic_currnt_frame
uint32                          target_topic_start_frame
uint32                          target_topic_end_frame
string                          target_topic_name
string                          target_topic_type

################ reserved
string[]                        reserved

================================================================================
MSG: ld_msgs/ld_annotation_comment_item
std_msgs/Header header

string          comment
string          sub_comment
string          additional_details
string          status #  "Pending", "In Progress", "Done", "Ignored"

################ timestamp when this comment item is created
time            comment_update_timestamp

################ [by whom / from which device] is this item created
string          comment_updated_by_user
string          comment_updated_by_ip

################ updated screenshot
ld_image        updated_screenshot

################ reserved
string[]        reserved

================================================================================
MSG: ld_msgs/ld_image
# This message contains an compressed image
# the compressed data contains the data struct header and compressed data
# 

Header header              # header timestamp shoul be acquisition time of the image

uint8 image_format         # format of the image: 0-JPEG 1-MJPEG 2-GRAY8 3-YUV420 4-YUV422

uint8 device_id            # ID for the camera device


uint32 image_width         # image width, that is, number of columns

uint32 image_height        # image height, that is, number of rows


uint8 is_bigendian         # is this data bigendian?

uint32 compressed_size     # the size of the following compressed data

uint8[] compressed_data    # the compressed image data, including the data header and compressed data 


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','frame_index','comments']
  _slot_types = ['std_msgs/Header','uint32','ld_msgs/ld_annotation_comment[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_index,comments

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_annotation_comment_list, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_index is None:
        self.frame_index = 0
      if self.comments is None:
        self.comments = []
    else:
      self.header = std_msgs.msg.Header()
      self.frame_index = 0
      self.comments = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_index
      buff.write(_get_struct_I().pack(_x))
      length = len(self.comments)
      buff.write(_struct_I.pack(length))
      for val1 in self.comments:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.comment_stack)
        buff.write(_struct_I.pack(length))
        for val2 in val1.comment_stack:
          _v3 = val2.header
          _x = _v3.seq
          buff.write(_get_struct_I().pack(_x))
          _v4 = _v3.stamp
          _x = _v4
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v3.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.comment
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.sub_comment
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.additional_details
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.status
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v5 = val2.comment_update_timestamp
          _x = _v5
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = val2.comment_updated_by_user
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.comment_updated_by_ip
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v6 = val2.updated_screenshot
          _v7 = _v6.header
          _x = _v7.seq
          buff.write(_get_struct_I().pack(_x))
          _v8 = _v7.stamp
          _x = _v8
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v7.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v6
          buff.write(_get_struct_2B2IBI().pack(_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size))
          _x = _v6.compressed_data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
          else:
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.reserved)
          buff.write(_struct_I.pack(length))
          for val3 in val2.reserved:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(val1.roi)
        buff.write(_struct_I.pack(length))
        for val2 in val1.roi:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.roi_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v9 = val1.screenshot
        _v10 = _v9.header
        _x = _v10.seq
        buff.write(_get_struct_I().pack(_x))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v9
        buff.write(_get_struct_2B2IBI().pack(_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size))
        _x = _v9.compressed_data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v12 = val1.target_topic_timestamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_3I().pack(_x.target_topic_currnt_frame, _x.target_topic_start_frame, _x.target_topic_end_frame))
        _x = val1.target_topic_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.target_topic_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        for val2 in val1.reserved:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.comments is None:
        self.comments = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_index,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.comments = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_annotation_comment()
        _v13 = val1.header
        start = end
        end += 4
        (_v13.seq,) = _get_struct_I().unpack(str[start:end])
        _v14 = _v13.stamp
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v13.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.comment_stack = []
        for i in range(0, length):
          val2 = ld_msgs.msg.ld_annotation_comment_item()
          _v15 = val2.header
          start = end
          end += 4
          (_v15.seq,) = _get_struct_I().unpack(str[start:end])
          _v16 = _v15.stamp
          _x = _v16
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v15.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v15.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comment = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comment = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.sub_comment = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.sub_comment = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.additional_details = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.additional_details = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.status = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.status = str[start:end]
          _v17 = val2.comment_update_timestamp
          _x = _v17
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comment_updated_by_user = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comment_updated_by_user = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comment_updated_by_ip = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comment_updated_by_ip = str[start:end]
          _v18 = val2.updated_screenshot
          _v19 = _v18.header
          start = end
          end += 4
          (_v19.seq,) = _get_struct_I().unpack(str[start:end])
          _v20 = _v19.stamp
          _x = _v20
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v19.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v19.frame_id = str[start:end]
          _x = _v18
          start = end
          end += 15
          (_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          _v18.compressed_data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.reserved = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.reserved.append(val3)
          val1.comment_stack.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.roi = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.roi.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.roi_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.roi_type = str[start:end]
        _v21 = val1.screenshot
        _v22 = _v21.header
        start = end
        end += 4
        (_v22.seq,) = _get_struct_I().unpack(str[start:end])
        _v23 = _v22.stamp
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v22.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v22.frame_id = str[start:end]
        _x = _v21
        start = end
        end += 15
        (_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v21.compressed_data = str[start:end]
        _v24 = val1.target_topic_timestamp
        _x = _v24
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.target_topic_currnt_frame, _x.target_topic_start_frame, _x.target_topic_end_frame,) = _get_struct_3I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target_topic_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.target_topic_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target_topic_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.target_topic_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.reserved = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.reserved.append(val2)
        self.comments.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frame_index
      buff.write(_get_struct_I().pack(_x))
      length = len(self.comments)
      buff.write(_struct_I.pack(length))
      for val1 in self.comments:
        _v25 = val1.header
        _x = _v25.seq
        buff.write(_get_struct_I().pack(_x))
        _v26 = _v25.stamp
        _x = _v26
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v25.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.comment_stack)
        buff.write(_struct_I.pack(length))
        for val2 in val1.comment_stack:
          _v27 = val2.header
          _x = _v27.seq
          buff.write(_get_struct_I().pack(_x))
          _v28 = _v27.stamp
          _x = _v28
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v27.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.comment
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.sub_comment
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.additional_details
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.status
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v29 = val2.comment_update_timestamp
          _x = _v29
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = val2.comment_updated_by_user
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.comment_updated_by_ip
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v30 = val2.updated_screenshot
          _v31 = _v30.header
          _x = _v31.seq
          buff.write(_get_struct_I().pack(_x))
          _v32 = _v31.stamp
          _x = _v32
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v31.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v30
          buff.write(_get_struct_2B2IBI().pack(_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size))
          _x = _v30.compressed_data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
          else:
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.reserved)
          buff.write(_struct_I.pack(length))
          for val3 in val2.reserved:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(val1.roi)
        buff.write(_struct_I.pack(length))
        for val2 in val1.roi:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.roi_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v33 = val1.screenshot
        _v34 = _v33.header
        _x = _v34.seq
        buff.write(_get_struct_I().pack(_x))
        _v35 = _v34.stamp
        _x = _v35
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v34.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v33
        buff.write(_get_struct_2B2IBI().pack(_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size))
        _x = _v33.compressed_data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v36 = val1.target_topic_timestamp
        _x = _v36
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_3I().pack(_x.target_topic_currnt_frame, _x.target_topic_start_frame, _x.target_topic_end_frame))
        _x = val1.target_topic_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.target_topic_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        for val2 in val1.reserved:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.comments is None:
        self.comments = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.frame_index,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.comments = []
      for i in range(0, length):
        val1 = ld_msgs.msg.ld_annotation_comment()
        _v37 = val1.header
        start = end
        end += 4
        (_v37.seq,) = _get_struct_I().unpack(str[start:end])
        _v38 = _v37.stamp
        _x = _v38
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v37.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.comment_stack = []
        for i in range(0, length):
          val2 = ld_msgs.msg.ld_annotation_comment_item()
          _v39 = val2.header
          start = end
          end += 4
          (_v39.seq,) = _get_struct_I().unpack(str[start:end])
          _v40 = _v39.stamp
          _x = _v40
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v39.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v39.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comment = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comment = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.sub_comment = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.sub_comment = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.additional_details = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.additional_details = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.status = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.status = str[start:end]
          _v41 = val2.comment_update_timestamp
          _x = _v41
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comment_updated_by_user = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comment_updated_by_user = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comment_updated_by_ip = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comment_updated_by_ip = str[start:end]
          _v42 = val2.updated_screenshot
          _v43 = _v42.header
          start = end
          end += 4
          (_v43.seq,) = _get_struct_I().unpack(str[start:end])
          _v44 = _v43.stamp
          _x = _v44
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v43.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v43.frame_id = str[start:end]
          _x = _v42
          start = end
          end += 15
          (_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          _v42.compressed_data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.reserved = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.reserved.append(val3)
          val1.comment_stack.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.roi = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.roi.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.roi_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.roi_type = str[start:end]
        _v45 = val1.screenshot
        _v46 = _v45.header
        start = end
        end += 4
        (_v46.seq,) = _get_struct_I().unpack(str[start:end])
        _v47 = _v46.stamp
        _x = _v47
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v46.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v46.frame_id = str[start:end]
        _x = _v45
        start = end
        end += 15
        (_x.image_format, _x.device_id, _x.image_width, _x.image_height, _x.is_bigendian, _x.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v45.compressed_data = str[start:end]
        _v48 = val1.target_topic_timestamp
        _x = _v48
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.target_topic_currnt_frame, _x.target_topic_start_frame, _x.target_topic_end_frame,) = _get_struct_3I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target_topic_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.target_topic_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target_topic_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.target_topic_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.reserved = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.reserved.append(val2)
        self.comments.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2IBI = None
def _get_struct_2B2IBI():
    global _struct_2B2IBI
    if _struct_2B2IBI is None:
        _struct_2B2IBI = struct.Struct("<2B2IBI")
    return _struct_2B2IBI
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
