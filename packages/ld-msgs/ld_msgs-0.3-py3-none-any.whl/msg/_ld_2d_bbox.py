# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_2d_bbox.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ld_2d_bbox(genpy.Message):
  _md5sum = "170e3b9a74046fcfc90345a76f9fd5ea"
  _type = "ld_msgs/ld_2d_bbox"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 id
uint32 id_3d
string category
bool iscrowd
bool isoccluded
geometry_msgs/Point[] bbox
geometry_msgs/Point[] bbox_3d
uint32[] segmentation_rle
float32 area

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','id_3d','category','iscrowd','isoccluded','bbox','bbox_3d','segmentation_rle','area']
  _slot_types = ['uint32','uint32','string','bool','bool','geometry_msgs/Point[]','geometry_msgs/Point[]','uint32[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,id_3d,category,iscrowd,isoccluded,bbox,bbox_3d,segmentation_rle,area

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_2d_bbox, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.id_3d is None:
        self.id_3d = 0
      if self.category is None:
        self.category = ''
      if self.iscrowd is None:
        self.iscrowd = False
      if self.isoccluded is None:
        self.isoccluded = False
      if self.bbox is None:
        self.bbox = []
      if self.bbox_3d is None:
        self.bbox_3d = []
      if self.segmentation_rle is None:
        self.segmentation_rle = []
      if self.area is None:
        self.area = 0.
    else:
      self.id = 0
      self.id_3d = 0
      self.category = ''
      self.iscrowd = False
      self.isoccluded = False
      self.bbox = []
      self.bbox_3d = []
      self.segmentation_rle = []
      self.area = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.id, _x.id_3d))
      _x = self.category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.iscrowd, _x.isoccluded))
      length = len(self.bbox)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bbox_3d)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox_3d:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.segmentation_rle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.segmentation_rle))
      _x = self.area
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bbox is None:
        self.bbox = None
      if self.bbox_3d is None:
        self.bbox_3d = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.id, _x.id_3d,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.category = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.category = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.iscrowd, _x.isoccluded,) = _get_struct_2B().unpack(str[start:end])
      self.iscrowd = bool(self.iscrowd)
      self.isoccluded = bool(self.isoccluded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bbox.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox_3d = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bbox_3d.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.segmentation_rle = s.unpack(str[start:end])
      start = end
      end += 4
      (self.area,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.id, _x.id_3d))
      _x = self.category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.iscrowd, _x.isoccluded))
      length = len(self.bbox)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bbox_3d)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox_3d:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.segmentation_rle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.segmentation_rle.tostring())
      _x = self.area
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bbox is None:
        self.bbox = None
      if self.bbox_3d is None:
        self.bbox_3d = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.id, _x.id_3d,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.category = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.category = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.iscrowd, _x.isoccluded,) = _get_struct_2B().unpack(str[start:end])
      self.iscrowd = bool(self.iscrowd)
      self.isoccluded = bool(self.isoccluded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bbox.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox_3d = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bbox_3d.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.segmentation_rle = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (self.area,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
