# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/image_tagging.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class image_tagging(genpy.Message):
  _md5sum = "7e9f8b72161219581fb73c5ee67ad5b9"
  _type = "ld_msgs/image_tagging"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header                 header                    # msg header, the header inlcude timestamp for the current frame                             

time                   GT_CAM_TS                 # timestamp for the current camera image

uint8                  GT_HomogenousBlk          # presence of Homogenous Blockage, 1 for true, 0 for false

uint8                  GT_HomoGENOUSBlk_lde      # flag to indicate that if the corresponding signal is modified by LDE, 1 for modified by LDE, 0 for not modified by LDE, 2 for not applied

uint8                  GT_LocalBlk_TX            # boolean information about the presence of local blockage, 1 for true, 0 for false

uint8                  GT_LocalBlk_TX_lde        # flag to indicate that if the corresponding signal is modified by LDE, 1 for modified by LDE, 0 for not modified by LDE, 2 for not applied

uint8                  GT_LocalBlk_RX            # boolean information about the presence of local blockage, 1 for true, 0 for false

uint8                  GT_LocalBlk_RX_lde        # flag to indicate that if the corresponding signal is modified by LDE, 1 for modified by LDE, 0 for not modified by LDE, 2 for not applied

uint8                  GT_Washing                # boolean information about the presence of water and foam, 1 for true, 0 for false

uint8                  GT_Washing_lde            # flag to indicate that if the corresponding signal is modified by LDE, 1 for modified by LDE, 0 for not modified by LDE, 2 for not applied

uint8                  Validity                  # This flag serves to invalidate the data for this timestamp, 1 for true, 0 for false

uint8                  GT_Validity_lde           # flag to indicate that if the corresponding signal is modified by LDE, 1 for modified by LDE, 0 for not modified by LDE, 2 for not applied

string                 GT_ImageName              # image name of this timestamp

uint8                  GT_ImageName_lde          # flag to indicate that if the corresponding signal is modified by LDE, 1 for modified by LDE, 0 for not modified by LDE, 2 for not applied

string                 GT_Splitfile_ID           # idetification number of the splitfile, 6 digit-string

uint8                  GT_Splitfile_ID_lde       # flag to indicate that if the corresponding signal is modified by LDE, 1 for modified by LDE, 0 for not modified by LDE, 2 for not applied

time                   last_corrected_ts         # timestamps which indicates the timestamp of the last edited action

bool[]                 spaceholder_bool          # reserved for bool infomation

string[]               spaceholder_string        # reserved for string information

uint16[]               spaceholder_uint16        # reserved for uint16 information

uint8[]                spaceholder_uint8         # reserved for uint8 information
 
float64[]              spaceholder_float64       # reserved for float64 information 





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','GT_CAM_TS','GT_HomogenousBlk','GT_HomoGENOUSBlk_lde','GT_LocalBlk_TX','GT_LocalBlk_TX_lde','GT_LocalBlk_RX','GT_LocalBlk_RX_lde','GT_Washing','GT_Washing_lde','Validity','GT_Validity_lde','GT_ImageName','GT_ImageName_lde','GT_Splitfile_ID','GT_Splitfile_ID_lde','last_corrected_ts','spaceholder_bool','spaceholder_string','spaceholder_uint16','spaceholder_uint8','spaceholder_float64']
  _slot_types = ['std_msgs/Header','time','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','string','uint8','string','uint8','time','bool[]','string[]','uint16[]','uint8[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,GT_CAM_TS,GT_HomogenousBlk,GT_HomoGENOUSBlk_lde,GT_LocalBlk_TX,GT_LocalBlk_TX_lde,GT_LocalBlk_RX,GT_LocalBlk_RX_lde,GT_Washing,GT_Washing_lde,Validity,GT_Validity_lde,GT_ImageName,GT_ImageName_lde,GT_Splitfile_ID,GT_Splitfile_ID_lde,last_corrected_ts,spaceholder_bool,spaceholder_string,spaceholder_uint16,spaceholder_uint8,spaceholder_float64

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(image_tagging, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GT_CAM_TS is None:
        self.GT_CAM_TS = genpy.Time()
      if self.GT_HomogenousBlk is None:
        self.GT_HomogenousBlk = 0
      if self.GT_HomoGENOUSBlk_lde is None:
        self.GT_HomoGENOUSBlk_lde = 0
      if self.GT_LocalBlk_TX is None:
        self.GT_LocalBlk_TX = 0
      if self.GT_LocalBlk_TX_lde is None:
        self.GT_LocalBlk_TX_lde = 0
      if self.GT_LocalBlk_RX is None:
        self.GT_LocalBlk_RX = 0
      if self.GT_LocalBlk_RX_lde is None:
        self.GT_LocalBlk_RX_lde = 0
      if self.GT_Washing is None:
        self.GT_Washing = 0
      if self.GT_Washing_lde is None:
        self.GT_Washing_lde = 0
      if self.Validity is None:
        self.Validity = 0
      if self.GT_Validity_lde is None:
        self.GT_Validity_lde = 0
      if self.GT_ImageName is None:
        self.GT_ImageName = ''
      if self.GT_ImageName_lde is None:
        self.GT_ImageName_lde = 0
      if self.GT_Splitfile_ID is None:
        self.GT_Splitfile_ID = ''
      if self.GT_Splitfile_ID_lde is None:
        self.GT_Splitfile_ID_lde = 0
      if self.last_corrected_ts is None:
        self.last_corrected_ts = genpy.Time()
      if self.spaceholder_bool is None:
        self.spaceholder_bool = []
      if self.spaceholder_string is None:
        self.spaceholder_string = []
      if self.spaceholder_uint16 is None:
        self.spaceholder_uint16 = []
      if self.spaceholder_uint8 is None:
        self.spaceholder_uint8 = b''
      if self.spaceholder_float64 is None:
        self.spaceholder_float64 = []
    else:
      self.header = std_msgs.msg.Header()
      self.GT_CAM_TS = genpy.Time()
      self.GT_HomogenousBlk = 0
      self.GT_HomoGENOUSBlk_lde = 0
      self.GT_LocalBlk_TX = 0
      self.GT_LocalBlk_TX_lde = 0
      self.GT_LocalBlk_RX = 0
      self.GT_LocalBlk_RX_lde = 0
      self.GT_Washing = 0
      self.GT_Washing_lde = 0
      self.Validity = 0
      self.GT_Validity_lde = 0
      self.GT_ImageName = ''
      self.GT_ImageName_lde = 0
      self.GT_Splitfile_ID = ''
      self.GT_Splitfile_ID_lde = 0
      self.last_corrected_ts = genpy.Time()
      self.spaceholder_bool = []
      self.spaceholder_string = []
      self.spaceholder_uint16 = []
      self.spaceholder_uint8 = b''
      self.spaceholder_float64 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I10B().pack(_x.GT_CAM_TS.secs, _x.GT_CAM_TS.nsecs, _x.GT_HomogenousBlk, _x.GT_HomoGENOUSBlk_lde, _x.GT_LocalBlk_TX, _x.GT_LocalBlk_TX_lde, _x.GT_LocalBlk_RX, _x.GT_LocalBlk_RX_lde, _x.GT_Washing, _x.GT_Washing_lde, _x.Validity, _x.GT_Validity_lde))
      _x = self.GT_ImageName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.GT_ImageName_lde
      buff.write(_get_struct_B().pack(_x))
      _x = self.GT_Splitfile_ID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.GT_Splitfile_ID_lde, _x.last_corrected_ts.secs, _x.last_corrected_ts.nsecs))
      length = len(self.spaceholder_bool)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.spaceholder_bool))
      length = len(self.spaceholder_string)
      buff.write(_struct_I.pack(length))
      for val1 in self.spaceholder_string:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.spaceholder_uint16)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.spaceholder_uint16))
      _x = self.spaceholder_uint8
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.spaceholder_float64)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.spaceholder_float64))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GT_CAM_TS is None:
        self.GT_CAM_TS = genpy.Time()
      if self.last_corrected_ts is None:
        self.last_corrected_ts = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.GT_CAM_TS.secs, _x.GT_CAM_TS.nsecs, _x.GT_HomogenousBlk, _x.GT_HomoGENOUSBlk_lde, _x.GT_LocalBlk_TX, _x.GT_LocalBlk_TX_lde, _x.GT_LocalBlk_RX, _x.GT_LocalBlk_RX_lde, _x.GT_Washing, _x.GT_Washing_lde, _x.Validity, _x.GT_Validity_lde,) = _get_struct_2I10B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GT_ImageName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GT_ImageName = str[start:end]
      start = end
      end += 1
      (self.GT_ImageName_lde,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GT_Splitfile_ID = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GT_Splitfile_ID = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.GT_Splitfile_ID_lde, _x.last_corrected_ts.secs, _x.last_corrected_ts.nsecs,) = _get_struct_B2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.spaceholder_bool = s.unpack(str[start:end])
      self.spaceholder_bool = list(map(bool, self.spaceholder_bool))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spaceholder_string = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.spaceholder_string.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.spaceholder_uint16 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.spaceholder_uint8 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.spaceholder_float64 = s.unpack(str[start:end])
      self.GT_CAM_TS.canon()
      self.last_corrected_ts.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I10B().pack(_x.GT_CAM_TS.secs, _x.GT_CAM_TS.nsecs, _x.GT_HomogenousBlk, _x.GT_HomoGENOUSBlk_lde, _x.GT_LocalBlk_TX, _x.GT_LocalBlk_TX_lde, _x.GT_LocalBlk_RX, _x.GT_LocalBlk_RX_lde, _x.GT_Washing, _x.GT_Washing_lde, _x.Validity, _x.GT_Validity_lde))
      _x = self.GT_ImageName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.GT_ImageName_lde
      buff.write(_get_struct_B().pack(_x))
      _x = self.GT_Splitfile_ID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.GT_Splitfile_ID_lde, _x.last_corrected_ts.secs, _x.last_corrected_ts.nsecs))
      length = len(self.spaceholder_bool)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.spaceholder_bool.tostring())
      length = len(self.spaceholder_string)
      buff.write(_struct_I.pack(length))
      for val1 in self.spaceholder_string:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.spaceholder_uint16)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.spaceholder_uint16.tostring())
      _x = self.spaceholder_uint8
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.spaceholder_float64)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.spaceholder_float64.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GT_CAM_TS is None:
        self.GT_CAM_TS = genpy.Time()
      if self.last_corrected_ts is None:
        self.last_corrected_ts = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.GT_CAM_TS.secs, _x.GT_CAM_TS.nsecs, _x.GT_HomogenousBlk, _x.GT_HomoGENOUSBlk_lde, _x.GT_LocalBlk_TX, _x.GT_LocalBlk_TX_lde, _x.GT_LocalBlk_RX, _x.GT_LocalBlk_RX_lde, _x.GT_Washing, _x.GT_Washing_lde, _x.Validity, _x.GT_Validity_lde,) = _get_struct_2I10B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GT_ImageName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GT_ImageName = str[start:end]
      start = end
      end += 1
      (self.GT_ImageName_lde,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GT_Splitfile_ID = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GT_Splitfile_ID = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.GT_Splitfile_ID_lde, _x.last_corrected_ts.secs, _x.last_corrected_ts.nsecs,) = _get_struct_B2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.spaceholder_bool = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.spaceholder_bool = list(map(bool, self.spaceholder_bool))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spaceholder_string = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.spaceholder_string.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.spaceholder_uint16 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.spaceholder_uint8 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.spaceholder_float64 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      self.GT_CAM_TS.canon()
      self.last_corrected_ts.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I10B = None
def _get_struct_2I10B():
    global _struct_2I10B
    if _struct_2I10B is None:
        _struct_2I10B = struct.Struct("<2I10B")
    return _struct_2I10B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
