# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ld_msgs/ld_annotation_comment_item.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import ld_msgs.msg
import std_msgs.msg

class ld_annotation_comment_item(genpy.Message):
  _md5sum = "914ddfeb6f04d324767df0770cbc44df"
  _type = "ld_msgs/ld_annotation_comment_item"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

string          comment
string          sub_comment
string          additional_details
string          status #  "Pending", "In Progress", "Done", "Ignored"

################ timestamp when this comment item is created
time            comment_update_timestamp

################ [by whom / from which device] is this item created
string          comment_updated_by_user
string          comment_updated_by_ip

################ updated screenshot
ld_image        updated_screenshot

################ reserved
string[]        reserved

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ld_msgs/ld_image
# This message contains an compressed image
# the compressed data contains the data struct header and compressed data
# 

Header header              # header timestamp shoul be acquisition time of the image

uint8 image_format         # format of the image: 0-JPEG 1-MJPEG 2-GRAY8 3-YUV420 4-YUV422

uint8 device_id            # ID for the camera device


uint32 image_width         # image width, that is, number of columns

uint32 image_height        # image height, that is, number of rows


uint8 is_bigendian         # is this data bigendian?

uint32 compressed_size     # the size of the following compressed data

uint8[] compressed_data    # the compressed image data, including the data header and compressed data 

"""
  __slots__ = ['header','comment','sub_comment','additional_details','status','comment_update_timestamp','comment_updated_by_user','comment_updated_by_ip','updated_screenshot','reserved']
  _slot_types = ['std_msgs/Header','string','string','string','string','time','string','string','ld_msgs/ld_image','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,comment,sub_comment,additional_details,status,comment_update_timestamp,comment_updated_by_user,comment_updated_by_ip,updated_screenshot,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ld_annotation_comment_item, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.comment is None:
        self.comment = ''
      if self.sub_comment is None:
        self.sub_comment = ''
      if self.additional_details is None:
        self.additional_details = ''
      if self.status is None:
        self.status = ''
      if self.comment_update_timestamp is None:
        self.comment_update_timestamp = genpy.Time()
      if self.comment_updated_by_user is None:
        self.comment_updated_by_user = ''
      if self.comment_updated_by_ip is None:
        self.comment_updated_by_ip = ''
      if self.updated_screenshot is None:
        self.updated_screenshot = ld_msgs.msg.ld_image()
      if self.reserved is None:
        self.reserved = []
    else:
      self.header = std_msgs.msg.Header()
      self.comment = ''
      self.sub_comment = ''
      self.additional_details = ''
      self.status = ''
      self.comment_update_timestamp = genpy.Time()
      self.comment_updated_by_user = ''
      self.comment_updated_by_ip = ''
      self.updated_screenshot = ld_msgs.msg.ld_image()
      self.reserved = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.comment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sub_comment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.additional_details
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.comment_update_timestamp.secs, _x.comment_update_timestamp.nsecs))
      _x = self.comment_updated_by_user
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.comment_updated_by_ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.updated_screenshot.header.seq, _x.updated_screenshot.header.stamp.secs, _x.updated_screenshot.header.stamp.nsecs))
      _x = self.updated_screenshot.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2IBI().pack(_x.updated_screenshot.image_format, _x.updated_screenshot.device_id, _x.updated_screenshot.image_width, _x.updated_screenshot.image_height, _x.updated_screenshot.is_bigendian, _x.updated_screenshot.compressed_size))
      _x = self.updated_screenshot.compressed_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      for val1 in self.reserved:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.comment_update_timestamp is None:
        self.comment_update_timestamp = genpy.Time()
      if self.updated_screenshot is None:
        self.updated_screenshot = ld_msgs.msg.ld_image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comment = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sub_comment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sub_comment = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.additional_details = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.additional_details = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.comment_update_timestamp.secs, _x.comment_update_timestamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment_updated_by_user = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comment_updated_by_user = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment_updated_by_ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comment_updated_by_ip = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.updated_screenshot.header.seq, _x.updated_screenshot.header.stamp.secs, _x.updated_screenshot.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.updated_screenshot.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.updated_screenshot.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.updated_screenshot.image_format, _x.updated_screenshot.device_id, _x.updated_screenshot.image_width, _x.updated_screenshot.image_height, _x.updated_screenshot.is_bigendian, _x.updated_screenshot.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.updated_screenshot.compressed_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reserved = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.reserved.append(val1)
      self.comment_update_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.comment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sub_comment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.additional_details
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.comment_update_timestamp.secs, _x.comment_update_timestamp.nsecs))
      _x = self.comment_updated_by_user
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.comment_updated_by_ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.updated_screenshot.header.seq, _x.updated_screenshot.header.stamp.secs, _x.updated_screenshot.header.stamp.nsecs))
      _x = self.updated_screenshot.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2IBI().pack(_x.updated_screenshot.image_format, _x.updated_screenshot.device_id, _x.updated_screenshot.image_width, _x.updated_screenshot.image_height, _x.updated_screenshot.is_bigendian, _x.updated_screenshot.compressed_size))
      _x = self.updated_screenshot.compressed_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      for val1 in self.reserved:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.comment_update_timestamp is None:
        self.comment_update_timestamp = genpy.Time()
      if self.updated_screenshot is None:
        self.updated_screenshot = ld_msgs.msg.ld_image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comment = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sub_comment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sub_comment = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.additional_details = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.additional_details = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.comment_update_timestamp.secs, _x.comment_update_timestamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment_updated_by_user = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comment_updated_by_user = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment_updated_by_ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comment_updated_by_ip = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.updated_screenshot.header.seq, _x.updated_screenshot.header.stamp.secs, _x.updated_screenshot.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.updated_screenshot.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.updated_screenshot.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.updated_screenshot.image_format, _x.updated_screenshot.device_id, _x.updated_screenshot.image_width, _x.updated_screenshot.image_height, _x.updated_screenshot.is_bigendian, _x.updated_screenshot.compressed_size,) = _get_struct_2B2IBI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.updated_screenshot.compressed_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reserved = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.reserved.append(val1)
      self.comment_update_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2IBI = None
def _get_struct_2B2IBI():
    global _struct_2B2IBI
    if _struct_2B2IBI is None:
        _struct_2B2IBI = struct.Struct("<2B2IBI")
    return _struct_2B2IBI
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
