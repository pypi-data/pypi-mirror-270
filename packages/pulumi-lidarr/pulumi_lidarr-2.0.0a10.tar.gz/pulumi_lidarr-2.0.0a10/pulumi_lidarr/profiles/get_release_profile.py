# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetReleaseProfileResult',
    'AwaitableGetReleaseProfileResult',
    'get_release_profile',
    'get_release_profile_output',
]

@pulumi.output_type
class GetReleaseProfileResult:
    """
    A collection of values returned by getReleaseProfile.
    """
    def __init__(__self__, enabled=None, id=None, ignoreds=None, indexer_id=None, requireds=None, tags=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if ignoreds and not isinstance(ignoreds, list):
            raise TypeError("Expected argument 'ignoreds' to be a list")
        pulumi.set(__self__, "ignoreds", ignoreds)
        if indexer_id and not isinstance(indexer_id, int):
            raise TypeError("Expected argument 'indexer_id' to be a int")
        pulumi.set(__self__, "indexer_id", indexer_id)
        if requireds and not isinstance(requireds, list):
            raise TypeError("Expected argument 'requireds' to be a list")
        pulumi.set(__self__, "requireds", requireds)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Release Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ignoreds(self) -> Sequence[str]:
        """
        Ignored terms. At least one of `required` and `ignored` must be set.
        """
        return pulumi.get(self, "ignoreds")

    @property
    @pulumi.getter(name="indexerId")
    def indexer_id(self) -> int:
        """
        Indexer ID.
        """
        return pulumi.get(self, "indexer_id")

    @property
    @pulumi.getter
    def requireds(self) -> Sequence[str]:
        """
        Required terms. At least one of `required` and `ignored` must be set.
        """
        return pulumi.get(self, "requireds")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetReleaseProfileResult(GetReleaseProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReleaseProfileResult(
            enabled=self.enabled,
            id=self.id,
            ignoreds=self.ignoreds,
            indexer_id=self.indexer_id,
            requireds=self.requireds,
            tags=self.tags)


def get_release_profile(id: Optional[int] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReleaseProfileResult:
    """
    <!-- subcategory:Profiles -->Single Release Profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.Profiles.get_release_profile(id=1)
    ```


    :param int id: Release Profile ID.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('lidarr:Profiles/getReleaseProfile:getReleaseProfile', __args__, opts=opts, typ=GetReleaseProfileResult).value

    return AwaitableGetReleaseProfileResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        ignoreds=pulumi.get(__ret__, 'ignoreds'),
        indexer_id=pulumi.get(__ret__, 'indexer_id'),
        requireds=pulumi.get(__ret__, 'requireds'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_release_profile)
def get_release_profile_output(id: Optional[pulumi.Input[int]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReleaseProfileResult]:
    """
    <!-- subcategory:Profiles -->Single Release Profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.Profiles.get_release_profile(id=1)
    ```


    :param int id: Release Profile ID.
    """
    ...
