# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ReleaseProfileArgs', 'ReleaseProfile']

@pulumi.input_type
class ReleaseProfileArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 indexer_id: Optional[pulumi.Input[int]] = None,
                 requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a ReleaseProfile resource.
        :param pulumi.Input[bool] enabled: Enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignoreds: Ignored terms. At least one of `required` and `ignored` must be set.
        :param pulumi.Input[int] indexer_id: Indexer ID. Default to all.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requireds: Required terms. At least one of `required` and `ignored` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ignoreds is not None:
            pulumi.set(__self__, "ignoreds", ignoreds)
        if indexer_id is not None:
            pulumi.set(__self__, "indexer_id", indexer_id)
        if requireds is not None:
            pulumi.set(__self__, "requireds", requireds)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ignoreds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ignored terms. At least one of `required` and `ignored` must be set.
        """
        return pulumi.get(self, "ignoreds")

    @ignoreds.setter
    def ignoreds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignoreds", value)

    @property
    @pulumi.getter(name="indexerId")
    def indexer_id(self) -> Optional[pulumi.Input[int]]:
        """
        Indexer ID. Default to all.
        """
        return pulumi.get(self, "indexer_id")

    @indexer_id.setter
    def indexer_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "indexer_id", value)

    @property
    @pulumi.getter
    def requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required terms. At least one of `required` and `ignored` must be set.
        """
        return pulumi.get(self, "requireds")

    @requireds.setter
    def requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requireds", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ReleaseProfileState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 indexer_id: Optional[pulumi.Input[int]] = None,
                 requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering ReleaseProfile resources.
        :param pulumi.Input[bool] enabled: Enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignoreds: Ignored terms. At least one of `required` and `ignored` must be set.
        :param pulumi.Input[int] indexer_id: Indexer ID. Default to all.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requireds: Required terms. At least one of `required` and `ignored` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ignoreds is not None:
            pulumi.set(__self__, "ignoreds", ignoreds)
        if indexer_id is not None:
            pulumi.set(__self__, "indexer_id", indexer_id)
        if requireds is not None:
            pulumi.set(__self__, "requireds", requireds)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ignoreds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ignored terms. At least one of `required` and `ignored` must be set.
        """
        return pulumi.get(self, "ignoreds")

    @ignoreds.setter
    def ignoreds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignoreds", value)

    @property
    @pulumi.getter(name="indexerId")
    def indexer_id(self) -> Optional[pulumi.Input[int]]:
        """
        Indexer ID. Default to all.
        """
        return pulumi.get(self, "indexer_id")

    @indexer_id.setter
    def indexer_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "indexer_id", value)

    @property
    @pulumi.getter
    def requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required terms. At least one of `required` and `ignored` must be set.
        """
        return pulumi.get(self, "requireds")

    @requireds.setter
    def requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requireds", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


class ReleaseProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 indexer_id: Optional[pulumi.Input[int]] = None,
                 requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        <!-- subcategory:Profiles -->Release Profile resource.
        For more information refer to [Release Profiles](https://wiki.servarr.com/lidarr/settings#release-profiles) documentation.

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import lidarr:Profiles/releaseProfile:ReleaseProfile example 10
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignoreds: Ignored terms. At least one of `required` and `ignored` must be set.
        :param pulumi.Input[int] indexer_id: Indexer ID. Default to all.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requireds: Required terms. At least one of `required` and `ignored` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ReleaseProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Profiles -->Release Profile resource.
        For more information refer to [Release Profiles](https://wiki.servarr.com/lidarr/settings#release-profiles) documentation.

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import lidarr:Profiles/releaseProfile:ReleaseProfile example 10
        ```

        :param str resource_name: The name of the resource.
        :param ReleaseProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReleaseProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 indexer_id: Optional[pulumi.Input[int]] = None,
                 requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReleaseProfileArgs.__new__(ReleaseProfileArgs)

            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["ignoreds"] = ignoreds
            __props__.__dict__["indexer_id"] = indexer_id
            __props__.__dict__["requireds"] = requireds
            __props__.__dict__["tags"] = tags
        super(ReleaseProfile, __self__).__init__(
            'lidarr:Profiles/releaseProfile:ReleaseProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            indexer_id: Optional[pulumi.Input[int]] = None,
            requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'ReleaseProfile':
        """
        Get an existing ReleaseProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignoreds: Ignored terms. At least one of `required` and `ignored` must be set.
        :param pulumi.Input[int] indexer_id: Indexer ID. Default to all.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requireds: Required terms. At least one of `required` and `ignored` must be set.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReleaseProfileState.__new__(_ReleaseProfileState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["ignoreds"] = ignoreds
        __props__.__dict__["indexer_id"] = indexer_id
        __props__.__dict__["requireds"] = requireds
        __props__.__dict__["tags"] = tags
        return ReleaseProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ignoreds(self) -> pulumi.Output[Sequence[str]]:
        """
        Ignored terms. At least one of `required` and `ignored` must be set.
        """
        return pulumi.get(self, "ignoreds")

    @property
    @pulumi.getter(name="indexerId")
    def indexer_id(self) -> pulumi.Output[int]:
        """
        Indexer ID. Default to all.
        """
        return pulumi.get(self, "indexer_id")

    @property
    @pulumi.getter
    def requireds(self) -> pulumi.Output[Sequence[str]]:
        """
        Required terms. At least one of `required` and `ignored` must be set.
        """
        return pulumi.get(self, "requireds")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

