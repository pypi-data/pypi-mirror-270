# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRootFolderResult',
    'AwaitableGetRootFolderResult',
    'get_root_folder',
    'get_root_folder_output',
]

@pulumi.output_type
class GetRootFolderResult:
    """
    A collection of values returned by getRootFolder.
    """
    def __init__(__self__, accessible=None, id=None, metadata_profile_id=None, monitor_option=None, name=None, new_item_monitor_option=None, path=None, quality_profile_id=None, tags=None):
        if accessible and not isinstance(accessible, bool):
            raise TypeError("Expected argument 'accessible' to be a bool")
        pulumi.set(__self__, "accessible", accessible)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if metadata_profile_id and not isinstance(metadata_profile_id, int):
            raise TypeError("Expected argument 'metadata_profile_id' to be a int")
        pulumi.set(__self__, "metadata_profile_id", metadata_profile_id)
        if monitor_option and not isinstance(monitor_option, str):
            raise TypeError("Expected argument 'monitor_option' to be a str")
        pulumi.set(__self__, "monitor_option", monitor_option)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if new_item_monitor_option and not isinstance(new_item_monitor_option, str):
            raise TypeError("Expected argument 'new_item_monitor_option' to be a str")
        pulumi.set(__self__, "new_item_monitor_option", new_item_monitor_option)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if quality_profile_id and not isinstance(quality_profile_id, int):
            raise TypeError("Expected argument 'quality_profile_id' to be a int")
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def accessible(self) -> bool:
        """
        Access flag.
        """
        return pulumi.get(self, "accessible")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Root Folder ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metadataProfileId")
    def metadata_profile_id(self) -> int:
        """
        Metadata profile ID.
        """
        return pulumi.get(self, "metadata_profile_id")

    @property
    @pulumi.getter(name="monitorOption")
    def monitor_option(self) -> str:
        """
        Monitor option.
        """
        return pulumi.get(self, "monitor_option")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Root Folder friendly name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newItemMonitorOption")
    def new_item_monitor_option(self) -> str:
        """
        New item monitor option.
        """
        return pulumi.get(self, "new_item_monitor_option")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Root Folder absolute path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetRootFolderResult(GetRootFolderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRootFolderResult(
            accessible=self.accessible,
            id=self.id,
            metadata_profile_id=self.metadata_profile_id,
            monitor_option=self.monitor_option,
            name=self.name,
            new_item_monitor_option=self.new_item_monitor_option,
            path=self.path,
            quality_profile_id=self.quality_profile_id,
            tags=self.tags)


def get_root_folder(path: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRootFolderResult:
    """
    <!-- subcategory:Media Management -->Single Root Folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.MediaManagement.get_root_folder(path="/music")
    ```


    :param str path: Root Folder absolute path.
    """
    __args__ = dict()
    __args__['path'] = path
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('lidarr:MediaManagement/getRootFolder:getRootFolder', __args__, opts=opts, typ=GetRootFolderResult).value

    return AwaitableGetRootFolderResult(
        accessible=pulumi.get(__ret__, 'accessible'),
        id=pulumi.get(__ret__, 'id'),
        metadata_profile_id=pulumi.get(__ret__, 'metadata_profile_id'),
        monitor_option=pulumi.get(__ret__, 'monitor_option'),
        name=pulumi.get(__ret__, 'name'),
        new_item_monitor_option=pulumi.get(__ret__, 'new_item_monitor_option'),
        path=pulumi.get(__ret__, 'path'),
        quality_profile_id=pulumi.get(__ret__, 'quality_profile_id'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_root_folder)
def get_root_folder_output(path: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRootFolderResult]:
    """
    <!-- subcategory:Media Management -->Single Root Folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.MediaManagement.get_root_folder(path="/music")
    ```


    :param str path: Root Folder absolute path.
    """
    ...
