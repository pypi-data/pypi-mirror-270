# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetImportListResult',
    'AwaitableGetImportListResult',
    'get_import_list',
    'get_import_list_output',
]

@pulumi.output_type
class GetImportListResult:
    """
    A collection of values returned by getImportList.
    """
    def __init__(__self__, access_token=None, api_key=None, base_url=None, config_contract=None, count_list=None, enable_automatic_add=None, expires=None, id=None, implementation=None, list_id=None, list_order=None, list_type=None, metadata_profile_id=None, monitor_new_items=None, name=None, playlist_ids=None, profile_ids=None, quality_profile_id=None, refresh_token=None, root_folder_path=None, series_id=None, should_monitor=None, should_monitor_existing=None, should_search=None, tag_id=None, tag_ids=None, tags=None, user_id=None):
        if access_token and not isinstance(access_token, str):
            raise TypeError("Expected argument 'access_token' to be a str")
        pulumi.set(__self__, "access_token", access_token)
        if api_key and not isinstance(api_key, str):
            raise TypeError("Expected argument 'api_key' to be a str")
        pulumi.set(__self__, "api_key", api_key)
        if base_url and not isinstance(base_url, str):
            raise TypeError("Expected argument 'base_url' to be a str")
        pulumi.set(__self__, "base_url", base_url)
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if count_list and not isinstance(count_list, int):
            raise TypeError("Expected argument 'count_list' to be a int")
        pulumi.set(__self__, "count_list", count_list)
        if enable_automatic_add and not isinstance(enable_automatic_add, bool):
            raise TypeError("Expected argument 'enable_automatic_add' to be a bool")
        pulumi.set(__self__, "enable_automatic_add", enable_automatic_add)
        if expires and not isinstance(expires, str):
            raise TypeError("Expected argument 'expires' to be a str")
        pulumi.set(__self__, "expires", expires)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if list_id and not isinstance(list_id, str):
            raise TypeError("Expected argument 'list_id' to be a str")
        pulumi.set(__self__, "list_id", list_id)
        if list_order and not isinstance(list_order, int):
            raise TypeError("Expected argument 'list_order' to be a int")
        pulumi.set(__self__, "list_order", list_order)
        if list_type and not isinstance(list_type, str):
            raise TypeError("Expected argument 'list_type' to be a str")
        pulumi.set(__self__, "list_type", list_type)
        if metadata_profile_id and not isinstance(metadata_profile_id, int):
            raise TypeError("Expected argument 'metadata_profile_id' to be a int")
        pulumi.set(__self__, "metadata_profile_id", metadata_profile_id)
        if monitor_new_items and not isinstance(monitor_new_items, str):
            raise TypeError("Expected argument 'monitor_new_items' to be a str")
        pulumi.set(__self__, "monitor_new_items", monitor_new_items)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if playlist_ids and not isinstance(playlist_ids, list):
            raise TypeError("Expected argument 'playlist_ids' to be a list")
        pulumi.set(__self__, "playlist_ids", playlist_ids)
        if profile_ids and not isinstance(profile_ids, list):
            raise TypeError("Expected argument 'profile_ids' to be a list")
        pulumi.set(__self__, "profile_ids", profile_ids)
        if quality_profile_id and not isinstance(quality_profile_id, int):
            raise TypeError("Expected argument 'quality_profile_id' to be a int")
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if refresh_token and not isinstance(refresh_token, str):
            raise TypeError("Expected argument 'refresh_token' to be a str")
        pulumi.set(__self__, "refresh_token", refresh_token)
        if root_folder_path and not isinstance(root_folder_path, str):
            raise TypeError("Expected argument 'root_folder_path' to be a str")
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        if series_id and not isinstance(series_id, str):
            raise TypeError("Expected argument 'series_id' to be a str")
        pulumi.set(__self__, "series_id", series_id)
        if should_monitor and not isinstance(should_monitor, str):
            raise TypeError("Expected argument 'should_monitor' to be a str")
        pulumi.set(__self__, "should_monitor", should_monitor)
        if should_monitor_existing and not isinstance(should_monitor_existing, bool):
            raise TypeError("Expected argument 'should_monitor_existing' to be a bool")
        pulumi.set(__self__, "should_monitor_existing", should_monitor_existing)
        if should_search and not isinstance(should_search, bool):
            raise TypeError("Expected argument 'should_search' to be a bool")
        pulumi.set(__self__, "should_search", should_search)
        if tag_id and not isinstance(tag_id, str):
            raise TypeError("Expected argument 'tag_id' to be a str")
        pulumi.set(__self__, "tag_id", tag_id)
        if tag_ids and not isinstance(tag_ids, list):
            raise TypeError("Expected argument 'tag_ids' to be a list")
        pulumi.set(__self__, "tag_ids", tag_ids)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        ImportList configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="countList")
    def count_list(self) -> int:
        """
        Elements to pull from list.
        """
        return pulumi.get(self, "count_list")

    @property
    @pulumi.getter(name="enableAutomaticAdd")
    def enable_automatic_add(self) -> bool:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_automatic_add")

    @property
    @pulumi.getter
    def expires(self) -> str:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Import List ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        ImportList implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> str:
        """
        List ID.
        """
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="listOrder")
    def list_order(self) -> int:
        """
        List order.
        """
        return pulumi.get(self, "list_order")

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> str:
        """
        List type.
        """
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="metadataProfileId")
    def metadata_profile_id(self) -> int:
        """
        Metadata profile ID.
        """
        return pulumi.get(self, "metadata_profile_id")

    @property
    @pulumi.getter(name="monitorNewItems")
    def monitor_new_items(self) -> str:
        """
        Monitor new items.
        """
        return pulumi.get(self, "monitor_new_items")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="playlistIds")
    def playlist_ids(self) -> Sequence[str]:
        """
        Playlist IDs.
        """
        return pulumi.get(self, "playlist_ids")

    @property
    @pulumi.getter(name="profileIds")
    def profile_ids(self) -> Sequence[int]:
        """
        Profile IDs.
        """
        return pulumi.get(self, "profile_ids")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="seriesId")
    def series_id(self) -> str:
        """
        Series ID.
        """
        return pulumi.get(self, "series_id")

    @property
    @pulumi.getter(name="shouldMonitor")
    def should_monitor(self) -> str:
        """
        Should monitor.
        """
        return pulumi.get(self, "should_monitor")

    @property
    @pulumi.getter(name="shouldMonitorExisting")
    def should_monitor_existing(self) -> bool:
        """
        Should monitor existing flag.
        """
        return pulumi.get(self, "should_monitor_existing")

    @property
    @pulumi.getter(name="shouldSearch")
    def should_search(self) -> bool:
        """
        Should search flag.
        """
        return pulumi.get(self, "should_search")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        """
        Tag ID.
        """
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[int]:
        """
        Tag IDs.
        """
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")


class AwaitableGetImportListResult(GetImportListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImportListResult(
            access_token=self.access_token,
            api_key=self.api_key,
            base_url=self.base_url,
            config_contract=self.config_contract,
            count_list=self.count_list,
            enable_automatic_add=self.enable_automatic_add,
            expires=self.expires,
            id=self.id,
            implementation=self.implementation,
            list_id=self.list_id,
            list_order=self.list_order,
            list_type=self.list_type,
            metadata_profile_id=self.metadata_profile_id,
            monitor_new_items=self.monitor_new_items,
            name=self.name,
            playlist_ids=self.playlist_ids,
            profile_ids=self.profile_ids,
            quality_profile_id=self.quality_profile_id,
            refresh_token=self.refresh_token,
            root_folder_path=self.root_folder_path,
            series_id=self.series_id,
            should_monitor=self.should_monitor,
            should_monitor_existing=self.should_monitor_existing,
            should_search=self.should_search,
            tag_id=self.tag_id,
            tag_ids=self.tag_ids,
            tags=self.tags,
            user_id=self.user_id)


def get_import_list(name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImportListResult:
    """
    <!-- subcategory:Import Lists -->Single Import List.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.ImportLists.get_import_list(name="Example")
    ```


    :param str name: Import List name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('lidarr:ImportLists/getImportList:getImportList', __args__, opts=opts, typ=GetImportListResult).value

    return AwaitableGetImportListResult(
        access_token=pulumi.get(__ret__, 'access_token'),
        api_key=pulumi.get(__ret__, 'api_key'),
        base_url=pulumi.get(__ret__, 'base_url'),
        config_contract=pulumi.get(__ret__, 'config_contract'),
        count_list=pulumi.get(__ret__, 'count_list'),
        enable_automatic_add=pulumi.get(__ret__, 'enable_automatic_add'),
        expires=pulumi.get(__ret__, 'expires'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        list_id=pulumi.get(__ret__, 'list_id'),
        list_order=pulumi.get(__ret__, 'list_order'),
        list_type=pulumi.get(__ret__, 'list_type'),
        metadata_profile_id=pulumi.get(__ret__, 'metadata_profile_id'),
        monitor_new_items=pulumi.get(__ret__, 'monitor_new_items'),
        name=pulumi.get(__ret__, 'name'),
        playlist_ids=pulumi.get(__ret__, 'playlist_ids'),
        profile_ids=pulumi.get(__ret__, 'profile_ids'),
        quality_profile_id=pulumi.get(__ret__, 'quality_profile_id'),
        refresh_token=pulumi.get(__ret__, 'refresh_token'),
        root_folder_path=pulumi.get(__ret__, 'root_folder_path'),
        series_id=pulumi.get(__ret__, 'series_id'),
        should_monitor=pulumi.get(__ret__, 'should_monitor'),
        should_monitor_existing=pulumi.get(__ret__, 'should_monitor_existing'),
        should_search=pulumi.get(__ret__, 'should_search'),
        tag_id=pulumi.get(__ret__, 'tag_id'),
        tag_ids=pulumi.get(__ret__, 'tag_ids'),
        tags=pulumi.get(__ret__, 'tags'),
        user_id=pulumi.get(__ret__, 'user_id'))


@_utilities.lift_output_func(get_import_list)
def get_import_list_output(name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImportListResult]:
    """
    <!-- subcategory:Import Lists -->Single Import List.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.ImportLists.get_import_list(name="Example")
    ```


    :param str name: Import List name.
    """
    ...
