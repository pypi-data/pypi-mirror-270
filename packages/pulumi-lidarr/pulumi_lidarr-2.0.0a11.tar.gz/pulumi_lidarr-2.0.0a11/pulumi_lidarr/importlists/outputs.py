# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetExclusionsImportListExclusionResult',
    'GetImportListsImportListResult',
]

@pulumi.output_type
class GetExclusionsImportListExclusionResult(dict):
    def __init__(__self__, *,
                 artist_name: str,
                 foreign_id: str,
                 id: int):
        """
        :param str artist_name: Artist to be excluded.
        :param str foreign_id: Musicbrainz ID.
        :param int id: ImportListExclusion ID.
        """
        pulumi.set(__self__, "artist_name", artist_name)
        pulumi.set(__self__, "foreign_id", foreign_id)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="artistName")
    def artist_name(self) -> str:
        """
        Artist to be excluded.
        """
        return pulumi.get(self, "artist_name")

    @property
    @pulumi.getter(name="foreignId")
    def foreign_id(self) -> str:
        """
        Musicbrainz ID.
        """
        return pulumi.get(self, "foreign_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ImportListExclusion ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetImportListsImportListResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 api_key: str,
                 base_url: str,
                 config_contract: str,
                 count_list: int,
                 enable_automatic_add: bool,
                 expires: str,
                 id: int,
                 implementation: str,
                 list_id: str,
                 list_order: int,
                 list_type: str,
                 metadata_profile_id: int,
                 monitor_new_items: str,
                 name: str,
                 playlist_ids: Sequence[str],
                 profile_ids: Sequence[int],
                 quality_profile_id: int,
                 refresh_token: str,
                 root_folder_path: str,
                 series_id: str,
                 should_monitor: str,
                 should_monitor_existing: bool,
                 should_search: bool,
                 tag_id: str,
                 tag_ids: Sequence[int],
                 tags: Sequence[int],
                 user_id: str):
        """
        :param str access_token: Access token.
        :param str api_key: API key.
        :param str base_url: Base URL.
        :param str config_contract: ImportList configuration template.
        :param int count_list: Elements to pull from list.
        :param bool enable_automatic_add: Enable automatic add flag.
        :param str expires: Expires.
        :param int id: Import List ID.
        :param str implementation: ImportList implementation name.
        :param str list_id: List ID.
        :param int list_order: List order.
        :param str list_type: List type.
        :param int metadata_profile_id: Metadata profile ID.
        :param str monitor_new_items: Monitor new items.
        :param str name: Import List name.
        :param Sequence[str] playlist_ids: Playlist IDs.
        :param Sequence[int] profile_ids: Profile IDs.
        :param int quality_profile_id: Quality profile ID.
        :param str refresh_token: Refresh token.
        :param str root_folder_path: Root folder path.
        :param str series_id: Series ID.
        :param str should_monitor: Should monitor.
        :param bool should_monitor_existing: Should monitor existing flag.
        :param bool should_search: Should search flag.
        :param str tag_id: Tag ID.
        :param Sequence[int] tag_ids: Tag IDs.
        :param Sequence[int] tags: List of associated tags.
        :param str user_id: User ID.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "count_list", count_list)
        pulumi.set(__self__, "enable_automatic_add", enable_automatic_add)
        pulumi.set(__self__, "expires", expires)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "list_id", list_id)
        pulumi.set(__self__, "list_order", list_order)
        pulumi.set(__self__, "list_type", list_type)
        pulumi.set(__self__, "metadata_profile_id", metadata_profile_id)
        pulumi.set(__self__, "monitor_new_items", monitor_new_items)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "playlist_ids", playlist_ids)
        pulumi.set(__self__, "profile_ids", profile_ids)
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        pulumi.set(__self__, "series_id", series_id)
        pulumi.set(__self__, "should_monitor", should_monitor)
        pulumi.set(__self__, "should_monitor_existing", should_monitor_existing)
        pulumi.set(__self__, "should_search", should_search)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_ids", tag_ids)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        ImportList configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="countList")
    def count_list(self) -> int:
        """
        Elements to pull from list.
        """
        return pulumi.get(self, "count_list")

    @property
    @pulumi.getter(name="enableAutomaticAdd")
    def enable_automatic_add(self) -> bool:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_automatic_add")

    @property
    @pulumi.getter
    def expires(self) -> str:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Import List ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        ImportList implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> str:
        """
        List ID.
        """
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="listOrder")
    def list_order(self) -> int:
        """
        List order.
        """
        return pulumi.get(self, "list_order")

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> str:
        """
        List type.
        """
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="metadataProfileId")
    def metadata_profile_id(self) -> int:
        """
        Metadata profile ID.
        """
        return pulumi.get(self, "metadata_profile_id")

    @property
    @pulumi.getter(name="monitorNewItems")
    def monitor_new_items(self) -> str:
        """
        Monitor new items.
        """
        return pulumi.get(self, "monitor_new_items")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="playlistIds")
    def playlist_ids(self) -> Sequence[str]:
        """
        Playlist IDs.
        """
        return pulumi.get(self, "playlist_ids")

    @property
    @pulumi.getter(name="profileIds")
    def profile_ids(self) -> Sequence[int]:
        """
        Profile IDs.
        """
        return pulumi.get(self, "profile_ids")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="seriesId")
    def series_id(self) -> str:
        """
        Series ID.
        """
        return pulumi.get(self, "series_id")

    @property
    @pulumi.getter(name="shouldMonitor")
    def should_monitor(self) -> str:
        """
        Should monitor.
        """
        return pulumi.get(self, "should_monitor")

    @property
    @pulumi.getter(name="shouldMonitorExisting")
    def should_monitor_existing(self) -> bool:
        """
        Should monitor existing flag.
        """
        return pulumi.get(self, "should_monitor_existing")

    @property
    @pulumi.getter(name="shouldSearch")
    def should_search(self) -> bool:
        """
        Should search flag.
        """
        return pulumi.get(self, "should_search")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        """
        Tag ID.
        """
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[int]:
        """
        Tag IDs.
        """
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")


