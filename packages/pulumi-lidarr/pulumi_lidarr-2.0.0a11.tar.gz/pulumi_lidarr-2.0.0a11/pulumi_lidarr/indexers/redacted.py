# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RedactedArgs', 'Redacted']

@pulumi.input_type
class RedactedArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 discography_seed_time: Optional[pulumi.Input[int]] = None,
                 early_release_limit: Optional[pulumi.Input[int]] = None,
                 enable_automatic_search: Optional[pulumi.Input[bool]] = None,
                 enable_interactive_search: Optional[pulumi.Input[bool]] = None,
                 enable_rss: Optional[pulumi.Input[bool]] = None,
                 minimum_seeders: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 seed_ratio: Optional[pulumi.Input[float]] = None,
                 seed_time: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 use_freeleech_token: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Redacted resource.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[int] discography_seed_time: Discography seed time.
        :param pulumi.Input[int] early_release_limit: Early release limit.
        :param pulumi.Input[bool] enable_automatic_search: Enable automatic search flag.
        :param pulumi.Input[bool] enable_interactive_search: Enable interactive search flag.
        :param pulumi.Input[bool] enable_rss: Enable RSS flag.
        :param pulumi.Input[int] minimum_seeders: Minimum seeders.
        :param pulumi.Input[str] name: IndexerRedacted name.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[float] seed_ratio: Seed ratio.
        :param pulumi.Input[int] seed_time: Seed time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] use_freeleech_token: Use freeleech token flag.
        """
        pulumi.set(__self__, "api_key", api_key)
        if discography_seed_time is not None:
            pulumi.set(__self__, "discography_seed_time", discography_seed_time)
        if early_release_limit is not None:
            pulumi.set(__self__, "early_release_limit", early_release_limit)
        if enable_automatic_search is not None:
            pulumi.set(__self__, "enable_automatic_search", enable_automatic_search)
        if enable_interactive_search is not None:
            pulumi.set(__self__, "enable_interactive_search", enable_interactive_search)
        if enable_rss is not None:
            pulumi.set(__self__, "enable_rss", enable_rss)
        if minimum_seeders is not None:
            pulumi.set(__self__, "minimum_seeders", minimum_seeders)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if seed_ratio is not None:
            pulumi.set(__self__, "seed_ratio", seed_ratio)
        if seed_time is not None:
            pulumi.set(__self__, "seed_time", seed_time)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if use_freeleech_token is not None:
            pulumi.set(__self__, "use_freeleech_token", use_freeleech_token)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="discographySeedTime")
    def discography_seed_time(self) -> Optional[pulumi.Input[int]]:
        """
        Discography seed time.
        """
        return pulumi.get(self, "discography_seed_time")

    @discography_seed_time.setter
    def discography_seed_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "discography_seed_time", value)

    @property
    @pulumi.getter(name="earlyReleaseLimit")
    def early_release_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Early release limit.
        """
        return pulumi.get(self, "early_release_limit")

    @early_release_limit.setter
    def early_release_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "early_release_limit", value)

    @property
    @pulumi.getter(name="enableAutomaticSearch")
    def enable_automatic_search(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic search flag.
        """
        return pulumi.get(self, "enable_automatic_search")

    @enable_automatic_search.setter
    def enable_automatic_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_automatic_search", value)

    @property
    @pulumi.getter(name="enableInteractiveSearch")
    def enable_interactive_search(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable interactive search flag.
        """
        return pulumi.get(self, "enable_interactive_search")

    @enable_interactive_search.setter
    def enable_interactive_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_interactive_search", value)

    @property
    @pulumi.getter(name="enableRss")
    def enable_rss(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable RSS flag.
        """
        return pulumi.get(self, "enable_rss")

    @enable_rss.setter
    def enable_rss(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_rss", value)

    @property
    @pulumi.getter(name="minimumSeeders")
    def minimum_seeders(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum seeders.
        """
        return pulumi.get(self, "minimum_seeders")

    @minimum_seeders.setter
    def minimum_seeders(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_seeders", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IndexerRedacted name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="seedRatio")
    def seed_ratio(self) -> Optional[pulumi.Input[float]]:
        """
        Seed ratio.
        """
        return pulumi.get(self, "seed_ratio")

    @seed_ratio.setter
    def seed_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "seed_ratio", value)

    @property
    @pulumi.getter(name="seedTime")
    def seed_time(self) -> Optional[pulumi.Input[int]]:
        """
        Seed time.
        """
        return pulumi.get(self, "seed_time")

    @seed_time.setter
    def seed_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seed_time", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="useFreeleechToken")
    def use_freeleech_token(self) -> Optional[pulumi.Input[bool]]:
        """
        Use freeleech token flag.
        """
        return pulumi.get(self, "use_freeleech_token")

    @use_freeleech_token.setter
    def use_freeleech_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_freeleech_token", value)


@pulumi.input_type
class _RedactedState:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 discography_seed_time: Optional[pulumi.Input[int]] = None,
                 early_release_limit: Optional[pulumi.Input[int]] = None,
                 enable_automatic_search: Optional[pulumi.Input[bool]] = None,
                 enable_interactive_search: Optional[pulumi.Input[bool]] = None,
                 enable_rss: Optional[pulumi.Input[bool]] = None,
                 minimum_seeders: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 seed_ratio: Optional[pulumi.Input[float]] = None,
                 seed_time: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 use_freeleech_token: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Redacted resources.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[int] discography_seed_time: Discography seed time.
        :param pulumi.Input[int] early_release_limit: Early release limit.
        :param pulumi.Input[bool] enable_automatic_search: Enable automatic search flag.
        :param pulumi.Input[bool] enable_interactive_search: Enable interactive search flag.
        :param pulumi.Input[bool] enable_rss: Enable RSS flag.
        :param pulumi.Input[int] minimum_seeders: Minimum seeders.
        :param pulumi.Input[str] name: IndexerRedacted name.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[float] seed_ratio: Seed ratio.
        :param pulumi.Input[int] seed_time: Seed time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] use_freeleech_token: Use freeleech token flag.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if discography_seed_time is not None:
            pulumi.set(__self__, "discography_seed_time", discography_seed_time)
        if early_release_limit is not None:
            pulumi.set(__self__, "early_release_limit", early_release_limit)
        if enable_automatic_search is not None:
            pulumi.set(__self__, "enable_automatic_search", enable_automatic_search)
        if enable_interactive_search is not None:
            pulumi.set(__self__, "enable_interactive_search", enable_interactive_search)
        if enable_rss is not None:
            pulumi.set(__self__, "enable_rss", enable_rss)
        if minimum_seeders is not None:
            pulumi.set(__self__, "minimum_seeders", minimum_seeders)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if seed_ratio is not None:
            pulumi.set(__self__, "seed_ratio", seed_ratio)
        if seed_time is not None:
            pulumi.set(__self__, "seed_time", seed_time)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if use_freeleech_token is not None:
            pulumi.set(__self__, "use_freeleech_token", use_freeleech_token)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="discographySeedTime")
    def discography_seed_time(self) -> Optional[pulumi.Input[int]]:
        """
        Discography seed time.
        """
        return pulumi.get(self, "discography_seed_time")

    @discography_seed_time.setter
    def discography_seed_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "discography_seed_time", value)

    @property
    @pulumi.getter(name="earlyReleaseLimit")
    def early_release_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Early release limit.
        """
        return pulumi.get(self, "early_release_limit")

    @early_release_limit.setter
    def early_release_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "early_release_limit", value)

    @property
    @pulumi.getter(name="enableAutomaticSearch")
    def enable_automatic_search(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic search flag.
        """
        return pulumi.get(self, "enable_automatic_search")

    @enable_automatic_search.setter
    def enable_automatic_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_automatic_search", value)

    @property
    @pulumi.getter(name="enableInteractiveSearch")
    def enable_interactive_search(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable interactive search flag.
        """
        return pulumi.get(self, "enable_interactive_search")

    @enable_interactive_search.setter
    def enable_interactive_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_interactive_search", value)

    @property
    @pulumi.getter(name="enableRss")
    def enable_rss(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable RSS flag.
        """
        return pulumi.get(self, "enable_rss")

    @enable_rss.setter
    def enable_rss(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_rss", value)

    @property
    @pulumi.getter(name="minimumSeeders")
    def minimum_seeders(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum seeders.
        """
        return pulumi.get(self, "minimum_seeders")

    @minimum_seeders.setter
    def minimum_seeders(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_seeders", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IndexerRedacted name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="seedRatio")
    def seed_ratio(self) -> Optional[pulumi.Input[float]]:
        """
        Seed ratio.
        """
        return pulumi.get(self, "seed_ratio")

    @seed_ratio.setter
    def seed_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "seed_ratio", value)

    @property
    @pulumi.getter(name="seedTime")
    def seed_time(self) -> Optional[pulumi.Input[int]]:
        """
        Seed time.
        """
        return pulumi.get(self, "seed_time")

    @seed_time.setter
    def seed_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seed_time", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="useFreeleechToken")
    def use_freeleech_token(self) -> Optional[pulumi.Input[bool]]:
        """
        Use freeleech token flag.
        """
        return pulumi.get(self, "use_freeleech_token")

    @use_freeleech_token.setter
    def use_freeleech_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_freeleech_token", value)


class Redacted(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 discography_seed_time: Optional[pulumi.Input[int]] = None,
                 early_release_limit: Optional[pulumi.Input[int]] = None,
                 enable_automatic_search: Optional[pulumi.Input[bool]] = None,
                 enable_interactive_search: Optional[pulumi.Input[bool]] = None,
                 enable_rss: Optional[pulumi.Input[bool]] = None,
                 minimum_seeders: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 seed_ratio: Optional[pulumi.Input[float]] = None,
                 seed_time: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 use_freeleech_token: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        <!-- subcategory:Indexers -->Indexer Redacted resource.
        For more information refer to [Indexer](https://wiki.servarr.com/lidarr/settings#indexers) and [Redacted](https://wiki.servarr.com/lidarr/supported#redacted).

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import lidarr:Indexers/redacted:Redacted example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[int] discography_seed_time: Discography seed time.
        :param pulumi.Input[int] early_release_limit: Early release limit.
        :param pulumi.Input[bool] enable_automatic_search: Enable automatic search flag.
        :param pulumi.Input[bool] enable_interactive_search: Enable interactive search flag.
        :param pulumi.Input[bool] enable_rss: Enable RSS flag.
        :param pulumi.Input[int] minimum_seeders: Minimum seeders.
        :param pulumi.Input[str] name: IndexerRedacted name.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[float] seed_ratio: Seed ratio.
        :param pulumi.Input[int] seed_time: Seed time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] use_freeleech_token: Use freeleech token flag.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RedactedArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Indexers -->Indexer Redacted resource.
        For more information refer to [Indexer](https://wiki.servarr.com/lidarr/settings#indexers) and [Redacted](https://wiki.servarr.com/lidarr/supported#redacted).

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import lidarr:Indexers/redacted:Redacted example 1
        ```

        :param str resource_name: The name of the resource.
        :param RedactedArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RedactedArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 discography_seed_time: Optional[pulumi.Input[int]] = None,
                 early_release_limit: Optional[pulumi.Input[int]] = None,
                 enable_automatic_search: Optional[pulumi.Input[bool]] = None,
                 enable_interactive_search: Optional[pulumi.Input[bool]] = None,
                 enable_rss: Optional[pulumi.Input[bool]] = None,
                 minimum_seeders: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 seed_ratio: Optional[pulumi.Input[float]] = None,
                 seed_time: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 use_freeleech_token: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RedactedArgs.__new__(RedactedArgs)

            if api_key is None and not opts.urn:
                raise TypeError("Missing required property 'api_key'")
            __props__.__dict__["api_key"] = None if api_key is None else pulumi.Output.secret(api_key)
            __props__.__dict__["discography_seed_time"] = discography_seed_time
            __props__.__dict__["early_release_limit"] = early_release_limit
            __props__.__dict__["enable_automatic_search"] = enable_automatic_search
            __props__.__dict__["enable_interactive_search"] = enable_interactive_search
            __props__.__dict__["enable_rss"] = enable_rss
            __props__.__dict__["minimum_seeders"] = minimum_seeders
            __props__.__dict__["name"] = name
            __props__.__dict__["priority"] = priority
            __props__.__dict__["seed_ratio"] = seed_ratio
            __props__.__dict__["seed_time"] = seed_time
            __props__.__dict__["tags"] = tags
            __props__.__dict__["use_freeleech_token"] = use_freeleech_token
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Redacted, __self__).__init__(
            'lidarr:Indexers/redacted:Redacted',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_key: Optional[pulumi.Input[str]] = None,
            discography_seed_time: Optional[pulumi.Input[int]] = None,
            early_release_limit: Optional[pulumi.Input[int]] = None,
            enable_automatic_search: Optional[pulumi.Input[bool]] = None,
            enable_interactive_search: Optional[pulumi.Input[bool]] = None,
            enable_rss: Optional[pulumi.Input[bool]] = None,
            minimum_seeders: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            seed_ratio: Optional[pulumi.Input[float]] = None,
            seed_time: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            use_freeleech_token: Optional[pulumi.Input[bool]] = None) -> 'Redacted':
        """
        Get an existing Redacted resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[int] discography_seed_time: Discography seed time.
        :param pulumi.Input[int] early_release_limit: Early release limit.
        :param pulumi.Input[bool] enable_automatic_search: Enable automatic search flag.
        :param pulumi.Input[bool] enable_interactive_search: Enable interactive search flag.
        :param pulumi.Input[bool] enable_rss: Enable RSS flag.
        :param pulumi.Input[int] minimum_seeders: Minimum seeders.
        :param pulumi.Input[str] name: IndexerRedacted name.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[float] seed_ratio: Seed ratio.
        :param pulumi.Input[int] seed_time: Seed time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] use_freeleech_token: Use freeleech token flag.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RedactedState.__new__(_RedactedState)

        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["discography_seed_time"] = discography_seed_time
        __props__.__dict__["early_release_limit"] = early_release_limit
        __props__.__dict__["enable_automatic_search"] = enable_automatic_search
        __props__.__dict__["enable_interactive_search"] = enable_interactive_search
        __props__.__dict__["enable_rss"] = enable_rss
        __props__.__dict__["minimum_seeders"] = minimum_seeders
        __props__.__dict__["name"] = name
        __props__.__dict__["priority"] = priority
        __props__.__dict__["seed_ratio"] = seed_ratio
        __props__.__dict__["seed_time"] = seed_time
        __props__.__dict__["tags"] = tags
        __props__.__dict__["use_freeleech_token"] = use_freeleech_token
        return Redacted(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[str]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="discographySeedTime")
    def discography_seed_time(self) -> pulumi.Output[int]:
        """
        Discography seed time.
        """
        return pulumi.get(self, "discography_seed_time")

    @property
    @pulumi.getter(name="earlyReleaseLimit")
    def early_release_limit(self) -> pulumi.Output[int]:
        """
        Early release limit.
        """
        return pulumi.get(self, "early_release_limit")

    @property
    @pulumi.getter(name="enableAutomaticSearch")
    def enable_automatic_search(self) -> pulumi.Output[bool]:
        """
        Enable automatic search flag.
        """
        return pulumi.get(self, "enable_automatic_search")

    @property
    @pulumi.getter(name="enableInteractiveSearch")
    def enable_interactive_search(self) -> pulumi.Output[bool]:
        """
        Enable interactive search flag.
        """
        return pulumi.get(self, "enable_interactive_search")

    @property
    @pulumi.getter(name="enableRss")
    def enable_rss(self) -> pulumi.Output[bool]:
        """
        Enable RSS flag.
        """
        return pulumi.get(self, "enable_rss")

    @property
    @pulumi.getter(name="minimumSeeders")
    def minimum_seeders(self) -> pulumi.Output[int]:
        """
        Minimum seeders.
        """
        return pulumi.get(self, "minimum_seeders")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        IndexerRedacted name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="seedRatio")
    def seed_ratio(self) -> pulumi.Output[float]:
        """
        Seed ratio.
        """
        return pulumi.get(self, "seed_ratio")

    @property
    @pulumi.getter(name="seedTime")
    def seed_time(self) -> pulumi.Output[int]:
        """
        Seed time.
        """
        return pulumi.get(self, "seed_time")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="useFreeleechToken")
    def use_freeleech_token(self) -> pulumi.Output[bool]:
        """
        Use freeleech token flag.
        """
        return pulumi.get(self, "use_freeleech_token")

