# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetConfigResult',
    'AwaitableGetConfigResult',
    'get_config',
    'get_config_output',
]

@pulumi.output_type
class GetConfigResult:
    """
    A collection of values returned by getConfig.
    """
    def __init__(__self__, id=None, metadata_source=None, scrub_audio_tags=None, write_audio_tags=None):
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if metadata_source and not isinstance(metadata_source, str):
            raise TypeError("Expected argument 'metadata_source' to be a str")
        pulumi.set(__self__, "metadata_source", metadata_source)
        if scrub_audio_tags and not isinstance(scrub_audio_tags, bool):
            raise TypeError("Expected argument 'scrub_audio_tags' to be a bool")
        pulumi.set(__self__, "scrub_audio_tags", scrub_audio_tags)
        if write_audio_tags and not isinstance(write_audio_tags, str):
            raise TypeError("Expected argument 'write_audio_tags' to be a str")
        pulumi.set(__self__, "write_audio_tags", write_audio_tags)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Metadata Config ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metadataSource")
    def metadata_source(self) -> str:
        """
        Metadata Source.
        """
        return pulumi.get(self, "metadata_source")

    @property
    @pulumi.getter(name="scrubAudioTags")
    def scrub_audio_tags(self) -> bool:
        """
        Scrub audio tags.
        """
        return pulumi.get(self, "scrub_audio_tags")

    @property
    @pulumi.getter(name="writeAudioTags")
    def write_audio_tags(self) -> str:
        """
        Write audio tags.
        """
        return pulumi.get(self, "write_audio_tags")


class AwaitableGetConfigResult(GetConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigResult(
            id=self.id,
            metadata_source=self.metadata_source,
            scrub_audio_tags=self.scrub_audio_tags,
            write_audio_tags=self.write_audio_tags)


def get_config(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigResult:
    """
    <!-- subcategory:Metadata -->Metadata Config.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.Metadata.get_config()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('lidarr:Metadata/getConfig:getConfig', __args__, opts=opts, typ=GetConfigResult).value

    return AwaitableGetConfigResult(
        id=pulumi.get(__ret__, 'id'),
        metadata_source=pulumi.get(__ret__, 'metadata_source'),
        scrub_audio_tags=pulumi.get(__ret__, 'scrub_audio_tags'),
        write_audio_tags=pulumi.get(__ret__, 'write_audio_tags'))


@_utilities.lift_output_func(get_config)
def get_config_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConfigResult]:
    """
    <!-- subcategory:Metadata -->Metadata Config.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.Metadata.get_config()
    ```
    """
    ...
