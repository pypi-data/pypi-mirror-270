# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetConsumersMetadataConsumerResult',
]

@pulumi.output_type
class GetConsumersMetadataConsumerResult(dict):
    def __init__(__self__, *,
                 album_images: bool,
                 album_metadata: bool,
                 artist_images: bool,
                 artist_metadata: bool,
                 config_contract: str,
                 enable: bool,
                 id: int,
                 implementation: str,
                 name: str,
                 tags: Sequence[int],
                 track_metadata: bool):
        """
        :param bool album_images: Album images flag.
        :param bool album_metadata: Album metadata flag.
        :param bool artist_images: Artist images flag.
        :param bool artist_metadata: Artist metadata flag.
        :param str config_contract: Metadata configuration template.
        :param bool enable: Enable flag.
        :param int id: Metadata ID.
        :param str implementation: Metadata implementation name.
        :param str name: Metadata name.
        :param Sequence[int] tags: List of associated tags.
        :param bool track_metadata: Track metadata flag.
        """
        pulumi.set(__self__, "album_images", album_images)
        pulumi.set(__self__, "album_metadata", album_metadata)
        pulumi.set(__self__, "artist_images", artist_images)
        pulumi.set(__self__, "artist_metadata", artist_metadata)
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "track_metadata", track_metadata)

    @property
    @pulumi.getter(name="albumImages")
    def album_images(self) -> bool:
        """
        Album images flag.
        """
        return pulumi.get(self, "album_images")

    @property
    @pulumi.getter(name="albumMetadata")
    def album_metadata(self) -> bool:
        """
        Album metadata flag.
        """
        return pulumi.get(self, "album_metadata")

    @property
    @pulumi.getter(name="artistImages")
    def artist_images(self) -> bool:
        """
        Artist images flag.
        """
        return pulumi.get(self, "artist_images")

    @property
    @pulumi.getter(name="artistMetadata")
    def artist_metadata(self) -> bool:
        """
        Artist metadata flag.
        """
        return pulumi.get(self, "artist_metadata")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Metadata configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Metadata ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Metadata implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Metadata name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="trackMetadata")
    def track_metadata(self) -> bool:
        """
        Track metadata flag.
        """
        return pulumi.get(self, "track_metadata")


