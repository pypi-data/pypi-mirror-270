# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetNamingResult',
    'AwaitableGetNamingResult',
    'get_naming',
    'get_naming_output',
]

@pulumi.output_type
class GetNamingResult:
    """
    A collection of values returned by getNaming.
    """
    def __init__(__self__, artist_folder_format=None, id=None, multi_disc_track_format=None, rename_tracks=None, replace_illegal_characters=None, standard_track_format=None):
        if artist_folder_format and not isinstance(artist_folder_format, str):
            raise TypeError("Expected argument 'artist_folder_format' to be a str")
        pulumi.set(__self__, "artist_folder_format", artist_folder_format)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if multi_disc_track_format and not isinstance(multi_disc_track_format, str):
            raise TypeError("Expected argument 'multi_disc_track_format' to be a str")
        pulumi.set(__self__, "multi_disc_track_format", multi_disc_track_format)
        if rename_tracks and not isinstance(rename_tracks, bool):
            raise TypeError("Expected argument 'rename_tracks' to be a bool")
        pulumi.set(__self__, "rename_tracks", rename_tracks)
        if replace_illegal_characters and not isinstance(replace_illegal_characters, bool):
            raise TypeError("Expected argument 'replace_illegal_characters' to be a bool")
        pulumi.set(__self__, "replace_illegal_characters", replace_illegal_characters)
        if standard_track_format and not isinstance(standard_track_format, str):
            raise TypeError("Expected argument 'standard_track_format' to be a str")
        pulumi.set(__self__, "standard_track_format", standard_track_format)

    @property
    @pulumi.getter(name="artistFolderFormat")
    def artist_folder_format(self) -> str:
        """
        Artist folder format.
        """
        return pulumi.get(self, "artist_folder_format")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Naming ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="multiDiscTrackFormat")
    def multi_disc_track_format(self) -> str:
        """
        Multi disc track format.
        """
        return pulumi.get(self, "multi_disc_track_format")

    @property
    @pulumi.getter(name="renameTracks")
    def rename_tracks(self) -> bool:
        """
        Lidarr will use the existing file name if false.
        """
        return pulumi.get(self, "rename_tracks")

    @property
    @pulumi.getter(name="replaceIllegalCharacters")
    def replace_illegal_characters(self) -> bool:
        """
        Replace illegal characters. They will be removed if false.
        """
        return pulumi.get(self, "replace_illegal_characters")

    @property
    @pulumi.getter(name="standardTrackFormat")
    def standard_track_format(self) -> str:
        """
        Standard track formatss.
        """
        return pulumi.get(self, "standard_track_format")


class AwaitableGetNamingResult(GetNamingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamingResult(
            artist_folder_format=self.artist_folder_format,
            id=self.id,
            multi_disc_track_format=self.multi_disc_track_format,
            rename_tracks=self.rename_tracks,
            replace_illegal_characters=self.replace_illegal_characters,
            standard_track_format=self.standard_track_format)


def get_naming(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamingResult:
    """
    <!-- subcategory:Media Management -->Naming.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.MediaManagement.get_naming()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('lidarr:MediaManagement/getNaming:getNaming', __args__, opts=opts, typ=GetNamingResult).value

    return AwaitableGetNamingResult(
        artist_folder_format=pulumi.get(__ret__, 'artist_folder_format'),
        id=pulumi.get(__ret__, 'id'),
        multi_disc_track_format=pulumi.get(__ret__, 'multi_disc_track_format'),
        rename_tracks=pulumi.get(__ret__, 'rename_tracks'),
        replace_illegal_characters=pulumi.get(__ret__, 'replace_illegal_characters'),
        standard_track_format=pulumi.get(__ret__, 'standard_track_format'))


@_utilities.lift_output_func(get_naming)
def get_naming_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNamingResult]:
    """
    <!-- subcategory:Media Management -->Naming.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.MediaManagement.get_naming()
    ```
    """
    ...
