# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetMetadataResult',
    'AwaitableGetMetadataResult',
    'get_metadata',
    'get_metadata_output',
]

@pulumi.output_type
class GetMetadataResult:
    """
    A collection of values returned by getMetadata.
    """
    def __init__(__self__, album_images=None, album_metadata=None, artist_images=None, artist_metadata=None, config_contract=None, enable=None, id=None, implementation=None, name=None, tags=None, track_metadata=None):
        if album_images and not isinstance(album_images, bool):
            raise TypeError("Expected argument 'album_images' to be a bool")
        pulumi.set(__self__, "album_images", album_images)
        if album_metadata and not isinstance(album_metadata, bool):
            raise TypeError("Expected argument 'album_metadata' to be a bool")
        pulumi.set(__self__, "album_metadata", album_metadata)
        if artist_images and not isinstance(artist_images, bool):
            raise TypeError("Expected argument 'artist_images' to be a bool")
        pulumi.set(__self__, "artist_images", artist_images)
        if artist_metadata and not isinstance(artist_metadata, bool):
            raise TypeError("Expected argument 'artist_metadata' to be a bool")
        pulumi.set(__self__, "artist_metadata", artist_metadata)
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if enable and not isinstance(enable, bool):
            raise TypeError("Expected argument 'enable' to be a bool")
        pulumi.set(__self__, "enable", enable)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if track_metadata and not isinstance(track_metadata, bool):
            raise TypeError("Expected argument 'track_metadata' to be a bool")
        pulumi.set(__self__, "track_metadata", track_metadata)

    @property
    @pulumi.getter(name="albumImages")
    def album_images(self) -> bool:
        """
        Album images flag.
        """
        return pulumi.get(self, "album_images")

    @property
    @pulumi.getter(name="albumMetadata")
    def album_metadata(self) -> bool:
        """
        Album metadata flag.
        """
        return pulumi.get(self, "album_metadata")

    @property
    @pulumi.getter(name="artistImages")
    def artist_images(self) -> bool:
        """
        Artist images flag.
        """
        return pulumi.get(self, "artist_images")

    @property
    @pulumi.getter(name="artistMetadata")
    def artist_metadata(self) -> bool:
        """
        Artist metadata flag.
        """
        return pulumi.get(self, "artist_metadata")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Metadata configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Metadata ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Metadata implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Metadata name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="trackMetadata")
    def track_metadata(self) -> bool:
        """
        Track metadata flag.
        """
        return pulumi.get(self, "track_metadata")


class AwaitableGetMetadataResult(GetMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetadataResult(
            album_images=self.album_images,
            album_metadata=self.album_metadata,
            artist_images=self.artist_images,
            artist_metadata=self.artist_metadata,
            config_contract=self.config_contract,
            enable=self.enable,
            id=self.id,
            implementation=self.implementation,
            name=self.name,
            tags=self.tags,
            track_metadata=self.track_metadata)


def get_metadata(name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetadataResult:
    """
    <!-- subcategory:Metadata -->Single Metadata.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.Metadata.get_metadata(name="Example")
    ```


    :param str name: Metadata name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('lidarr:Metadata/getMetadata:getMetadata', __args__, opts=opts, typ=GetMetadataResult).value

    return AwaitableGetMetadataResult(
        album_images=pulumi.get(__ret__, 'album_images'),
        album_metadata=pulumi.get(__ret__, 'album_metadata'),
        artist_images=pulumi.get(__ret__, 'artist_images'),
        artist_metadata=pulumi.get(__ret__, 'artist_metadata'),
        config_contract=pulumi.get(__ret__, 'config_contract'),
        enable=pulumi.get(__ret__, 'enable'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        name=pulumi.get(__ret__, 'name'),
        tags=pulumi.get(__ret__, 'tags'),
        track_metadata=pulumi.get(__ret__, 'track_metadata'))


@_utilities.lift_output_func(get_metadata)
def get_metadata_output(name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetadataResult]:
    """
    <!-- subcategory:Metadata -->Single Metadata.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_lidarr as lidarr

    example = lidarr.Metadata.get_metadata(name="Example")
    ```


    :param str name: Metadata name.
    """
    ...
