# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SynologyIndexerArgs', 'SynologyIndexer']

@pulumi.input_type
class SynologyIndexerArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 on_album_delete: Optional[pulumi.Input[bool]] = None,
                 on_artist_delete: Optional[pulumi.Input[bool]] = None,
                 on_release_import: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_track_retag: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a SynologyIndexer resource.
        :param pulumi.Input[str] name: NotificationSynology name.
        :param pulumi.Input[bool] on_album_delete: On album delete flag.
        :param pulumi.Input[bool] on_artist_delete: On artist delete flag.
        :param pulumi.Input[bool] on_release_import: On release import flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_track_retag: On track retag flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_album_delete is not None:
            pulumi.set(__self__, "on_album_delete", on_album_delete)
        if on_artist_delete is not None:
            pulumi.set(__self__, "on_artist_delete", on_artist_delete)
        if on_release_import is not None:
            pulumi.set(__self__, "on_release_import", on_release_import)
        if on_rename is not None:
            pulumi.set(__self__, "on_rename", on_rename)
        if on_track_retag is not None:
            pulumi.set(__self__, "on_track_retag", on_track_retag)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_library is not None:
            pulumi.set(__self__, "update_library", update_library)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationSynology name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onAlbumDelete")
    def on_album_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On album delete flag.
        """
        return pulumi.get(self, "on_album_delete")

    @on_album_delete.setter
    def on_album_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_album_delete", value)

    @property
    @pulumi.getter(name="onArtistDelete")
    def on_artist_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On artist delete flag.
        """
        return pulumi.get(self, "on_artist_delete")

    @on_artist_delete.setter
    def on_artist_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_artist_delete", value)

    @property
    @pulumi.getter(name="onReleaseImport")
    def on_release_import(self) -> Optional[pulumi.Input[bool]]:
        """
        On release import flag.
        """
        return pulumi.get(self, "on_release_import")

    @on_release_import.setter
    def on_release_import(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_release_import", value)

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> Optional[pulumi.Input[bool]]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @on_rename.setter
    def on_rename(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_rename", value)

    @property
    @pulumi.getter(name="onTrackRetag")
    def on_track_retag(self) -> Optional[pulumi.Input[bool]]:
        """
        On track retag flag.
        """
        return pulumi.get(self, "on_track_retag")

    @on_track_retag.setter
    def on_track_retag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_track_retag", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @update_library.setter
    def update_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_library", value)


@pulumi.input_type
class _SynologyIndexerState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 on_album_delete: Optional[pulumi.Input[bool]] = None,
                 on_artist_delete: Optional[pulumi.Input[bool]] = None,
                 on_release_import: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_track_retag: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering SynologyIndexer resources.
        :param pulumi.Input[str] name: NotificationSynology name.
        :param pulumi.Input[bool] on_album_delete: On album delete flag.
        :param pulumi.Input[bool] on_artist_delete: On artist delete flag.
        :param pulumi.Input[bool] on_release_import: On release import flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_track_retag: On track retag flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_album_delete is not None:
            pulumi.set(__self__, "on_album_delete", on_album_delete)
        if on_artist_delete is not None:
            pulumi.set(__self__, "on_artist_delete", on_artist_delete)
        if on_release_import is not None:
            pulumi.set(__self__, "on_release_import", on_release_import)
        if on_rename is not None:
            pulumi.set(__self__, "on_rename", on_rename)
        if on_track_retag is not None:
            pulumi.set(__self__, "on_track_retag", on_track_retag)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_library is not None:
            pulumi.set(__self__, "update_library", update_library)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationSynology name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onAlbumDelete")
    def on_album_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On album delete flag.
        """
        return pulumi.get(self, "on_album_delete")

    @on_album_delete.setter
    def on_album_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_album_delete", value)

    @property
    @pulumi.getter(name="onArtistDelete")
    def on_artist_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On artist delete flag.
        """
        return pulumi.get(self, "on_artist_delete")

    @on_artist_delete.setter
    def on_artist_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_artist_delete", value)

    @property
    @pulumi.getter(name="onReleaseImport")
    def on_release_import(self) -> Optional[pulumi.Input[bool]]:
        """
        On release import flag.
        """
        return pulumi.get(self, "on_release_import")

    @on_release_import.setter
    def on_release_import(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_release_import", value)

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> Optional[pulumi.Input[bool]]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @on_rename.setter
    def on_rename(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_rename", value)

    @property
    @pulumi.getter(name="onTrackRetag")
    def on_track_retag(self) -> Optional[pulumi.Input[bool]]:
        """
        On track retag flag.
        """
        return pulumi.get(self, "on_track_retag")

    @on_track_retag.setter
    def on_track_retag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_track_retag", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @update_library.setter
    def update_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_library", value)


class SynologyIndexer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_album_delete: Optional[pulumi.Input[bool]] = None,
                 on_artist_delete: Optional[pulumi.Input[bool]] = None,
                 on_release_import: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_track_retag: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        <!-- subcategory:Notifications -->Notification Synology Indexer resource.
        For more information refer to [Notification](https://wiki.servarr.com/lidarr/settings#connect) and [Synology](https://wiki.servarr.com/lidarr/supported#synologyindexer).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_lidarr as lidarr

        example = lidarr.notifications.SynologyIndexer("example",
            on_release_import=True,
            on_rename=False,
            on_track_retag=False,
            on_upgrade=True,
            update_library=True)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import lidarr:Notifications/synologyIndexer:SynologyIndexer example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: NotificationSynology name.
        :param pulumi.Input[bool] on_album_delete: On album delete flag.
        :param pulumi.Input[bool] on_artist_delete: On artist delete flag.
        :param pulumi.Input[bool] on_release_import: On release import flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_track_retag: On track retag flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SynologyIndexerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Notifications -->Notification Synology Indexer resource.
        For more information refer to [Notification](https://wiki.servarr.com/lidarr/settings#connect) and [Synology](https://wiki.servarr.com/lidarr/supported#synologyindexer).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_lidarr as lidarr

        example = lidarr.notifications.SynologyIndexer("example",
            on_release_import=True,
            on_rename=False,
            on_track_retag=False,
            on_upgrade=True,
            update_library=True)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import lidarr:Notifications/synologyIndexer:SynologyIndexer example 1
        ```

        :param str resource_name: The name of the resource.
        :param SynologyIndexerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SynologyIndexerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_album_delete: Optional[pulumi.Input[bool]] = None,
                 on_artist_delete: Optional[pulumi.Input[bool]] = None,
                 on_release_import: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_track_retag: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SynologyIndexerArgs.__new__(SynologyIndexerArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["on_album_delete"] = on_album_delete
            __props__.__dict__["on_artist_delete"] = on_artist_delete
            __props__.__dict__["on_release_import"] = on_release_import
            __props__.__dict__["on_rename"] = on_rename
            __props__.__dict__["on_track_retag"] = on_track_retag
            __props__.__dict__["on_upgrade"] = on_upgrade
            __props__.__dict__["tags"] = tags
            __props__.__dict__["update_library"] = update_library
        super(SynologyIndexer, __self__).__init__(
            'lidarr:Notifications/synologyIndexer:SynologyIndexer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            on_album_delete: Optional[pulumi.Input[bool]] = None,
            on_artist_delete: Optional[pulumi.Input[bool]] = None,
            on_release_import: Optional[pulumi.Input[bool]] = None,
            on_rename: Optional[pulumi.Input[bool]] = None,
            on_track_retag: Optional[pulumi.Input[bool]] = None,
            on_upgrade: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            update_library: Optional[pulumi.Input[bool]] = None) -> 'SynologyIndexer':
        """
        Get an existing SynologyIndexer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: NotificationSynology name.
        :param pulumi.Input[bool] on_album_delete: On album delete flag.
        :param pulumi.Input[bool] on_artist_delete: On artist delete flag.
        :param pulumi.Input[bool] on_release_import: On release import flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_track_retag: On track retag flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SynologyIndexerState.__new__(_SynologyIndexerState)

        __props__.__dict__["name"] = name
        __props__.__dict__["on_album_delete"] = on_album_delete
        __props__.__dict__["on_artist_delete"] = on_artist_delete
        __props__.__dict__["on_release_import"] = on_release_import
        __props__.__dict__["on_rename"] = on_rename
        __props__.__dict__["on_track_retag"] = on_track_retag
        __props__.__dict__["on_upgrade"] = on_upgrade
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_library"] = update_library
        return SynologyIndexer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        NotificationSynology name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onAlbumDelete")
    def on_album_delete(self) -> pulumi.Output[bool]:
        """
        On album delete flag.
        """
        return pulumi.get(self, "on_album_delete")

    @property
    @pulumi.getter(name="onArtistDelete")
    def on_artist_delete(self) -> pulumi.Output[bool]:
        """
        On artist delete flag.
        """
        return pulumi.get(self, "on_artist_delete")

    @property
    @pulumi.getter(name="onReleaseImport")
    def on_release_import(self) -> pulumi.Output[bool]:
        """
        On release import flag.
        """
        return pulumi.get(self, "on_release_import")

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> pulumi.Output[bool]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @property
    @pulumi.getter(name="onTrackRetag")
    def on_track_retag(self) -> pulumi.Output[bool]:
        """
        On track retag flag.
        """
        return pulumi.get(self, "on_track_retag")

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> pulumi.Output[bool]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> pulumi.Output[bool]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

