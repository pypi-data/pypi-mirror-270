# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'HostAuthenticationArgs',
    'HostBackupArgs',
    'HostLoggingArgs',
    'HostProxyArgs',
    'HostSslArgs',
    'HostUpdateArgs',
]

@pulumi.input_type
class HostAuthenticationArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 encrypted_password: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] method: Authentication method.
        :param pulumi.Input[str] encrypted_password: Needed for validation.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] username: Username.
        """
        pulumi.set(__self__, "method", method)
        if encrypted_password is not None:
            pulumi.set(__self__, "encrypted_password", encrypted_password)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        """
        Authentication method.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="encryptedPassword")
    def encrypted_password(self) -> Optional[pulumi.Input[str]]:
        """
        Needed for validation.
        """
        return pulumi.get(self, "encrypted_password")

    @encrypted_password.setter
    def encrypted_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_password", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class HostBackupArgs:
    def __init__(__self__, *,
                 folder: pulumi.Input[str],
                 interval: pulumi.Input[int],
                 retention: pulumi.Input[int]):
        """
        :param pulumi.Input[str] folder: Backup folder.
        :param pulumi.Input[int] interval: Backup interval.
        :param pulumi.Input[int] retention: Backup retention.
        """
        pulumi.set(__self__, "folder", folder)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "retention", retention)

    @property
    @pulumi.getter
    def folder(self) -> pulumi.Input[str]:
        """
        Backup folder.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: pulumi.Input[str]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[int]:
        """
        Backup interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def retention(self) -> pulumi.Input[int]:
        """
        Backup retention.
        """
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: pulumi.Input[int]):
        pulumi.set(self, "retention", value)


@pulumi.input_type
class HostLoggingArgs:
    def __init__(__self__, *,
                 log_level: pulumi.Input[str],
                 analytics_enabled: Optional[pulumi.Input[bool]] = None,
                 console_log_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log_level: Log level.
        :param pulumi.Input[bool] analytics_enabled: Enable analytics flag.
        :param pulumi.Input[str] console_log_level: Console log level.
        """
        pulumi.set(__self__, "log_level", log_level)
        if analytics_enabled is not None:
            pulumi.set(__self__, "analytics_enabled", analytics_enabled)
        if console_log_level is not None:
            pulumi.set(__self__, "console_log_level", console_log_level)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Input[str]:
        """
        Log level.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="analyticsEnabled")
    def analytics_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable analytics flag.
        """
        return pulumi.get(self, "analytics_enabled")

    @analytics_enabled.setter
    def analytics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "analytics_enabled", value)

    @property
    @pulumi.getter(name="consoleLogLevel")
    def console_log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Console log level.
        """
        return pulumi.get(self, "console_log_level")

    @console_log_level.setter
    def console_log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "console_log_level", value)


@pulumi.input_type
class HostProxyArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 bypass_filter: Optional[pulumi.Input[str]] = None,
                 bypass_local_addresses: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Enabled.
        :param pulumi.Input[str] bypass_filter: Bypass filder.
        :param pulumi.Input[bool] bypass_local_addresses: Bypass for local addresses flag.
        :param pulumi.Input[str] hostname: Proxy hostname.
        :param pulumi.Input[str] password: Proxy password.
        :param pulumi.Input[int] port: Proxy port.
        :param pulumi.Input[str] type: Proxy type.
        :param pulumi.Input[str] username: Proxy username.
        """
        pulumi.set(__self__, "enabled", enabled)
        if bypass_filter is not None:
            pulumi.set(__self__, "bypass_filter", bypass_filter)
        if bypass_local_addresses is not None:
            pulumi.set(__self__, "bypass_local_addresses", bypass_local_addresses)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="bypassFilter")
    def bypass_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Bypass filder.
        """
        return pulumi.get(self, "bypass_filter")

    @bypass_filter.setter
    def bypass_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bypass_filter", value)

    @property
    @pulumi.getter(name="bypassLocalAddresses")
    def bypass_local_addresses(self) -> Optional[pulumi.Input[bool]]:
        """
        Bypass for local addresses flag.
        """
        return pulumi.get(self, "bypass_local_addresses")

    @bypass_local_addresses.setter
    def bypass_local_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_local_addresses", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Proxy port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class HostSslArgs:
    def __init__(__self__, *,
                 certificate_validation: pulumi.Input[str],
                 enabled: pulumi.Input[bool],
                 cert_password: Optional[pulumi.Input[str]] = None,
                 cert_path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] certificate_validation: Certificate validation.
        :param pulumi.Input[bool] enabled: Enabled.
        :param pulumi.Input[str] cert_password: Certificate Password.
        :param pulumi.Input[str] cert_path: Certificate path.
        :param pulumi.Input[int] port: SSL port.
        """
        pulumi.set(__self__, "certificate_validation", certificate_validation)
        pulumi.set(__self__, "enabled", enabled)
        if cert_password is not None:
            pulumi.set(__self__, "cert_password", cert_password)
        if cert_path is not None:
            pulumi.set(__self__, "cert_path", cert_path)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="certificateValidation")
    def certificate_validation(self) -> pulumi.Input[str]:
        """
        Certificate validation.
        """
        return pulumi.get(self, "certificate_validation")

    @certificate_validation.setter
    def certificate_validation(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_validation", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="certPassword")
    def cert_password(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate Password.
        """
        return pulumi.get(self, "cert_password")

    @cert_password.setter
    def cert_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_password", value)

    @property
    @pulumi.getter(name="certPath")
    def cert_path(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate path.
        """
        return pulumi.get(self, "cert_path")

    @cert_path.setter
    def cert_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        SSL port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class HostUpdateArgs:
    def __init__(__self__, *,
                 branch: pulumi.Input[str],
                 mechanism: pulumi.Input[str],
                 script_path: Optional[pulumi.Input[str]] = None,
                 update_automatically: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] branch: Branch reference.
        :param pulumi.Input[str] mechanism: Update mechanism.
        :param pulumi.Input[str] script_path: Script path.
        :param pulumi.Input[bool] update_automatically: Update automatically flag.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "mechanism", mechanism)
        if script_path is not None:
            pulumi.set(__self__, "script_path", script_path)
        if update_automatically is not None:
            pulumi.set(__self__, "update_automatically", update_automatically)

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Input[str]:
        """
        Branch reference.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter
    def mechanism(self) -> pulumi.Input[str]:
        """
        Update mechanism.
        """
        return pulumi.get(self, "mechanism")

    @mechanism.setter
    def mechanism(self, value: pulumi.Input[str]):
        pulumi.set(self, "mechanism", value)

    @property
    @pulumi.getter(name="scriptPath")
    def script_path(self) -> Optional[pulumi.Input[str]]:
        """
        Script path.
        """
        return pulumi.get(self, "script_path")

    @script_path.setter
    def script_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_path", value)

    @property
    @pulumi.getter(name="updateAutomatically")
    def update_automatically(self) -> Optional[pulumi.Input[bool]]:
        """
        Update automatically flag.
        """
        return pulumi.get(self, "update_automatically")

    @update_automatically.setter
    def update_automatically(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_automatically", value)


