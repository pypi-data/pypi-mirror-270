# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1LightningappV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_download_source_code': 'bool',
        'code_config': 'V1CloudSpaceInstanceConfig',
        'created_at': 'datetime',
        'id': 'str',
        'is_app_private': 'bool',
        'is_code_private': 'bool',
        'name': 'str',
        'project_id': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'can_download_source_code': 'canDownloadSourceCode',
        'code_config': 'codeConfig',
        'created_at': 'createdAt',
        'id': 'id',
        'is_app_private': 'isAppPrivate',
        'is_code_private': 'isCodePrivate',
        'name': 'name',
        'project_id': 'projectId',
        'updated_at': 'updatedAt'
    }

    def __init__(self, can_download_source_code: 'bool' =None, code_config: 'V1CloudSpaceInstanceConfig' =None, created_at: 'datetime' =None, id: 'str' =None, is_app_private: 'bool' =None, is_code_private: 'bool' =None, name: 'str' =None, project_id: 'str' =None, updated_at: 'datetime' =None):  # noqa: E501
        """V1LightningappV2 - a model defined in Swagger"""  # noqa: E501
        self._can_download_source_code = None
        self._code_config = None
        self._created_at = None
        self._id = None
        self._is_app_private = None
        self._is_code_private = None
        self._name = None
        self._project_id = None
        self._updated_at = None
        self.discriminator = None
        if can_download_source_code is not None:
            self.can_download_source_code = can_download_source_code
        if code_config is not None:
            self.code_config = code_config
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if is_app_private is not None:
            self.is_app_private = is_app_private
        if is_code_private is not None:
            self.is_code_private = is_code_private
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def can_download_source_code(self) -> 'bool':
        """Gets the can_download_source_code of this V1LightningappV2.  # noqa: E501


        :return: The can_download_source_code of this V1LightningappV2.  # noqa: E501
        :rtype: bool
        """
        return self._can_download_source_code

    @can_download_source_code.setter
    def can_download_source_code(self, can_download_source_code: 'bool'):
        """Sets the can_download_source_code of this V1LightningappV2.


        :param can_download_source_code: The can_download_source_code of this V1LightningappV2.  # noqa: E501
        :type: bool
        """

        self._can_download_source_code = can_download_source_code

    @property
    def code_config(self) -> 'V1CloudSpaceInstanceConfig':
        """Gets the code_config of this V1LightningappV2.  # noqa: E501


        :return: The code_config of this V1LightningappV2.  # noqa: E501
        :rtype: V1CloudSpaceInstanceConfig
        """
        return self._code_config

    @code_config.setter
    def code_config(self, code_config: 'V1CloudSpaceInstanceConfig'):
        """Sets the code_config of this V1LightningappV2.


        :param code_config: The code_config of this V1LightningappV2.  # noqa: E501
        :type: V1CloudSpaceInstanceConfig
        """

        self._code_config = code_config

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1LightningappV2.  # noqa: E501


        :return: The created_at of this V1LightningappV2.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1LightningappV2.


        :param created_at: The created_at of this V1LightningappV2.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self) -> 'str':
        """Gets the id of this V1LightningappV2.  # noqa: E501


        :return: The id of this V1LightningappV2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1LightningappV2.


        :param id: The id of this V1LightningappV2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_app_private(self) -> 'bool':
        """Gets the is_app_private of this V1LightningappV2.  # noqa: E501


        :return: The is_app_private of this V1LightningappV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_app_private

    @is_app_private.setter
    def is_app_private(self, is_app_private: 'bool'):
        """Sets the is_app_private of this V1LightningappV2.


        :param is_app_private: The is_app_private of this V1LightningappV2.  # noqa: E501
        :type: bool
        """

        self._is_app_private = is_app_private

    @property
    def is_code_private(self) -> 'bool':
        """Gets the is_code_private of this V1LightningappV2.  # noqa: E501


        :return: The is_code_private of this V1LightningappV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_code_private

    @is_code_private.setter
    def is_code_private(self, is_code_private: 'bool'):
        """Sets the is_code_private of this V1LightningappV2.


        :param is_code_private: The is_code_private of this V1LightningappV2.  # noqa: E501
        :type: bool
        """

        self._is_code_private = is_code_private

    @property
    def name(self) -> 'str':
        """Gets the name of this V1LightningappV2.  # noqa: E501


        :return: The name of this V1LightningappV2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1LightningappV2.


        :param name: The name of this V1LightningappV2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1LightningappV2.  # noqa: E501


        :return: The project_id of this V1LightningappV2.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1LightningappV2.


        :param project_id: The project_id of this V1LightningappV2.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1LightningappV2.  # noqa: E501


        :return: The updated_at of this V1LightningappV2.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1LightningappV2.


        :param updated_at: The updated_at of this V1LightningappV2.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LightningappV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1LightningappV2') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LightningappV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1LightningappV2') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
