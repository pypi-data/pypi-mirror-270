# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1MetricsStream(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'cloudspace_id': 'str',
        'created_at': 'datetime',
        'dark_color': 'str',
        'id': 'str',
        'light_color': 'str',
        'name': 'str',
        'project_id': 'str',
        'source_id': 'str',
        'stopped_at': 'datetime',
        'trackers': 'dict(str, V1MetricsTracker)',
        'user_id': 'str',
        'work_id': 'str'
    }

    attribute_map = {
        'app_id': 'appId',
        'cloudspace_id': 'cloudspaceId',
        'created_at': 'createdAt',
        'dark_color': 'darkColor',
        'id': 'id',
        'light_color': 'lightColor',
        'name': 'name',
        'project_id': 'projectId',
        'source_id': 'sourceId',
        'stopped_at': 'stoppedAt',
        'trackers': 'trackers',
        'user_id': 'userId',
        'work_id': 'workId'
    }

    def __init__(self, app_id: 'str' =None, cloudspace_id: 'str' =None, created_at: 'datetime' =None, dark_color: 'str' =None, id: 'str' =None, light_color: 'str' =None, name: 'str' =None, project_id: 'str' =None, source_id: 'str' =None, stopped_at: 'datetime' =None, trackers: 'dict(str, V1MetricsTracker)' =None, user_id: 'str' =None, work_id: 'str' =None):  # noqa: E501
        """V1MetricsStream - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._cloudspace_id = None
        self._created_at = None
        self._dark_color = None
        self._id = None
        self._light_color = None
        self._name = None
        self._project_id = None
        self._source_id = None
        self._stopped_at = None
        self._trackers = None
        self._user_id = None
        self._work_id = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if created_at is not None:
            self.created_at = created_at
        if dark_color is not None:
            self.dark_color = dark_color
        if id is not None:
            self.id = id
        if light_color is not None:
            self.light_color = light_color
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if source_id is not None:
            self.source_id = source_id
        if stopped_at is not None:
            self.stopped_at = stopped_at
        if trackers is not None:
            self.trackers = trackers
        if user_id is not None:
            self.user_id = user_id
        if work_id is not None:
            self.work_id = work_id

    @property
    def app_id(self) -> 'str':
        """Gets the app_id of this V1MetricsStream.  # noqa: E501


        :return: The app_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id: 'str'):
        """Sets the app_id of this V1MetricsStream.


        :param app_id: The app_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1MetricsStream.  # noqa: E501


        :return: The cloudspace_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1MetricsStream.


        :param cloudspace_id: The cloudspace_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1MetricsStream.  # noqa: E501


        :return: The created_at of this V1MetricsStream.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1MetricsStream.


        :param created_at: The created_at of this V1MetricsStream.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def dark_color(self) -> 'str':
        """Gets the dark_color of this V1MetricsStream.  # noqa: E501


        :return: The dark_color of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._dark_color

    @dark_color.setter
    def dark_color(self, dark_color: 'str'):
        """Sets the dark_color of this V1MetricsStream.


        :param dark_color: The dark_color of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._dark_color = dark_color

    @property
    def id(self) -> 'str':
        """Gets the id of this V1MetricsStream.  # noqa: E501


        :return: The id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1MetricsStream.


        :param id: The id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def light_color(self) -> 'str':
        """Gets the light_color of this V1MetricsStream.  # noqa: E501


        :return: The light_color of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._light_color

    @light_color.setter
    def light_color(self, light_color: 'str'):
        """Sets the light_color of this V1MetricsStream.


        :param light_color: The light_color of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._light_color = light_color

    @property
    def name(self) -> 'str':
        """Gets the name of this V1MetricsStream.  # noqa: E501


        :return: The name of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1MetricsStream.


        :param name: The name of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1MetricsStream.  # noqa: E501


        :return: The project_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1MetricsStream.


        :param project_id: The project_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def source_id(self) -> 'str':
        """Gets the source_id of this V1MetricsStream.  # noqa: E501


        :return: The source_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id: 'str'):
        """Sets the source_id of this V1MetricsStream.


        :param source_id: The source_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def stopped_at(self) -> 'datetime':
        """Gets the stopped_at of this V1MetricsStream.  # noqa: E501


        :return: The stopped_at of this V1MetricsStream.  # noqa: E501
        :rtype: datetime
        """
        return self._stopped_at

    @stopped_at.setter
    def stopped_at(self, stopped_at: 'datetime'):
        """Sets the stopped_at of this V1MetricsStream.


        :param stopped_at: The stopped_at of this V1MetricsStream.  # noqa: E501
        :type: datetime
        """

        self._stopped_at = stopped_at

    @property
    def trackers(self) -> 'dict(str, V1MetricsTracker)':
        """Gets the trackers of this V1MetricsStream.  # noqa: E501


        :return: The trackers of this V1MetricsStream.  # noqa: E501
        :rtype: dict(str, V1MetricsTracker)
        """
        return self._trackers

    @trackers.setter
    def trackers(self, trackers: 'dict(str, V1MetricsTracker)'):
        """Sets the trackers of this V1MetricsStream.


        :param trackers: The trackers of this V1MetricsStream.  # noqa: E501
        :type: dict(str, V1MetricsTracker)
        """

        self._trackers = trackers

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1MetricsStream.  # noqa: E501


        :return: The user_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1MetricsStream.


        :param user_id: The user_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def work_id(self) -> 'str':
        """Gets the work_id of this V1MetricsStream.  # noqa: E501


        :return: The work_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._work_id

    @work_id.setter
    def work_id(self, work_id: 'str'):
        """Sets the work_id of this V1MetricsStream.


        :param work_id: The work_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._work_id = work_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1MetricsStream, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1MetricsStream') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MetricsStream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1MetricsStream') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
