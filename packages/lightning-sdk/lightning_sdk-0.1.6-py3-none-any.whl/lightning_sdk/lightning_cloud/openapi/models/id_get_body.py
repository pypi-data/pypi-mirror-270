# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class IdGetBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth': 'V1LightningAuth',
        'cluster_id': 'str',
        'desired_state': 'V1LightningappInstanceState',
        'display_name': 'str',
        'domain': 'str',
        'env': 'list[V1EnvVar]',
        'name': 'str',
        'queue_server_type': 'V1QueueServerType'
    }

    attribute_map = {
        'auth': 'auth',
        'cluster_id': 'clusterId',
        'desired_state': 'desiredState',
        'display_name': 'displayName',
        'domain': 'domain',
        'env': 'env',
        'name': 'name',
        'queue_server_type': 'queueServerType'
    }

    def __init__(self, auth: 'V1LightningAuth' =None, cluster_id: 'str' =None, desired_state: 'V1LightningappInstanceState' =None, display_name: 'str' =None, domain: 'str' =None, env: 'list[V1EnvVar]' =None, name: 'str' =None, queue_server_type: 'V1QueueServerType' =None):  # noqa: E501
        """IdGetBody - a model defined in Swagger"""  # noqa: E501
        self._auth = None
        self._cluster_id = None
        self._desired_state = None
        self._display_name = None
        self._domain = None
        self._env = None
        self._name = None
        self._queue_server_type = None
        self.discriminator = None
        if auth is not None:
            self.auth = auth
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if desired_state is not None:
            self.desired_state = desired_state
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if env is not None:
            self.env = env
        if name is not None:
            self.name = name
        if queue_server_type is not None:
            self.queue_server_type = queue_server_type

    @property
    def auth(self) -> 'V1LightningAuth':
        """Gets the auth of this IdGetBody.  # noqa: E501


        :return: The auth of this IdGetBody.  # noqa: E501
        :rtype: V1LightningAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth: 'V1LightningAuth'):
        """Sets the auth of this IdGetBody.


        :param auth: The auth of this IdGetBody.  # noqa: E501
        :type: V1LightningAuth
        """

        self._auth = auth

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this IdGetBody.  # noqa: E501


        :return: The cluster_id of this IdGetBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this IdGetBody.


        :param cluster_id: The cluster_id of this IdGetBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def desired_state(self) -> 'V1LightningappInstanceState':
        """Gets the desired_state of this IdGetBody.  # noqa: E501


        :return: The desired_state of this IdGetBody.  # noqa: E501
        :rtype: V1LightningappInstanceState
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state: 'V1LightningappInstanceState'):
        """Sets the desired_state of this IdGetBody.


        :param desired_state: The desired_state of this IdGetBody.  # noqa: E501
        :type: V1LightningappInstanceState
        """

        self._desired_state = desired_state

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this IdGetBody.  # noqa: E501


        :return: The display_name of this IdGetBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this IdGetBody.


        :param display_name: The display_name of this IdGetBody.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self) -> 'str':
        """Gets the domain of this IdGetBody.  # noqa: E501

        User-provided custom domain for the app. Will be generated if not provided.  # noqa: E501

        :return: The domain of this IdGetBody.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: 'str'):
        """Sets the domain of this IdGetBody.

        User-provided custom domain for the app. Will be generated if not provided.  # noqa: E501

        :param domain: The domain of this IdGetBody.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def env(self) -> 'list[V1EnvVar]':
        """Gets the env of this IdGetBody.  # noqa: E501


        :return: The env of this IdGetBody.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env: 'list[V1EnvVar]'):
        """Sets the env of this IdGetBody.


        :param env: The env of this IdGetBody.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def name(self) -> 'str':
        """Gets the name of this IdGetBody.  # noqa: E501


        :return: The name of this IdGetBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this IdGetBody.


        :param name: The name of this IdGetBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def queue_server_type(self) -> 'V1QueueServerType':
        """Gets the queue_server_type of this IdGetBody.  # noqa: E501


        :return: The queue_server_type of this IdGetBody.  # noqa: E501
        :rtype: V1QueueServerType
        """
        return self._queue_server_type

    @queue_server_type.setter
    def queue_server_type(self, queue_server_type: 'V1QueueServerType'):
        """Sets the queue_server_type of this IdGetBody.


        :param queue_server_type: The queue_server_type of this IdGetBody.  # noqa: E501
        :type: V1QueueServerType
        """

        self._queue_server_type = queue_server_type

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdGetBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'IdGetBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, IdGetBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'IdGetBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
