target-version = "py39"
line-length = 79
select = [
    "A", # flake8-builtins
    # "AIR", # airflow
    # "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    # "ASYNC", # flake8-async
    "B", # flake8 bugbear
    # "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    # "COM", # flake8-commas
    # "CPY", # flake8-copyright
    "D", # pydocstyle
    # "DJ", # flake8-django
    "DTZ", # flake8-datetimez
    "E", # pycodestyle, error
    "EM", # flake8-errmsg
    # "ERA", # eradicate
    # "EXE", # flake8-executable
    "F", # pyflakes
    # "FA", # flake8-future-annotations
    "FBT", # flake8-boolean-trap
    # "FIX", # flake8-fixme
    # "FLY", # flynt
    # "FURB", # refurb
    # "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    # "INP", # flake8-no-pep420
    # "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    # "NPY", # NumPy-specific rules
    # "PD", # pandas-vet
    # "PERF", # perflint
    # "PGH", # pygrep-hooks
    # "PIE", # flake8-pie
    # "PL", # pylint
    "PLC", # pylint, convention
    "PLE", # pylint, error
    "PLR", # pylint, refactor
    "PLW", # pylint, warning
    "PT", # flake8-pytest-style
    # "PTH", # flake8-use-pathlib
    # "PYI", # flake8-pyi
    "Q", # flake8-quotes
    # "RET", # flake8-return
    # "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    # "SIM", # flake8-simplify
    # "SLF", # flake8-self
    # "SLOT", # flake8-slots
    "T10", # flake8-debugger
    "T20", # flake8-print
    # "TCH", # flake8-type-checking
    # "TD", # flake8-todos
    "TID", # flake8-tidy-imports
    # "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle, warning
    "YTT", # flake8-2020
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Using numpy docstring convention
    "D107",
    "D203",
    "D212",
    "D213",
    "D402",
    "D413",
    "D415",
    "D416",
    "D417",
    # Do not ask to create circular imports (from package root instead of a
    # module in package)
    "PLR0402",
    # Ignore empty parentheses after `pytest.fixture` decorator
    "PT001",
    # Ignore multiline quote checks (docstring: double, other: single)
    "Q001",
    # Do not demand union as binary OR operator (|)
    "UP007",
    # Allow unnecessary open mode parameters ('r')
    "UP015",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[isort]
known-first-party = ["xbrl_filings_api"]

[flake8-tidy-imports]
ban-relative-imports = "all"

[pydocstyle]
convention = "numpy"

[pycodestyle]
max-doc-length = 72

[per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Package init files have unused imports
"__init__.py" = ["F401"]
# __about__.py does not have a docstring
"__about__.py" = ["D100"]
# Tests allow non-imperative docstrings (D401), mixed case names (N801, N802),
# may leave parameters/fixtures unused due to response mocks (ARG001), and
# decorators unparenthesised (PT023), do not expect docstring imperative mood
# due to fixtures (D401), allow long summary docstrings (D200, D205), allow use
# of naive datetimes in tests (DTZ001), allow mixed case arguments/fixtures
# (N803)
"test_*" = [
    "D401", "N801", "N802", "ARG001", "PT023", "D401", "DTZ001", "D200",
    "D205", "N803"
    ]
"conftest.py" = ["D401", "D200", "D205"]
"conftest_source.py" = ["D401"]
# Allow non-imperative docstrings (D401) and allow print() in scripts (T201),
# allow long summary docstrings for URL mocks (D200, D205)
"mock_upgrade.py" = ["D401", "T201", "D200", "D205"]
# Allow print() in scripts
"examples.py" = ["T201"]
"__main__.py" = ["T201"]
