[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "xbrl-filings-api"
dynamic = ["version"]
description = 'Python API for filings.xbrl.org XBRL report repository.'
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = [
    "XBRL", "ESEF", "JSON", "JSON-API", "IFRS", "annual financial report",
    "AFR", "financial statement", "accounting", "consolidated",
    "consolidation", "structured data", "listed company", "stock exchange",
    "regulated markets", "EU", "European Union", "transparency", "iXBRL",
    "Inline XBRL", "ESMA", "financial analysis", "accounting quality",
    "financial statement analysis", "Extensible Business Reporting Language",
    "European Single Electronic Format",
]
authors = [
    { name = "Lauri Salmela", email = "lauri.m.salmela@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Programming Language :: SQL",
    "Operating System :: OS Independent",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Topic :: File Formats :: JSON",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "requests",
]

[project.urls]
Homepage = "https://github.com/lsalmela/xbrl-filings-api"
Documentation = "https://lsalmela.github.io/xbrl-filings-api"
Source = "https://github.com/lsalmela/xbrl-filings-api"
Issues = "https://github.com/lsalmela/xbrl-filings-api/issues"

[tool.hatch.version]
path = "xbrl_filings_api/__about__.py"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/tests/mock_responses/*",
    "/docs",
]

[tool.hatch.build.targets.wheel]
packages = ["xbrl_filings_api"]

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=7.4",
    "pytest>=7.4",
    # As of pytest_asyncio 0.23.5, it seems not to be possible to get rid of
    # logged warning "DeprecationWarning: There is no current event loop"
    "pytest-asyncio>=0.23.5",
    "responses~=0.23.3", # Using beta features (recorder)
    "pandas>=2.1.4",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "mypy>=1.5.1",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:xbrl_filings_api}"
all = [
    "hatch fmt -l",
    "typing",
]

[tool.hatch.envs.doc]
dependencies = [
    "sphinx>=7.2.6",
    "furo>=2024.1.29",
    "sphinxext-opengraph>=0.9.1",
    "sphinx-copybutton>=0.5.2",
]

[tool.hatch.envs.doc.scripts]
build = "sphinx-build {args} docs/source docs/build"
# Windows-specific
delgen = 'rmdir /s /q "docs\source\api" "docs\source\dev\ref" "docs\build"'
fbuild = [
    "delgen",
    "build",
    ]
linkcheck = [
    "sphinx-build -b linkcheck {args} docs/source docs/build/linkcheck",
    "docs/build/linkcheck/output.txt",
    ]

[tool.coverage.run]
source_pkgs = ["xbrl_filings_api", "tests"]
branch = true
parallel = true
omit = [
    "xbrl_filings_api/__about__.py",
    "tests/conftest_source.py",
    "tests/mock_upgrade.py",
    "tests/urlmock.py",
]

[tool.coverage.paths]
xbrl_filings_api = ["xbrl_filings_api", "*/xbrl-filings-api/xbrl_filings_api"]
tests = ["tests", "*/xbrl-filings-api/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
markers = [
    "sqlite: test has sqlite3 operations",
    "paging: paging a single query",
    "multifilter: multiple queries in the same call",
    "date: processing date objects",
    "datetime: processing datetime objects",
]

[tool.isort]
py_version=39
# Vertical Hanging Indent Bracket
multi_line_output = 8
