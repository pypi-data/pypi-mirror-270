{"version":3,"file":"lib_index_js.d31b135968cc3d787f4f.js","mappings":"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","sources":["webpack://jupyterlab_athena_analytics/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { INotebookTracker, NotebookPanel, Notebook } from '@jupyterlab/notebook';\nimport { ICellModel } from '@jupyterlab/cells';\n\n// Function to handle the event when the notebook content changes\nfunction onNotebookChange(notebook: Notebook): void {\n  if (!notebook.model) {\n    console.error('Notebook model is null');\n    return;\n  }\n  const notebookJSON = notebook.model.toJSON();\n  window.parent.postMessage({\n    type: 'notebookChange',\n    data: notebookJSON\n  }, '*');\n}\n\n// Function to handle the event when the active cell changes\nfunction onActiveCellChange(notebook: Notebook): void {\n  const activeCell = notebook.activeCell;\n  const cellData = activeCell?.model.toJSON();\n  window.parent.postMessage({\n    type: 'activeCellChange',\n    data: cellData\n  }, '*');\n}\n\n// Function to handle changes in any cell's content\nfunction onCellModelChange(cellModel: ICellModel): void {\n  const cellData = cellModel.toJSON();\n  window.parent.postMessage({\n    type: 'cellContentChange',\n    data: cellData\n  }, '*');\n}\n\n// Function to add listeners to each cell in the notebook\nfunction addCellListeners(notebook: Notebook): void {\n  notebook.widgets.forEach(cell => {\n    cell.model.contentChanged.connect(() => onCellModelChange(cell.model));\n  });\n}\n\n// Function to add the event listeners to a notebook panel\nfunction addChangeListener(notebookPanel: NotebookPanel) {\n  // Listen for content changes in the notebook\n  notebookPanel.content.modelContentChanged.connect(() => onNotebookChange(notebookPanel.content));\n  notebookPanel.content.activeCellChanged.connect(() => onActiveCellChange(notebookPanel.content));\n\n  // Add listeners to each cell for content changes\n  addCellListeners(notebookPanel.content);\n\n  if (!notebookPanel?.content?.model) return;\n  // Listen for when new cells are added to the notebook\n  notebookPanel.content.model.cells.changed.connect(() => {\n    addCellListeners(notebookPanel.content);\n  });\n}\n\n/**\n * Initialization data for the jupyterlab_athena_analytics extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab_athena_analytics:plugin',\n  autoStart: true,\n  requires: [INotebookTracker],\n  activate: (app: JupyterFrontEnd, tracker: INotebookTracker) => {\n    console.log(\n      'JupyterLab extension jupyterlab_athena_analytics is activated!'\n    );\n\n    // Add change listener to all currently opened notebooks\n    tracker.forEach((notebookPanel) => {\n      addChangeListener(notebookPanel);\n    });\n\n    // Ensure that change listeners are added to new notebooks as they are opened\n    tracker.widgetAdded.connect((sender, notebookPanel) => {\n      addChangeListener(notebookPanel);\n    });\n\n    // Dynamically inject the PostHog analytics script into the document\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.innerHTML = `!function(t,e){var o,n,p,r;e._SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(\".\");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement(\"script\")).type=\"text/javascript\",p.async=!0,p.src=s.api_host+\"/static/array.js\",(r=t.getElementsByTagName(\"script\")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a=\"posthog\",u.people=u.people||[],u.toString=function(t){var e=\"posthog\";return\"posthog\"!==a&&(e+=\".\"+a),t||(e+=\" (stub)\"),e},u.people.toString=function(){return u.toString(1)+\".people (stub)\"},o=\"capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys onSessionId\".split(\" \"),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e._SV=1)}(document,window.posthog||[]);\n    posthog.init('phc_klucwJxuBrgYuAXGSCOUGnp0qhKeA81OuIFyUngiPGQ',{api_host:'https://app.athenaintelligence.ai/ingest', ui_host: 'https://us.posthog.com', session_recording: { recordCrossOriginIframes: true }})`;\n    document.head.appendChild(script);\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}