# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetAuthorResult',
    'AwaitableGetAuthorResult',
    'get_author',
    'get_author_output',
]

@pulumi.output_type
class GetAuthorResult:
    """
    A collection of values returned by getAuthor.
    """
    def __init__(__self__, author_name=None, foreign_author_id=None, genres=None, id=None, monitored=None, overview=None, path=None, quality_profile_id=None, status=None, tags=None):
        if author_name and not isinstance(author_name, str):
            raise TypeError("Expected argument 'author_name' to be a str")
        pulumi.set(__self__, "author_name", author_name)
        if foreign_author_id and not isinstance(foreign_author_id, str):
            raise TypeError("Expected argument 'foreign_author_id' to be a str")
        pulumi.set(__self__, "foreign_author_id", foreign_author_id)
        if genres and not isinstance(genres, list):
            raise TypeError("Expected argument 'genres' to be a list")
        pulumi.set(__self__, "genres", genres)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if monitored and not isinstance(monitored, bool):
            raise TypeError("Expected argument 'monitored' to be a bool")
        pulumi.set(__self__, "monitored", monitored)
        if overview and not isinstance(overview, str):
            raise TypeError("Expected argument 'overview' to be a str")
        pulumi.set(__self__, "overview", overview)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if quality_profile_id and not isinstance(quality_profile_id, int):
            raise TypeError("Expected argument 'quality_profile_id' to be a int")
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authorName")
    def author_name(self) -> str:
        """
        Author name.
        """
        return pulumi.get(self, "author_name")

    @property
    @pulumi.getter(name="foreignAuthorId")
    def foreign_author_id(self) -> str:
        """
        Foreign author ID.
        """
        return pulumi.get(self, "foreign_author_id")

    @property
    @pulumi.getter
    def genres(self) -> Sequence[str]:
        """
        List genres.
        """
        return pulumi.get(self, "genres")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Author ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monitored(self) -> bool:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @property
    @pulumi.getter
    def overview(self) -> str:
        """
        Overview.
        """
        return pulumi.get(self, "overview")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Full author path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Author status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetAuthorResult(GetAuthorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorResult(
            author_name=self.author_name,
            foreign_author_id=self.foreign_author_id,
            genres=self.genres,
            id=self.id,
            monitored=self.monitored,
            overview=self.overview,
            path=self.path,
            quality_profile_id=self.quality_profile_id,
            status=self.status,
            tags=self.tags)


def get_author(foreign_author_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorResult:
    """
    <!-- subcategory:Authors -->Single Author.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_readarr as readarr

    example = readarr.Authors.get_author(foreign_author_id="123715")
    ```


    :param str foreign_author_id: Foreign author ID.
    """
    __args__ = dict()
    __args__['foreignAuthorId'] = foreign_author_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('readarr:Authors/getAuthor:getAuthor', __args__, opts=opts, typ=GetAuthorResult).value

    return AwaitableGetAuthorResult(
        author_name=pulumi.get(__ret__, 'author_name'),
        foreign_author_id=pulumi.get(__ret__, 'foreign_author_id'),
        genres=pulumi.get(__ret__, 'genres'),
        id=pulumi.get(__ret__, 'id'),
        monitored=pulumi.get(__ret__, 'monitored'),
        overview=pulumi.get(__ret__, 'overview'),
        path=pulumi.get(__ret__, 'path'),
        quality_profile_id=pulumi.get(__ret__, 'quality_profile_id'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_author)
def get_author_output(foreign_author_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthorResult]:
    """
    <!-- subcategory:Authors -->Single Author.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_readarr as readarr

    example = readarr.Authors.get_author(foreign_author_id="123715")
    ```


    :param str foreign_author_id: Foreign author ID.
    """
    ...
