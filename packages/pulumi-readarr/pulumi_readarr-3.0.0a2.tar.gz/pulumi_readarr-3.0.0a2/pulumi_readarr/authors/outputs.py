# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetAuthorsAuthorResult',
]

@pulumi.output_type
class GetAuthorsAuthorResult(dict):
    def __init__(__self__, *,
                 author_name: str,
                 foreign_author_id: str,
                 genres: Sequence[str],
                 id: int,
                 monitored: bool,
                 overview: str,
                 path: str,
                 quality_profile_id: int,
                 status: str,
                 tags: Sequence[int]):
        """
        :param str author_name: Author name.
        :param str foreign_author_id: Foreign author ID.
        :param Sequence[str] genres: List genres.
        :param int id: Author ID.
        :param bool monitored: Monitored flag.
        :param str overview: Overview.
        :param str path: Full author path.
        :param int quality_profile_id: Quality profile ID.
        :param str status: Author status.
        :param Sequence[int] tags: List of associated tags.
        """
        pulumi.set(__self__, "author_name", author_name)
        pulumi.set(__self__, "foreign_author_id", foreign_author_id)
        pulumi.set(__self__, "genres", genres)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monitored", monitored)
        pulumi.set(__self__, "overview", overview)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authorName")
    def author_name(self) -> str:
        """
        Author name.
        """
        return pulumi.get(self, "author_name")

    @property
    @pulumi.getter(name="foreignAuthorId")
    def foreign_author_id(self) -> str:
        """
        Foreign author ID.
        """
        return pulumi.get(self, "foreign_author_id")

    @property
    @pulumi.getter
    def genres(self) -> Sequence[str]:
        """
        List genres.
        """
        return pulumi.get(self, "genres")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Author ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monitored(self) -> bool:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @property
    @pulumi.getter
    def overview(self) -> str:
        """
        Overview.
        """
        return pulumi.get(self, "overview")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Full author path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Author status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


