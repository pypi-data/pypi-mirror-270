# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ProfileArgs', 'Profile']

@pulumi.input_type
class ProfileArgs:
    def __init__(__self__, *,
                 allowed_languages: Optional[pulumi.Input[str]] = None,
                 ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 min_pages: Optional[pulumi.Input[int]] = None,
                 min_popularity: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 skip_missing_date: Optional[pulumi.Input[bool]] = None,
                 skip_missing_isbn: Optional[pulumi.Input[bool]] = None,
                 skip_parts_and_sets: Optional[pulumi.Input[bool]] = None,
                 skip_series_secondary: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Profile resource.
        :param pulumi.Input[str] allowed_languages: Allowed languages. Comma separated list of ISO 639-3 language codes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignoreds: Terms to ignore.
        :param pulumi.Input[int] min_pages: Minimum pages.
        :param pulumi.Input[float] min_popularity: Minimum popularity.
        :param pulumi.Input[str] name: Metadata Profile name.
        :param pulumi.Input[bool] skip_missing_date: Skip missing date.
        :param pulumi.Input[bool] skip_missing_isbn: Skip missing ISBN.
        :param pulumi.Input[bool] skip_parts_and_sets: Skip parts and sets.
        :param pulumi.Input[bool] skip_series_secondary: Skip secondary series books.
        """
        if allowed_languages is not None:
            pulumi.set(__self__, "allowed_languages", allowed_languages)
        if ignoreds is not None:
            pulumi.set(__self__, "ignoreds", ignoreds)
        if min_pages is not None:
            pulumi.set(__self__, "min_pages", min_pages)
        if min_popularity is not None:
            pulumi.set(__self__, "min_popularity", min_popularity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if skip_missing_date is not None:
            pulumi.set(__self__, "skip_missing_date", skip_missing_date)
        if skip_missing_isbn is not None:
            pulumi.set(__self__, "skip_missing_isbn", skip_missing_isbn)
        if skip_parts_and_sets is not None:
            pulumi.set(__self__, "skip_parts_and_sets", skip_parts_and_sets)
        if skip_series_secondary is not None:
            pulumi.set(__self__, "skip_series_secondary", skip_series_secondary)

    @property
    @pulumi.getter(name="allowedLanguages")
    def allowed_languages(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed languages. Comma separated list of ISO 639-3 language codes.
        """
        return pulumi.get(self, "allowed_languages")

    @allowed_languages.setter
    def allowed_languages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_languages", value)

    @property
    @pulumi.getter
    def ignoreds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Terms to ignore.
        """
        return pulumi.get(self, "ignoreds")

    @ignoreds.setter
    def ignoreds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignoreds", value)

    @property
    @pulumi.getter(name="minPages")
    def min_pages(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum pages.
        """
        return pulumi.get(self, "min_pages")

    @min_pages.setter
    def min_pages(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_pages", value)

    @property
    @pulumi.getter(name="minPopularity")
    def min_popularity(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum popularity.
        """
        return pulumi.get(self, "min_popularity")

    @min_popularity.setter
    def min_popularity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_popularity", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Metadata Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="skipMissingDate")
    def skip_missing_date(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip missing date.
        """
        return pulumi.get(self, "skip_missing_date")

    @skip_missing_date.setter
    def skip_missing_date(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_missing_date", value)

    @property
    @pulumi.getter(name="skipMissingIsbn")
    def skip_missing_isbn(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip missing ISBN.
        """
        return pulumi.get(self, "skip_missing_isbn")

    @skip_missing_isbn.setter
    def skip_missing_isbn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_missing_isbn", value)

    @property
    @pulumi.getter(name="skipPartsAndSets")
    def skip_parts_and_sets(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip parts and sets.
        """
        return pulumi.get(self, "skip_parts_and_sets")

    @skip_parts_and_sets.setter
    def skip_parts_and_sets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_parts_and_sets", value)

    @property
    @pulumi.getter(name="skipSeriesSecondary")
    def skip_series_secondary(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip secondary series books.
        """
        return pulumi.get(self, "skip_series_secondary")

    @skip_series_secondary.setter
    def skip_series_secondary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_series_secondary", value)


@pulumi.input_type
class _ProfileState:
    def __init__(__self__, *,
                 allowed_languages: Optional[pulumi.Input[str]] = None,
                 ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 min_pages: Optional[pulumi.Input[int]] = None,
                 min_popularity: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 skip_missing_date: Optional[pulumi.Input[bool]] = None,
                 skip_missing_isbn: Optional[pulumi.Input[bool]] = None,
                 skip_parts_and_sets: Optional[pulumi.Input[bool]] = None,
                 skip_series_secondary: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Profile resources.
        :param pulumi.Input[str] allowed_languages: Allowed languages. Comma separated list of ISO 639-3 language codes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignoreds: Terms to ignore.
        :param pulumi.Input[int] min_pages: Minimum pages.
        :param pulumi.Input[float] min_popularity: Minimum popularity.
        :param pulumi.Input[str] name: Metadata Profile name.
        :param pulumi.Input[bool] skip_missing_date: Skip missing date.
        :param pulumi.Input[bool] skip_missing_isbn: Skip missing ISBN.
        :param pulumi.Input[bool] skip_parts_and_sets: Skip parts and sets.
        :param pulumi.Input[bool] skip_series_secondary: Skip secondary series books.
        """
        if allowed_languages is not None:
            pulumi.set(__self__, "allowed_languages", allowed_languages)
        if ignoreds is not None:
            pulumi.set(__self__, "ignoreds", ignoreds)
        if min_pages is not None:
            pulumi.set(__self__, "min_pages", min_pages)
        if min_popularity is not None:
            pulumi.set(__self__, "min_popularity", min_popularity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if skip_missing_date is not None:
            pulumi.set(__self__, "skip_missing_date", skip_missing_date)
        if skip_missing_isbn is not None:
            pulumi.set(__self__, "skip_missing_isbn", skip_missing_isbn)
        if skip_parts_and_sets is not None:
            pulumi.set(__self__, "skip_parts_and_sets", skip_parts_and_sets)
        if skip_series_secondary is not None:
            pulumi.set(__self__, "skip_series_secondary", skip_series_secondary)

    @property
    @pulumi.getter(name="allowedLanguages")
    def allowed_languages(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed languages. Comma separated list of ISO 639-3 language codes.
        """
        return pulumi.get(self, "allowed_languages")

    @allowed_languages.setter
    def allowed_languages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_languages", value)

    @property
    @pulumi.getter
    def ignoreds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Terms to ignore.
        """
        return pulumi.get(self, "ignoreds")

    @ignoreds.setter
    def ignoreds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignoreds", value)

    @property
    @pulumi.getter(name="minPages")
    def min_pages(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum pages.
        """
        return pulumi.get(self, "min_pages")

    @min_pages.setter
    def min_pages(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_pages", value)

    @property
    @pulumi.getter(name="minPopularity")
    def min_popularity(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum popularity.
        """
        return pulumi.get(self, "min_popularity")

    @min_popularity.setter
    def min_popularity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_popularity", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Metadata Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="skipMissingDate")
    def skip_missing_date(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip missing date.
        """
        return pulumi.get(self, "skip_missing_date")

    @skip_missing_date.setter
    def skip_missing_date(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_missing_date", value)

    @property
    @pulumi.getter(name="skipMissingIsbn")
    def skip_missing_isbn(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip missing ISBN.
        """
        return pulumi.get(self, "skip_missing_isbn")

    @skip_missing_isbn.setter
    def skip_missing_isbn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_missing_isbn", value)

    @property
    @pulumi.getter(name="skipPartsAndSets")
    def skip_parts_and_sets(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip parts and sets.
        """
        return pulumi.get(self, "skip_parts_and_sets")

    @skip_parts_and_sets.setter
    def skip_parts_and_sets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_parts_and_sets", value)

    @property
    @pulumi.getter(name="skipSeriesSecondary")
    def skip_series_secondary(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip secondary series books.
        """
        return pulumi.get(self, "skip_series_secondary")

    @skip_series_secondary.setter
    def skip_series_secondary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_series_secondary", value)


class Profile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_languages: Optional[pulumi.Input[str]] = None,
                 ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 min_pages: Optional[pulumi.Input[int]] = None,
                 min_popularity: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 skip_missing_date: Optional[pulumi.Input[bool]] = None,
                 skip_missing_isbn: Optional[pulumi.Input[bool]] = None,
                 skip_parts_and_sets: Optional[pulumi.Input[bool]] = None,
                 skip_series_secondary: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        <!-- subcategory:Profiles -->Metadata Profile resource.
        For more information refer to [Metadata Profile](https://wiki.servarr.com/readarr/settings#metadata-profiles) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_readarr as readarr

        example = readarr.metadata.Profile("example",
            allowed_languages="eng,ita",
            ignoreds=[
                "alpha",
                "beta",
            ],
            min_pages=10,
            min_popularity=3.5,
            skip_missing_date=False,
            skip_missing_isbn=True,
            skip_parts_and_sets=False,
            skip_series_secondary=False)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import readarr:Metadata/profile:Profile example 10
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allowed_languages: Allowed languages. Comma separated list of ISO 639-3 language codes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignoreds: Terms to ignore.
        :param pulumi.Input[int] min_pages: Minimum pages.
        :param pulumi.Input[float] min_popularity: Minimum popularity.
        :param pulumi.Input[str] name: Metadata Profile name.
        :param pulumi.Input[bool] skip_missing_date: Skip missing date.
        :param pulumi.Input[bool] skip_missing_isbn: Skip missing ISBN.
        :param pulumi.Input[bool] skip_parts_and_sets: Skip parts and sets.
        :param pulumi.Input[bool] skip_series_secondary: Skip secondary series books.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Profiles -->Metadata Profile resource.
        For more information refer to [Metadata Profile](https://wiki.servarr.com/readarr/settings#metadata-profiles) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_readarr as readarr

        example = readarr.metadata.Profile("example",
            allowed_languages="eng,ita",
            ignoreds=[
                "alpha",
                "beta",
            ],
            min_pages=10,
            min_popularity=3.5,
            skip_missing_date=False,
            skip_missing_isbn=True,
            skip_parts_and_sets=False,
            skip_series_secondary=False)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import readarr:Metadata/profile:Profile example 10
        ```

        :param str resource_name: The name of the resource.
        :param ProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_languages: Optional[pulumi.Input[str]] = None,
                 ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 min_pages: Optional[pulumi.Input[int]] = None,
                 min_popularity: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 skip_missing_date: Optional[pulumi.Input[bool]] = None,
                 skip_missing_isbn: Optional[pulumi.Input[bool]] = None,
                 skip_parts_and_sets: Optional[pulumi.Input[bool]] = None,
                 skip_series_secondary: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProfileArgs.__new__(ProfileArgs)

            __props__.__dict__["allowed_languages"] = allowed_languages
            __props__.__dict__["ignoreds"] = ignoreds
            __props__.__dict__["min_pages"] = min_pages
            __props__.__dict__["min_popularity"] = min_popularity
            __props__.__dict__["name"] = name
            __props__.__dict__["skip_missing_date"] = skip_missing_date
            __props__.__dict__["skip_missing_isbn"] = skip_missing_isbn
            __props__.__dict__["skip_parts_and_sets"] = skip_parts_and_sets
            __props__.__dict__["skip_series_secondary"] = skip_series_secondary
        super(Profile, __self__).__init__(
            'readarr:Metadata/profile:Profile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_languages: Optional[pulumi.Input[str]] = None,
            ignoreds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            min_pages: Optional[pulumi.Input[int]] = None,
            min_popularity: Optional[pulumi.Input[float]] = None,
            name: Optional[pulumi.Input[str]] = None,
            skip_missing_date: Optional[pulumi.Input[bool]] = None,
            skip_missing_isbn: Optional[pulumi.Input[bool]] = None,
            skip_parts_and_sets: Optional[pulumi.Input[bool]] = None,
            skip_series_secondary: Optional[pulumi.Input[bool]] = None) -> 'Profile':
        """
        Get an existing Profile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allowed_languages: Allowed languages. Comma separated list of ISO 639-3 language codes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignoreds: Terms to ignore.
        :param pulumi.Input[int] min_pages: Minimum pages.
        :param pulumi.Input[float] min_popularity: Minimum popularity.
        :param pulumi.Input[str] name: Metadata Profile name.
        :param pulumi.Input[bool] skip_missing_date: Skip missing date.
        :param pulumi.Input[bool] skip_missing_isbn: Skip missing ISBN.
        :param pulumi.Input[bool] skip_parts_and_sets: Skip parts and sets.
        :param pulumi.Input[bool] skip_series_secondary: Skip secondary series books.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProfileState.__new__(_ProfileState)

        __props__.__dict__["allowed_languages"] = allowed_languages
        __props__.__dict__["ignoreds"] = ignoreds
        __props__.__dict__["min_pages"] = min_pages
        __props__.__dict__["min_popularity"] = min_popularity
        __props__.__dict__["name"] = name
        __props__.__dict__["skip_missing_date"] = skip_missing_date
        __props__.__dict__["skip_missing_isbn"] = skip_missing_isbn
        __props__.__dict__["skip_parts_and_sets"] = skip_parts_and_sets
        __props__.__dict__["skip_series_secondary"] = skip_series_secondary
        return Profile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowedLanguages")
    def allowed_languages(self) -> pulumi.Output[str]:
        """
        Allowed languages. Comma separated list of ISO 639-3 language codes.
        """
        return pulumi.get(self, "allowed_languages")

    @property
    @pulumi.getter
    def ignoreds(self) -> pulumi.Output[Sequence[str]]:
        """
        Terms to ignore.
        """
        return pulumi.get(self, "ignoreds")

    @property
    @pulumi.getter(name="minPages")
    def min_pages(self) -> pulumi.Output[int]:
        """
        Minimum pages.
        """
        return pulumi.get(self, "min_pages")

    @property
    @pulumi.getter(name="minPopularity")
    def min_popularity(self) -> pulumi.Output[float]:
        """
        Minimum popularity.
        """
        return pulumi.get(self, "min_popularity")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Metadata Profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="skipMissingDate")
    def skip_missing_date(self) -> pulumi.Output[bool]:
        """
        Skip missing date.
        """
        return pulumi.get(self, "skip_missing_date")

    @property
    @pulumi.getter(name="skipMissingIsbn")
    def skip_missing_isbn(self) -> pulumi.Output[bool]:
        """
        Skip missing ISBN.
        """
        return pulumi.get(self, "skip_missing_isbn")

    @property
    @pulumi.getter(name="skipPartsAndSets")
    def skip_parts_and_sets(self) -> pulumi.Output[bool]:
        """
        Skip parts and sets.
        """
        return pulumi.get(self, "skip_parts_and_sets")

    @property
    @pulumi.getter(name="skipSeriesSecondary")
    def skip_series_secondary(self) -> pulumi.Output[bool]:
        """
        Skip secondary series books.
        """
        return pulumi.get(self, "skip_series_secondary")

