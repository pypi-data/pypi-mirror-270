# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetNotificationResult',
    'AwaitableGetNotificationResult',
    'get_notification',
    'get_notification_output',
]

@pulumi.output_type
class GetNotificationResult:
    """
    A collection of values returned by getNotification.
    """
    def __init__(__self__, access_token=None, access_token_secret=None, add_ids=None, api_key=None, app_token=None, arguments=None, attach_files=None, auth_user=None, author=None, avatar=None, bccs=None, bot_token=None, ccs=None, channel=None, channel_tags=None, chat_id=None, click_url=None, condition=None, config_contract=None, consumer_key=None, consumer_secret=None, description=None, device_ids=None, device_names=None, devices=None, direct_message=None, event=None, expire=None, field_tags=None, from_=None, grab_fields=None, host=None, icon=None, id=None, implementation=None, import_fields=None, include_health_warnings=None, instance_name=None, key=None, location=None, map_from=None, map_to=None, mention=None, method=None, name=None, notify=None, on_application_update=None, on_author_delete=None, on_book_delete=None, on_book_file_delete=None, on_book_file_delete_for_upgrade=None, on_book_retag=None, on_download_failure=None, on_grab=None, on_health_issue=None, on_import_failure=None, on_release_import=None, on_rename=None, on_upgrade=None, password=None, path=None, port=None, priority=None, recipients=None, refresh_token=None, remove_ids=None, request_token_secret=None, require_encryption=None, retry=None, send_silently=None, sender_domain=None, sender_id=None, server=None, server_url=None, sign_in=None, sound=None, tags=None, token=None, topics=None, tos=None, update_library=None, url=None, url_base=None, use_eu_endpoint=None, use_ssl=None, user_id=None, user_key=None, username=None, web_hook_url=None):
        if access_token and not isinstance(access_token, str):
            raise TypeError("Expected argument 'access_token' to be a str")
        pulumi.set(__self__, "access_token", access_token)
        if access_token_secret and not isinstance(access_token_secret, str):
            raise TypeError("Expected argument 'access_token_secret' to be a str")
        pulumi.set(__self__, "access_token_secret", access_token_secret)
        if add_ids and not isinstance(add_ids, list):
            raise TypeError("Expected argument 'add_ids' to be a list")
        pulumi.set(__self__, "add_ids", add_ids)
        if api_key and not isinstance(api_key, str):
            raise TypeError("Expected argument 'api_key' to be a str")
        pulumi.set(__self__, "api_key", api_key)
        if app_token and not isinstance(app_token, str):
            raise TypeError("Expected argument 'app_token' to be a str")
        pulumi.set(__self__, "app_token", app_token)
        if arguments and not isinstance(arguments, str):
            raise TypeError("Expected argument 'arguments' to be a str")
        pulumi.set(__self__, "arguments", arguments)
        if attach_files and not isinstance(attach_files, bool):
            raise TypeError("Expected argument 'attach_files' to be a bool")
        pulumi.set(__self__, "attach_files", attach_files)
        if auth_user and not isinstance(auth_user, str):
            raise TypeError("Expected argument 'auth_user' to be a str")
        pulumi.set(__self__, "auth_user", auth_user)
        if author and not isinstance(author, str):
            raise TypeError("Expected argument 'author' to be a str")
        pulumi.set(__self__, "author", author)
        if avatar and not isinstance(avatar, str):
            raise TypeError("Expected argument 'avatar' to be a str")
        pulumi.set(__self__, "avatar", avatar)
        if bccs and not isinstance(bccs, list):
            raise TypeError("Expected argument 'bccs' to be a list")
        pulumi.set(__self__, "bccs", bccs)
        if bot_token and not isinstance(bot_token, str):
            raise TypeError("Expected argument 'bot_token' to be a str")
        pulumi.set(__self__, "bot_token", bot_token)
        if ccs and not isinstance(ccs, list):
            raise TypeError("Expected argument 'ccs' to be a list")
        pulumi.set(__self__, "ccs", ccs)
        if channel and not isinstance(channel, str):
            raise TypeError("Expected argument 'channel' to be a str")
        pulumi.set(__self__, "channel", channel)
        if channel_tags and not isinstance(channel_tags, list):
            raise TypeError("Expected argument 'channel_tags' to be a list")
        pulumi.set(__self__, "channel_tags", channel_tags)
        if chat_id and not isinstance(chat_id, str):
            raise TypeError("Expected argument 'chat_id' to be a str")
        pulumi.set(__self__, "chat_id", chat_id)
        if click_url and not isinstance(click_url, str):
            raise TypeError("Expected argument 'click_url' to be a str")
        pulumi.set(__self__, "click_url", click_url)
        if condition and not isinstance(condition, int):
            raise TypeError("Expected argument 'condition' to be a int")
        pulumi.set(__self__, "condition", condition)
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if consumer_key and not isinstance(consumer_key, str):
            raise TypeError("Expected argument 'consumer_key' to be a str")
        pulumi.set(__self__, "consumer_key", consumer_key)
        if consumer_secret and not isinstance(consumer_secret, str):
            raise TypeError("Expected argument 'consumer_secret' to be a str")
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_ids and not isinstance(device_ids, list):
            raise TypeError("Expected argument 'device_ids' to be a list")
        pulumi.set(__self__, "device_ids", device_ids)
        if device_names and not isinstance(device_names, str):
            raise TypeError("Expected argument 'device_names' to be a str")
        pulumi.set(__self__, "device_names", device_names)
        if devices and not isinstance(devices, list):
            raise TypeError("Expected argument 'devices' to be a list")
        pulumi.set(__self__, "devices", devices)
        if direct_message and not isinstance(direct_message, bool):
            raise TypeError("Expected argument 'direct_message' to be a bool")
        pulumi.set(__self__, "direct_message", direct_message)
        if event and not isinstance(event, str):
            raise TypeError("Expected argument 'event' to be a str")
        pulumi.set(__self__, "event", event)
        if expire and not isinstance(expire, int):
            raise TypeError("Expected argument 'expire' to be a int")
        pulumi.set(__self__, "expire", expire)
        if field_tags and not isinstance(field_tags, list):
            raise TypeError("Expected argument 'field_tags' to be a list")
        pulumi.set(__self__, "field_tags", field_tags)
        if from_ and not isinstance(from_, str):
            raise TypeError("Expected argument 'from_' to be a str")
        pulumi.set(__self__, "from_", from_)
        if grab_fields and not isinstance(grab_fields, int):
            raise TypeError("Expected argument 'grab_fields' to be a int")
        pulumi.set(__self__, "grab_fields", grab_fields)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if icon and not isinstance(icon, str):
            raise TypeError("Expected argument 'icon' to be a str")
        pulumi.set(__self__, "icon", icon)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if import_fields and not isinstance(import_fields, int):
            raise TypeError("Expected argument 'import_fields' to be a int")
        pulumi.set(__self__, "import_fields", import_fields)
        if include_health_warnings and not isinstance(include_health_warnings, bool):
            raise TypeError("Expected argument 'include_health_warnings' to be a bool")
        pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if map_from and not isinstance(map_from, str):
            raise TypeError("Expected argument 'map_from' to be a str")
        pulumi.set(__self__, "map_from", map_from)
        if map_to and not isinstance(map_to, str):
            raise TypeError("Expected argument 'map_to' to be a str")
        pulumi.set(__self__, "map_to", map_to)
        if mention and not isinstance(mention, str):
            raise TypeError("Expected argument 'mention' to be a str")
        pulumi.set(__self__, "mention", mention)
        if method and not isinstance(method, int):
            raise TypeError("Expected argument 'method' to be a int")
        pulumi.set(__self__, "method", method)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notify and not isinstance(notify, bool):
            raise TypeError("Expected argument 'notify' to be a bool")
        pulumi.set(__self__, "notify", notify)
        if on_application_update and not isinstance(on_application_update, bool):
            raise TypeError("Expected argument 'on_application_update' to be a bool")
        pulumi.set(__self__, "on_application_update", on_application_update)
        if on_author_delete and not isinstance(on_author_delete, bool):
            raise TypeError("Expected argument 'on_author_delete' to be a bool")
        pulumi.set(__self__, "on_author_delete", on_author_delete)
        if on_book_delete and not isinstance(on_book_delete, bool):
            raise TypeError("Expected argument 'on_book_delete' to be a bool")
        pulumi.set(__self__, "on_book_delete", on_book_delete)
        if on_book_file_delete and not isinstance(on_book_file_delete, bool):
            raise TypeError("Expected argument 'on_book_file_delete' to be a bool")
        pulumi.set(__self__, "on_book_file_delete", on_book_file_delete)
        if on_book_file_delete_for_upgrade and not isinstance(on_book_file_delete_for_upgrade, bool):
            raise TypeError("Expected argument 'on_book_file_delete_for_upgrade' to be a bool")
        pulumi.set(__self__, "on_book_file_delete_for_upgrade", on_book_file_delete_for_upgrade)
        if on_book_retag and not isinstance(on_book_retag, bool):
            raise TypeError("Expected argument 'on_book_retag' to be a bool")
        pulumi.set(__self__, "on_book_retag", on_book_retag)
        if on_download_failure and not isinstance(on_download_failure, bool):
            raise TypeError("Expected argument 'on_download_failure' to be a bool")
        pulumi.set(__self__, "on_download_failure", on_download_failure)
        if on_grab and not isinstance(on_grab, bool):
            raise TypeError("Expected argument 'on_grab' to be a bool")
        pulumi.set(__self__, "on_grab", on_grab)
        if on_health_issue and not isinstance(on_health_issue, bool):
            raise TypeError("Expected argument 'on_health_issue' to be a bool")
        pulumi.set(__self__, "on_health_issue", on_health_issue)
        if on_import_failure and not isinstance(on_import_failure, bool):
            raise TypeError("Expected argument 'on_import_failure' to be a bool")
        pulumi.set(__self__, "on_import_failure", on_import_failure)
        if on_release_import and not isinstance(on_release_import, bool):
            raise TypeError("Expected argument 'on_release_import' to be a bool")
        pulumi.set(__self__, "on_release_import", on_release_import)
        if on_rename and not isinstance(on_rename, bool):
            raise TypeError("Expected argument 'on_rename' to be a bool")
        pulumi.set(__self__, "on_rename", on_rename)
        if on_upgrade and not isinstance(on_upgrade, bool):
            raise TypeError("Expected argument 'on_upgrade' to be a bool")
        pulumi.set(__self__, "on_upgrade", on_upgrade)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if recipients and not isinstance(recipients, list):
            raise TypeError("Expected argument 'recipients' to be a list")
        pulumi.set(__self__, "recipients", recipients)
        if refresh_token and not isinstance(refresh_token, str):
            raise TypeError("Expected argument 'refresh_token' to be a str")
        pulumi.set(__self__, "refresh_token", refresh_token)
        if remove_ids and not isinstance(remove_ids, list):
            raise TypeError("Expected argument 'remove_ids' to be a list")
        pulumi.set(__self__, "remove_ids", remove_ids)
        if request_token_secret and not isinstance(request_token_secret, str):
            raise TypeError("Expected argument 'request_token_secret' to be a str")
        pulumi.set(__self__, "request_token_secret", request_token_secret)
        if require_encryption and not isinstance(require_encryption, bool):
            raise TypeError("Expected argument 'require_encryption' to be a bool")
        pulumi.set(__self__, "require_encryption", require_encryption)
        if retry and not isinstance(retry, int):
            raise TypeError("Expected argument 'retry' to be a int")
        pulumi.set(__self__, "retry", retry)
        if send_silently and not isinstance(send_silently, bool):
            raise TypeError("Expected argument 'send_silently' to be a bool")
        pulumi.set(__self__, "send_silently", send_silently)
        if sender_domain and not isinstance(sender_domain, str):
            raise TypeError("Expected argument 'sender_domain' to be a str")
        pulumi.set(__self__, "sender_domain", sender_domain)
        if sender_id and not isinstance(sender_id, str):
            raise TypeError("Expected argument 'sender_id' to be a str")
        pulumi.set(__self__, "sender_id", sender_id)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)
        if server_url and not isinstance(server_url, str):
            raise TypeError("Expected argument 'server_url' to be a str")
        pulumi.set(__self__, "server_url", server_url)
        if sign_in and not isinstance(sign_in, str):
            raise TypeError("Expected argument 'sign_in' to be a str")
        pulumi.set(__self__, "sign_in", sign_in)
        if sound and not isinstance(sound, str):
            raise TypeError("Expected argument 'sound' to be a str")
        pulumi.set(__self__, "sound", sound)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if topics and not isinstance(topics, list):
            raise TypeError("Expected argument 'topics' to be a list")
        pulumi.set(__self__, "topics", topics)
        if tos and not isinstance(tos, list):
            raise TypeError("Expected argument 'tos' to be a list")
        pulumi.set(__self__, "tos", tos)
        if update_library and not isinstance(update_library, bool):
            raise TypeError("Expected argument 'update_library' to be a bool")
        pulumi.set(__self__, "update_library", update_library)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if url_base and not isinstance(url_base, str):
            raise TypeError("Expected argument 'url_base' to be a str")
        pulumi.set(__self__, "url_base", url_base)
        if use_eu_endpoint and not isinstance(use_eu_endpoint, bool):
            raise TypeError("Expected argument 'use_eu_endpoint' to be a bool")
        pulumi.set(__self__, "use_eu_endpoint", use_eu_endpoint)
        if use_ssl and not isinstance(use_ssl, bool):
            raise TypeError("Expected argument 'use_ssl' to be a bool")
        pulumi.set(__self__, "use_ssl", use_ssl)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if user_key and not isinstance(user_key, str):
            raise TypeError("Expected argument 'user_key' to be a str")
        pulumi.set(__self__, "user_key", user_key)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if web_hook_url and not isinstance(web_hook_url, str):
            raise TypeError("Expected argument 'web_hook_url' to be a str")
        pulumi.set(__self__, "web_hook_url", web_hook_url)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accessTokenSecret")
    def access_token_secret(self) -> str:
        """
        Access token secret.
        """
        return pulumi.get(self, "access_token_secret")

    @property
    @pulumi.getter(name="addIds")
    def add_ids(self) -> Sequence[str]:
        """
        Add IDs.
        """
        return pulumi.get(self, "add_ids")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> str:
        """
        App token.
        """
        return pulumi.get(self, "app_token")

    @property
    @pulumi.getter
    def arguments(self) -> str:
        """
        Arguments.
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="attachFiles")
    def attach_files(self) -> bool:
        """
        Attach files flag.
        """
        return pulumi.get(self, "attach_files")

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> str:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        Author.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def avatar(self) -> str:
        """
        Avatar.
        """
        return pulumi.get(self, "avatar")

    @property
    @pulumi.getter
    def bccs(self) -> Sequence[str]:
        """
        Bcc.
        """
        return pulumi.get(self, "bccs")

    @property
    @pulumi.getter(name="botToken")
    def bot_token(self) -> str:
        """
        Bot token.
        """
        return pulumi.get(self, "bot_token")

    @property
    @pulumi.getter
    def ccs(self) -> Sequence[str]:
        """
        Cc.
        """
        return pulumi.get(self, "ccs")

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        Channel.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelTags")
    def channel_tags(self) -> Sequence[str]:
        """
        Channel tags.
        """
        return pulumi.get(self, "channel_tags")

    @property
    @pulumi.getter(name="chatId")
    def chat_id(self) -> str:
        """
        Chat ID.
        """
        return pulumi.get(self, "chat_id")

    @property
    @pulumi.getter(name="clickUrl")
    def click_url(self) -> str:
        """
        Click URL.
        """
        return pulumi.get(self, "click_url")

    @property
    @pulumi.getter
    def condition(self) -> int:
        """
        Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Notification configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        """
        Consumer key.
        """
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        """
        Consumer secret.
        """
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Condition description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> Sequence[str]:
        """
        Device IDs.
        """
        return pulumi.get(self, "device_ids")

    @property
    @pulumi.getter(name="deviceNames")
    def device_names(self) -> str:
        """
        Device names.
        """
        return pulumi.get(self, "device_names")

    @property
    @pulumi.getter
    def devices(self) -> Sequence[str]:
        """
        Devices.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="directMessage")
    def direct_message(self) -> bool:
        """
        Direct message flag.
        """
        return pulumi.get(self, "direct_message")

    @property
    @pulumi.getter
    def event(self) -> str:
        """
        Event.
        """
        return pulumi.get(self, "event")

    @property
    @pulumi.getter
    def expire(self) -> int:
        """
        Expire.
        """
        return pulumi.get(self, "expire")

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Sequence[str]:
        """
        Devices.
        """
        return pulumi.get(self, "field_tags")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        From.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="grabFields")
    def grab_fields(self) -> int:
        """
        Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.
        """
        return pulumi.get(self, "grab_fields")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def icon(self) -> str:
        """
        Icon.
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Notification ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Notification implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="importFields")
    def import_fields(self) -> int:
        """
        Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        """
        return pulumi.get(self, "import_fields")

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> bool:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Purchase location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="mapFrom")
    def map_from(self) -> str:
        """
        Map From.
        """
        return pulumi.get(self, "map_from")

    @property
    @pulumi.getter(name="mapTo")
    def map_to(self) -> str:
        """
        Map To.
        """
        return pulumi.get(self, "map_to")

    @property
    @pulumi.getter
    def mention(self) -> str:
        """
        Mention.
        """
        return pulumi.get(self, "mention")

    @property
    @pulumi.getter
    def method(self) -> int:
        """
        Method. `1` POST, `2` PUT.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Notification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notify(self) -> bool:
        """
        Notify flag.
        """
        return pulumi.get(self, "notify")

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> bool:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @property
    @pulumi.getter(name="onAuthorDelete")
    def on_author_delete(self) -> bool:
        """
        On author deleted flag.
        """
        return pulumi.get(self, "on_author_delete")

    @property
    @pulumi.getter(name="onBookDelete")
    def on_book_delete(self) -> bool:
        """
        On book delete flag.
        """
        return pulumi.get(self, "on_book_delete")

    @property
    @pulumi.getter(name="onBookFileDelete")
    def on_book_file_delete(self) -> bool:
        """
        On book file delete flag.
        """
        return pulumi.get(self, "on_book_file_delete")

    @property
    @pulumi.getter(name="onBookFileDeleteForUpgrade")
    def on_book_file_delete_for_upgrade(self) -> bool:
        """
        On book file delete for upgrade flag.
        """
        return pulumi.get(self, "on_book_file_delete_for_upgrade")

    @property
    @pulumi.getter(name="onBookRetag")
    def on_book_retag(self) -> bool:
        """
        On book retag flag.
        """
        return pulumi.get(self, "on_book_retag")

    @property
    @pulumi.getter(name="onDownloadFailure")
    def on_download_failure(self) -> bool:
        """
        On download failure flag.
        """
        return pulumi.get(self, "on_download_failure")

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> bool:
        """
        On grab flag.
        """
        return pulumi.get(self, "on_grab")

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> bool:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @property
    @pulumi.getter(name="onImportFailure")
    def on_import_failure(self) -> bool:
        """
        On import failure flag.
        """
        return pulumi.get(self, "on_import_failure")

    @property
    @pulumi.getter(name="onReleaseImport")
    def on_release_import(self) -> bool:
        """
        On release import flag.
        """
        return pulumi.get(self, "on_release_import")

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> bool:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> bool:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def recipients(self) -> Sequence[str]:
        """
        Recipients.
        """
        return pulumi.get(self, "recipients")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="removeIds")
    def remove_ids(self) -> Sequence[str]:
        """
        Remove IDs.
        """
        return pulumi.get(self, "remove_ids")

    @property
    @pulumi.getter(name="requestTokenSecret")
    def request_token_secret(self) -> str:
        """
        Request token secret.
        """
        return pulumi.get(self, "request_token_secret")

    @property
    @pulumi.getter(name="requireEncryption")
    def require_encryption(self) -> bool:
        """
        Require encryption flag.
        """
        return pulumi.get(self, "require_encryption")

    @property
    @pulumi.getter
    def retry(self) -> int:
        """
        Retry.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="sendSilently")
    def send_silently(self) -> bool:
        """
        Add silently flag.
        """
        return pulumi.get(self, "send_silently")

    @property
    @pulumi.getter(name="senderDomain")
    def sender_domain(self) -> str:
        """
        Sender domain.
        """
        return pulumi.get(self, "sender_domain")

    @property
    @pulumi.getter(name="senderId")
    def sender_id(self) -> str:
        """
        Sender ID.
        """
        return pulumi.get(self, "sender_id")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> str:
        """
        Server url.
        """
        return pulumi.get(self, "server_url")

    @property
    @pulumi.getter(name="signIn")
    def sign_in(self) -> str:
        """
        Sign in.
        """
        return pulumi.get(self, "sign_in")

    @property
    @pulumi.getter
    def sound(self) -> str:
        """
        Sound.
        """
        return pulumi.get(self, "sound")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        Token.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def topics(self) -> Sequence[str]:
        """
        Devices.
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter
    def tos(self) -> Sequence[str]:
        """
        To.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> bool:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        """
        URL base.
        """
        return pulumi.get(self, "url_base")

    @property
    @pulumi.getter(name="useEuEndpoint")
    def use_eu_endpoint(self) -> bool:
        """
        Use EU endpoint flag.
        """
        return pulumi.get(self, "use_eu_endpoint")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> bool:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userKey")
    def user_key(self) -> str:
        """
        User key.
        """
        return pulumi.get(self, "user_key")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="webHookUrl")
    def web_hook_url(self) -> str:
        """
        Web hook url.
        """
        return pulumi.get(self, "web_hook_url")


class AwaitableGetNotificationResult(GetNotificationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNotificationResult(
            access_token=self.access_token,
            access_token_secret=self.access_token_secret,
            add_ids=self.add_ids,
            api_key=self.api_key,
            app_token=self.app_token,
            arguments=self.arguments,
            attach_files=self.attach_files,
            auth_user=self.auth_user,
            author=self.author,
            avatar=self.avatar,
            bccs=self.bccs,
            bot_token=self.bot_token,
            ccs=self.ccs,
            channel=self.channel,
            channel_tags=self.channel_tags,
            chat_id=self.chat_id,
            click_url=self.click_url,
            condition=self.condition,
            config_contract=self.config_contract,
            consumer_key=self.consumer_key,
            consumer_secret=self.consumer_secret,
            description=self.description,
            device_ids=self.device_ids,
            device_names=self.device_names,
            devices=self.devices,
            direct_message=self.direct_message,
            event=self.event,
            expire=self.expire,
            field_tags=self.field_tags,
            from_=self.from_,
            grab_fields=self.grab_fields,
            host=self.host,
            icon=self.icon,
            id=self.id,
            implementation=self.implementation,
            import_fields=self.import_fields,
            include_health_warnings=self.include_health_warnings,
            instance_name=self.instance_name,
            key=self.key,
            location=self.location,
            map_from=self.map_from,
            map_to=self.map_to,
            mention=self.mention,
            method=self.method,
            name=self.name,
            notify=self.notify,
            on_application_update=self.on_application_update,
            on_author_delete=self.on_author_delete,
            on_book_delete=self.on_book_delete,
            on_book_file_delete=self.on_book_file_delete,
            on_book_file_delete_for_upgrade=self.on_book_file_delete_for_upgrade,
            on_book_retag=self.on_book_retag,
            on_download_failure=self.on_download_failure,
            on_grab=self.on_grab,
            on_health_issue=self.on_health_issue,
            on_import_failure=self.on_import_failure,
            on_release_import=self.on_release_import,
            on_rename=self.on_rename,
            on_upgrade=self.on_upgrade,
            password=self.password,
            path=self.path,
            port=self.port,
            priority=self.priority,
            recipients=self.recipients,
            refresh_token=self.refresh_token,
            remove_ids=self.remove_ids,
            request_token_secret=self.request_token_secret,
            require_encryption=self.require_encryption,
            retry=self.retry,
            send_silently=self.send_silently,
            sender_domain=self.sender_domain,
            sender_id=self.sender_id,
            server=self.server,
            server_url=self.server_url,
            sign_in=self.sign_in,
            sound=self.sound,
            tags=self.tags,
            token=self.token,
            topics=self.topics,
            tos=self.tos,
            update_library=self.update_library,
            url=self.url,
            url_base=self.url_base,
            use_eu_endpoint=self.use_eu_endpoint,
            use_ssl=self.use_ssl,
            user_id=self.user_id,
            user_key=self.user_key,
            username=self.username,
            web_hook_url=self.web_hook_url)


def get_notification(name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNotificationResult:
    """
    <!-- subcategory:Notifications -->Single Notification.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_readarr as readarr

    example = readarr.Notifications.get_notification(name="Example")
    ```


    :param str name: Notification name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('readarr:Notifications/getNotification:getNotification', __args__, opts=opts, typ=GetNotificationResult).value

    return AwaitableGetNotificationResult(
        access_token=pulumi.get(__ret__, 'access_token'),
        access_token_secret=pulumi.get(__ret__, 'access_token_secret'),
        add_ids=pulumi.get(__ret__, 'add_ids'),
        api_key=pulumi.get(__ret__, 'api_key'),
        app_token=pulumi.get(__ret__, 'app_token'),
        arguments=pulumi.get(__ret__, 'arguments'),
        attach_files=pulumi.get(__ret__, 'attach_files'),
        auth_user=pulumi.get(__ret__, 'auth_user'),
        author=pulumi.get(__ret__, 'author'),
        avatar=pulumi.get(__ret__, 'avatar'),
        bccs=pulumi.get(__ret__, 'bccs'),
        bot_token=pulumi.get(__ret__, 'bot_token'),
        ccs=pulumi.get(__ret__, 'ccs'),
        channel=pulumi.get(__ret__, 'channel'),
        channel_tags=pulumi.get(__ret__, 'channel_tags'),
        chat_id=pulumi.get(__ret__, 'chat_id'),
        click_url=pulumi.get(__ret__, 'click_url'),
        condition=pulumi.get(__ret__, 'condition'),
        config_contract=pulumi.get(__ret__, 'config_contract'),
        consumer_key=pulumi.get(__ret__, 'consumer_key'),
        consumer_secret=pulumi.get(__ret__, 'consumer_secret'),
        description=pulumi.get(__ret__, 'description'),
        device_ids=pulumi.get(__ret__, 'device_ids'),
        device_names=pulumi.get(__ret__, 'device_names'),
        devices=pulumi.get(__ret__, 'devices'),
        direct_message=pulumi.get(__ret__, 'direct_message'),
        event=pulumi.get(__ret__, 'event'),
        expire=pulumi.get(__ret__, 'expire'),
        field_tags=pulumi.get(__ret__, 'field_tags'),
        from_=pulumi.get(__ret__, 'from_'),
        grab_fields=pulumi.get(__ret__, 'grab_fields'),
        host=pulumi.get(__ret__, 'host'),
        icon=pulumi.get(__ret__, 'icon'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        import_fields=pulumi.get(__ret__, 'import_fields'),
        include_health_warnings=pulumi.get(__ret__, 'include_health_warnings'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        key=pulumi.get(__ret__, 'key'),
        location=pulumi.get(__ret__, 'location'),
        map_from=pulumi.get(__ret__, 'map_from'),
        map_to=pulumi.get(__ret__, 'map_to'),
        mention=pulumi.get(__ret__, 'mention'),
        method=pulumi.get(__ret__, 'method'),
        name=pulumi.get(__ret__, 'name'),
        notify=pulumi.get(__ret__, 'notify'),
        on_application_update=pulumi.get(__ret__, 'on_application_update'),
        on_author_delete=pulumi.get(__ret__, 'on_author_delete'),
        on_book_delete=pulumi.get(__ret__, 'on_book_delete'),
        on_book_file_delete=pulumi.get(__ret__, 'on_book_file_delete'),
        on_book_file_delete_for_upgrade=pulumi.get(__ret__, 'on_book_file_delete_for_upgrade'),
        on_book_retag=pulumi.get(__ret__, 'on_book_retag'),
        on_download_failure=pulumi.get(__ret__, 'on_download_failure'),
        on_grab=pulumi.get(__ret__, 'on_grab'),
        on_health_issue=pulumi.get(__ret__, 'on_health_issue'),
        on_import_failure=pulumi.get(__ret__, 'on_import_failure'),
        on_release_import=pulumi.get(__ret__, 'on_release_import'),
        on_rename=pulumi.get(__ret__, 'on_rename'),
        on_upgrade=pulumi.get(__ret__, 'on_upgrade'),
        password=pulumi.get(__ret__, 'password'),
        path=pulumi.get(__ret__, 'path'),
        port=pulumi.get(__ret__, 'port'),
        priority=pulumi.get(__ret__, 'priority'),
        recipients=pulumi.get(__ret__, 'recipients'),
        refresh_token=pulumi.get(__ret__, 'refresh_token'),
        remove_ids=pulumi.get(__ret__, 'remove_ids'),
        request_token_secret=pulumi.get(__ret__, 'request_token_secret'),
        require_encryption=pulumi.get(__ret__, 'require_encryption'),
        retry=pulumi.get(__ret__, 'retry'),
        send_silently=pulumi.get(__ret__, 'send_silently'),
        sender_domain=pulumi.get(__ret__, 'sender_domain'),
        sender_id=pulumi.get(__ret__, 'sender_id'),
        server=pulumi.get(__ret__, 'server'),
        server_url=pulumi.get(__ret__, 'server_url'),
        sign_in=pulumi.get(__ret__, 'sign_in'),
        sound=pulumi.get(__ret__, 'sound'),
        tags=pulumi.get(__ret__, 'tags'),
        token=pulumi.get(__ret__, 'token'),
        topics=pulumi.get(__ret__, 'topics'),
        tos=pulumi.get(__ret__, 'tos'),
        update_library=pulumi.get(__ret__, 'update_library'),
        url=pulumi.get(__ret__, 'url'),
        url_base=pulumi.get(__ret__, 'url_base'),
        use_eu_endpoint=pulumi.get(__ret__, 'use_eu_endpoint'),
        use_ssl=pulumi.get(__ret__, 'use_ssl'),
        user_id=pulumi.get(__ret__, 'user_id'),
        user_key=pulumi.get(__ret__, 'user_key'),
        username=pulumi.get(__ret__, 'username'),
        web_hook_url=pulumi.get(__ret__, 'web_hook_url'))


@_utilities.lift_output_func(get_notification)
def get_notification_output(name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNotificationResult]:
    """
    <!-- subcategory:Notifications -->Single Notification.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_readarr as readarr

    example = readarr.Notifications.get_notification(name="Example")
    ```


    :param str name: Notification name.
    """
    ...
