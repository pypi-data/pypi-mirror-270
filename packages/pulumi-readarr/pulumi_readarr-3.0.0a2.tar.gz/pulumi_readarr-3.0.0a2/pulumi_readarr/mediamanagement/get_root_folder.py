# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRootFolderResult',
    'AwaitableGetRootFolderResult',
    'get_root_folder',
    'get_root_folder_output',
]

@pulumi.output_type
class GetRootFolderResult:
    """
    A collection of values returned by getRootFolder.
    """
    def __init__(__self__, accessible=None, default_metadata_profile_id=None, default_monitor_new_item_option=None, default_monitor_option=None, default_quality_profile_id=None, default_tags=None, host=None, id=None, is_calibre_library=None, library=None, name=None, output_profile=None, password=None, path=None, port=None, use_ssl=None, username=None):
        if accessible and not isinstance(accessible, bool):
            raise TypeError("Expected argument 'accessible' to be a bool")
        pulumi.set(__self__, "accessible", accessible)
        if default_metadata_profile_id and not isinstance(default_metadata_profile_id, int):
            raise TypeError("Expected argument 'default_metadata_profile_id' to be a int")
        pulumi.set(__self__, "default_metadata_profile_id", default_metadata_profile_id)
        if default_monitor_new_item_option and not isinstance(default_monitor_new_item_option, str):
            raise TypeError("Expected argument 'default_monitor_new_item_option' to be a str")
        pulumi.set(__self__, "default_monitor_new_item_option", default_monitor_new_item_option)
        if default_monitor_option and not isinstance(default_monitor_option, str):
            raise TypeError("Expected argument 'default_monitor_option' to be a str")
        pulumi.set(__self__, "default_monitor_option", default_monitor_option)
        if default_quality_profile_id and not isinstance(default_quality_profile_id, int):
            raise TypeError("Expected argument 'default_quality_profile_id' to be a int")
        pulumi.set(__self__, "default_quality_profile_id", default_quality_profile_id)
        if default_tags and not isinstance(default_tags, list):
            raise TypeError("Expected argument 'default_tags' to be a list")
        pulumi.set(__self__, "default_tags", default_tags)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if is_calibre_library and not isinstance(is_calibre_library, bool):
            raise TypeError("Expected argument 'is_calibre_library' to be a bool")
        pulumi.set(__self__, "is_calibre_library", is_calibre_library)
        if library and not isinstance(library, str):
            raise TypeError("Expected argument 'library' to be a str")
        pulumi.set(__self__, "library", library)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_profile and not isinstance(output_profile, str):
            raise TypeError("Expected argument 'output_profile' to be a str")
        pulumi.set(__self__, "output_profile", output_profile)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if use_ssl and not isinstance(use_ssl, bool):
            raise TypeError("Expected argument 'use_ssl' to be a bool")
        pulumi.set(__self__, "use_ssl", use_ssl)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def accessible(self) -> bool:
        """
        Access flag.
        """
        return pulumi.get(self, "accessible")

    @property
    @pulumi.getter(name="defaultMetadataProfileId")
    def default_metadata_profile_id(self) -> int:
        """
        Default metadata profile ID.
        """
        return pulumi.get(self, "default_metadata_profile_id")

    @property
    @pulumi.getter(name="defaultMonitorNewItemOption")
    def default_monitor_new_item_option(self) -> str:
        """
        Default monitor new item option.
        """
        return pulumi.get(self, "default_monitor_new_item_option")

    @property
    @pulumi.getter(name="defaultMonitorOption")
    def default_monitor_option(self) -> str:
        """
        Default monitor option.
        """
        return pulumi.get(self, "default_monitor_option")

    @property
    @pulumi.getter(name="defaultQualityProfileId")
    def default_quality_profile_id(self) -> int:
        """
        Default metadata profile ID.
        """
        return pulumi.get(self, "default_quality_profile_id")

    @property
    @pulumi.getter(name="defaultTags")
    def default_tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "default_tags")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Calibre host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Root Folder ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCalibreLibrary")
    def is_calibre_library(self) -> bool:
        """
        Is calibre library flag.
        """
        return pulumi.get(self, "is_calibre_library")

    @property
    @pulumi.getter
    def library(self) -> str:
        """
        Calibre library.
        """
        return pulumi.get(self, "library")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Root Folder name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputProfile")
    def output_profile(self) -> str:
        """
        Calibre output profile.
        """
        return pulumi.get(self, "output_profile")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Calibre password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Root Folder absolute path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Calibre Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> bool:
        """
        Use SSL for calibre connection.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Calibre username.
        """
        return pulumi.get(self, "username")


class AwaitableGetRootFolderResult(GetRootFolderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRootFolderResult(
            accessible=self.accessible,
            default_metadata_profile_id=self.default_metadata_profile_id,
            default_monitor_new_item_option=self.default_monitor_new_item_option,
            default_monitor_option=self.default_monitor_option,
            default_quality_profile_id=self.default_quality_profile_id,
            default_tags=self.default_tags,
            host=self.host,
            id=self.id,
            is_calibre_library=self.is_calibre_library,
            library=self.library,
            name=self.name,
            output_profile=self.output_profile,
            password=self.password,
            path=self.path,
            port=self.port,
            use_ssl=self.use_ssl,
            username=self.username)


def get_root_folder(path: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRootFolderResult:
    """
    <!-- subcategory:Media Management -->Single Root Folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_readarr as readarr

    example = readarr.MediaManagement.get_root_folder(path="/example")
    ```


    :param str path: Root Folder absolute path.
    """
    __args__ = dict()
    __args__['path'] = path
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('readarr:MediaManagement/getRootFolder:getRootFolder', __args__, opts=opts, typ=GetRootFolderResult).value

    return AwaitableGetRootFolderResult(
        accessible=pulumi.get(__ret__, 'accessible'),
        default_metadata_profile_id=pulumi.get(__ret__, 'default_metadata_profile_id'),
        default_monitor_new_item_option=pulumi.get(__ret__, 'default_monitor_new_item_option'),
        default_monitor_option=pulumi.get(__ret__, 'default_monitor_option'),
        default_quality_profile_id=pulumi.get(__ret__, 'default_quality_profile_id'),
        default_tags=pulumi.get(__ret__, 'default_tags'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        is_calibre_library=pulumi.get(__ret__, 'is_calibre_library'),
        library=pulumi.get(__ret__, 'library'),
        name=pulumi.get(__ret__, 'name'),
        output_profile=pulumi.get(__ret__, 'output_profile'),
        password=pulumi.get(__ret__, 'password'),
        path=pulumi.get(__ret__, 'path'),
        port=pulumi.get(__ret__, 'port'),
        use_ssl=pulumi.get(__ret__, 'use_ssl'),
        username=pulumi.get(__ret__, 'username'))


@_utilities.lift_output_func(get_root_folder)
def get_root_folder_output(path: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRootFolderResult]:
    """
    <!-- subcategory:Media Management -->Single Root Folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_readarr as readarr

    example = readarr.MediaManagement.get_root_folder(path="/example")
    ```


    :param str path: Root Folder absolute path.
    """
    ...
