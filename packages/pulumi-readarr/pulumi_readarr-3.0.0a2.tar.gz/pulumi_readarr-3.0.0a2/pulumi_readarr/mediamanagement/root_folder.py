# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RootFolderArgs', 'RootFolder']

@pulumi.input_type
class RootFolderArgs:
    def __init__(__self__, *,
                 default_metadata_profile_id: pulumi.Input[int],
                 default_monitor_new_item_option: pulumi.Input[str],
                 default_monitor_option: pulumi.Input[str],
                 default_quality_profile_id: pulumi.Input[int],
                 is_calibre_library: pulumi.Input[bool],
                 path: pulumi.Input[str],
                 default_tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 library: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_profile: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RootFolder resource.
        :param pulumi.Input[int] default_metadata_profile_id: Default metadata profile ID.
        :param pulumi.Input[str] default_monitor_new_item_option: Default monitor new item option.
        :param pulumi.Input[str] default_monitor_option: Default monitor option.
        :param pulumi.Input[int] default_quality_profile_id: Default metadata profile ID.
        :param pulumi.Input[bool] is_calibre_library: Is calibre library flag.
        :param pulumi.Input[str] path: Root Folder absolute path.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] default_tags: List of associated tags.
        :param pulumi.Input[str] host: Calibre host.
        :param pulumi.Input[str] library: Calibre library.
        :param pulumi.Input[str] name: Root Folder name.
        :param pulumi.Input[str] output_profile: Calibre output profile.
        :param pulumi.Input[str] password: Calibre password.
        :param pulumi.Input[int] port: Calibre Port.
        :param pulumi.Input[bool] use_ssl: Use SSL for calibre connection.
        :param pulumi.Input[str] username: Calibre username.
        """
        pulumi.set(__self__, "default_metadata_profile_id", default_metadata_profile_id)
        pulumi.set(__self__, "default_monitor_new_item_option", default_monitor_new_item_option)
        pulumi.set(__self__, "default_monitor_option", default_monitor_option)
        pulumi.set(__self__, "default_quality_profile_id", default_quality_profile_id)
        pulumi.set(__self__, "is_calibre_library", is_calibre_library)
        pulumi.set(__self__, "path", path)
        if default_tags is not None:
            pulumi.set(__self__, "default_tags", default_tags)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if library is not None:
            pulumi.set(__self__, "library", library)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output_profile is not None:
            pulumi.set(__self__, "output_profile", output_profile)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="defaultMetadataProfileId")
    def default_metadata_profile_id(self) -> pulumi.Input[int]:
        """
        Default metadata profile ID.
        """
        return pulumi.get(self, "default_metadata_profile_id")

    @default_metadata_profile_id.setter
    def default_metadata_profile_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "default_metadata_profile_id", value)

    @property
    @pulumi.getter(name="defaultMonitorNewItemOption")
    def default_monitor_new_item_option(self) -> pulumi.Input[str]:
        """
        Default monitor new item option.
        """
        return pulumi.get(self, "default_monitor_new_item_option")

    @default_monitor_new_item_option.setter
    def default_monitor_new_item_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_monitor_new_item_option", value)

    @property
    @pulumi.getter(name="defaultMonitorOption")
    def default_monitor_option(self) -> pulumi.Input[str]:
        """
        Default monitor option.
        """
        return pulumi.get(self, "default_monitor_option")

    @default_monitor_option.setter
    def default_monitor_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_monitor_option", value)

    @property
    @pulumi.getter(name="defaultQualityProfileId")
    def default_quality_profile_id(self) -> pulumi.Input[int]:
        """
        Default metadata profile ID.
        """
        return pulumi.get(self, "default_quality_profile_id")

    @default_quality_profile_id.setter
    def default_quality_profile_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "default_quality_profile_id", value)

    @property
    @pulumi.getter(name="isCalibreLibrary")
    def is_calibre_library(self) -> pulumi.Input[bool]:
        """
        Is calibre library flag.
        """
        return pulumi.get(self, "is_calibre_library")

    @is_calibre_library.setter
    def is_calibre_library(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_calibre_library", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Root Folder absolute path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="defaultTags")
    def default_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "default_tags")

    @default_tags.setter
    def default_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "default_tags", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def library(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre library.
        """
        return pulumi.get(self, "library")

    @library.setter
    def library(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "library", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Root Folder name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outputProfile")
    def output_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre output profile.
        """
        return pulumi.get(self, "output_profile")

    @output_profile.setter
    def output_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_profile", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Calibre Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL for calibre connection.
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _RootFolderState:
    def __init__(__self__, *,
                 accessible: Optional[pulumi.Input[bool]] = None,
                 default_metadata_profile_id: Optional[pulumi.Input[int]] = None,
                 default_monitor_new_item_option: Optional[pulumi.Input[str]] = None,
                 default_monitor_option: Optional[pulumi.Input[str]] = None,
                 default_quality_profile_id: Optional[pulumi.Input[int]] = None,
                 default_tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 is_calibre_library: Optional[pulumi.Input[bool]] = None,
                 library: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_profile: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RootFolder resources.
        :param pulumi.Input[bool] accessible: Access flag.
        :param pulumi.Input[int] default_metadata_profile_id: Default metadata profile ID.
        :param pulumi.Input[str] default_monitor_new_item_option: Default monitor new item option.
        :param pulumi.Input[str] default_monitor_option: Default monitor option.
        :param pulumi.Input[int] default_quality_profile_id: Default metadata profile ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] default_tags: List of associated tags.
        :param pulumi.Input[str] host: Calibre host.
        :param pulumi.Input[bool] is_calibre_library: Is calibre library flag.
        :param pulumi.Input[str] library: Calibre library.
        :param pulumi.Input[str] name: Root Folder name.
        :param pulumi.Input[str] output_profile: Calibre output profile.
        :param pulumi.Input[str] password: Calibre password.
        :param pulumi.Input[str] path: Root Folder absolute path.
        :param pulumi.Input[int] port: Calibre Port.
        :param pulumi.Input[bool] use_ssl: Use SSL for calibre connection.
        :param pulumi.Input[str] username: Calibre username.
        """
        if accessible is not None:
            pulumi.set(__self__, "accessible", accessible)
        if default_metadata_profile_id is not None:
            pulumi.set(__self__, "default_metadata_profile_id", default_metadata_profile_id)
        if default_monitor_new_item_option is not None:
            pulumi.set(__self__, "default_monitor_new_item_option", default_monitor_new_item_option)
        if default_monitor_option is not None:
            pulumi.set(__self__, "default_monitor_option", default_monitor_option)
        if default_quality_profile_id is not None:
            pulumi.set(__self__, "default_quality_profile_id", default_quality_profile_id)
        if default_tags is not None:
            pulumi.set(__self__, "default_tags", default_tags)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if is_calibre_library is not None:
            pulumi.set(__self__, "is_calibre_library", is_calibre_library)
        if library is not None:
            pulumi.set(__self__, "library", library)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output_profile is not None:
            pulumi.set(__self__, "output_profile", output_profile)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def accessible(self) -> Optional[pulumi.Input[bool]]:
        """
        Access flag.
        """
        return pulumi.get(self, "accessible")

    @accessible.setter
    def accessible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accessible", value)

    @property
    @pulumi.getter(name="defaultMetadataProfileId")
    def default_metadata_profile_id(self) -> Optional[pulumi.Input[int]]:
        """
        Default metadata profile ID.
        """
        return pulumi.get(self, "default_metadata_profile_id")

    @default_metadata_profile_id.setter
    def default_metadata_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_metadata_profile_id", value)

    @property
    @pulumi.getter(name="defaultMonitorNewItemOption")
    def default_monitor_new_item_option(self) -> Optional[pulumi.Input[str]]:
        """
        Default monitor new item option.
        """
        return pulumi.get(self, "default_monitor_new_item_option")

    @default_monitor_new_item_option.setter
    def default_monitor_new_item_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_monitor_new_item_option", value)

    @property
    @pulumi.getter(name="defaultMonitorOption")
    def default_monitor_option(self) -> Optional[pulumi.Input[str]]:
        """
        Default monitor option.
        """
        return pulumi.get(self, "default_monitor_option")

    @default_monitor_option.setter
    def default_monitor_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_monitor_option", value)

    @property
    @pulumi.getter(name="defaultQualityProfileId")
    def default_quality_profile_id(self) -> Optional[pulumi.Input[int]]:
        """
        Default metadata profile ID.
        """
        return pulumi.get(self, "default_quality_profile_id")

    @default_quality_profile_id.setter
    def default_quality_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_quality_profile_id", value)

    @property
    @pulumi.getter(name="defaultTags")
    def default_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "default_tags")

    @default_tags.setter
    def default_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "default_tags", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="isCalibreLibrary")
    def is_calibre_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Is calibre library flag.
        """
        return pulumi.get(self, "is_calibre_library")

    @is_calibre_library.setter
    def is_calibre_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_calibre_library", value)

    @property
    @pulumi.getter
    def library(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre library.
        """
        return pulumi.get(self, "library")

    @library.setter
    def library(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "library", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Root Folder name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outputProfile")
    def output_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre output profile.
        """
        return pulumi.get(self, "output_profile")

    @output_profile.setter
    def output_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_profile", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Root Folder absolute path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Calibre Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL for calibre connection.
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Calibre username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class RootFolder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_metadata_profile_id: Optional[pulumi.Input[int]] = None,
                 default_monitor_new_item_option: Optional[pulumi.Input[str]] = None,
                 default_monitor_option: Optional[pulumi.Input[str]] = None,
                 default_quality_profile_id: Optional[pulumi.Input[int]] = None,
                 default_tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 is_calibre_library: Optional[pulumi.Input[bool]] = None,
                 library: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_profile: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        <!-- subcategory:Media Management -->Root Folder resource.
        For more information refer to [Root Folders](https://wiki.servarr.com/readarr/settings#root-folders) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_readarr as readarr

        example = readarr.media_management.RootFolder("example",
            default_metadata_profile_id=1,
            default_monitor_option="all",
            default_quality_profile_id=1,
            is_calibre_library=False,
            output_profile="default",
            path="/example")
        # with calibre
        calibre_example = readarr.media_management.RootFolder("calibreExample",
            default_metadata_profile_id=1,
            default_monitor_option="all",
            default_quality_profile_id=1,
            host="calibre-host",
            is_calibre_library=True,
            library="Calibre_Library",
            output_profile="default",
            password="Pass",
            path="/calibre",
            port=8081,
            use_ssl=False,
            username="User")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import readarr:MediaManagement/rootFolder:RootFolder example 10
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] default_metadata_profile_id: Default metadata profile ID.
        :param pulumi.Input[str] default_monitor_new_item_option: Default monitor new item option.
        :param pulumi.Input[str] default_monitor_option: Default monitor option.
        :param pulumi.Input[int] default_quality_profile_id: Default metadata profile ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] default_tags: List of associated tags.
        :param pulumi.Input[str] host: Calibre host.
        :param pulumi.Input[bool] is_calibre_library: Is calibre library flag.
        :param pulumi.Input[str] library: Calibre library.
        :param pulumi.Input[str] name: Root Folder name.
        :param pulumi.Input[str] output_profile: Calibre output profile.
        :param pulumi.Input[str] password: Calibre password.
        :param pulumi.Input[str] path: Root Folder absolute path.
        :param pulumi.Input[int] port: Calibre Port.
        :param pulumi.Input[bool] use_ssl: Use SSL for calibre connection.
        :param pulumi.Input[str] username: Calibre username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RootFolderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Media Management -->Root Folder resource.
        For more information refer to [Root Folders](https://wiki.servarr.com/readarr/settings#root-folders) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_readarr as readarr

        example = readarr.media_management.RootFolder("example",
            default_metadata_profile_id=1,
            default_monitor_option="all",
            default_quality_profile_id=1,
            is_calibre_library=False,
            output_profile="default",
            path="/example")
        # with calibre
        calibre_example = readarr.media_management.RootFolder("calibreExample",
            default_metadata_profile_id=1,
            default_monitor_option="all",
            default_quality_profile_id=1,
            host="calibre-host",
            is_calibre_library=True,
            library="Calibre_Library",
            output_profile="default",
            password="Pass",
            path="/calibre",
            port=8081,
            use_ssl=False,
            username="User")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import readarr:MediaManagement/rootFolder:RootFolder example 10
        ```

        :param str resource_name: The name of the resource.
        :param RootFolderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RootFolderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_metadata_profile_id: Optional[pulumi.Input[int]] = None,
                 default_monitor_new_item_option: Optional[pulumi.Input[str]] = None,
                 default_monitor_option: Optional[pulumi.Input[str]] = None,
                 default_quality_profile_id: Optional[pulumi.Input[int]] = None,
                 default_tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 is_calibre_library: Optional[pulumi.Input[bool]] = None,
                 library: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_profile: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RootFolderArgs.__new__(RootFolderArgs)

            if default_metadata_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'default_metadata_profile_id'")
            __props__.__dict__["default_metadata_profile_id"] = default_metadata_profile_id
            if default_monitor_new_item_option is None and not opts.urn:
                raise TypeError("Missing required property 'default_monitor_new_item_option'")
            __props__.__dict__["default_monitor_new_item_option"] = default_monitor_new_item_option
            if default_monitor_option is None and not opts.urn:
                raise TypeError("Missing required property 'default_monitor_option'")
            __props__.__dict__["default_monitor_option"] = default_monitor_option
            if default_quality_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'default_quality_profile_id'")
            __props__.__dict__["default_quality_profile_id"] = default_quality_profile_id
            __props__.__dict__["default_tags"] = default_tags
            __props__.__dict__["host"] = host
            if is_calibre_library is None and not opts.urn:
                raise TypeError("Missing required property 'is_calibre_library'")
            __props__.__dict__["is_calibre_library"] = is_calibre_library
            __props__.__dict__["library"] = library
            __props__.__dict__["name"] = name
            __props__.__dict__["output_profile"] = output_profile
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            __props__.__dict__["port"] = port
            __props__.__dict__["use_ssl"] = use_ssl
            __props__.__dict__["username"] = username
            __props__.__dict__["accessible"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(RootFolder, __self__).__init__(
            'readarr:MediaManagement/rootFolder:RootFolder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accessible: Optional[pulumi.Input[bool]] = None,
            default_metadata_profile_id: Optional[pulumi.Input[int]] = None,
            default_monitor_new_item_option: Optional[pulumi.Input[str]] = None,
            default_monitor_option: Optional[pulumi.Input[str]] = None,
            default_quality_profile_id: Optional[pulumi.Input[int]] = None,
            default_tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            host: Optional[pulumi.Input[str]] = None,
            is_calibre_library: Optional[pulumi.Input[bool]] = None,
            library: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            output_profile: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            use_ssl: Optional[pulumi.Input[bool]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'RootFolder':
        """
        Get an existing RootFolder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accessible: Access flag.
        :param pulumi.Input[int] default_metadata_profile_id: Default metadata profile ID.
        :param pulumi.Input[str] default_monitor_new_item_option: Default monitor new item option.
        :param pulumi.Input[str] default_monitor_option: Default monitor option.
        :param pulumi.Input[int] default_quality_profile_id: Default metadata profile ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] default_tags: List of associated tags.
        :param pulumi.Input[str] host: Calibre host.
        :param pulumi.Input[bool] is_calibre_library: Is calibre library flag.
        :param pulumi.Input[str] library: Calibre library.
        :param pulumi.Input[str] name: Root Folder name.
        :param pulumi.Input[str] output_profile: Calibre output profile.
        :param pulumi.Input[str] password: Calibre password.
        :param pulumi.Input[str] path: Root Folder absolute path.
        :param pulumi.Input[int] port: Calibre Port.
        :param pulumi.Input[bool] use_ssl: Use SSL for calibre connection.
        :param pulumi.Input[str] username: Calibre username.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RootFolderState.__new__(_RootFolderState)

        __props__.__dict__["accessible"] = accessible
        __props__.__dict__["default_metadata_profile_id"] = default_metadata_profile_id
        __props__.__dict__["default_monitor_new_item_option"] = default_monitor_new_item_option
        __props__.__dict__["default_monitor_option"] = default_monitor_option
        __props__.__dict__["default_quality_profile_id"] = default_quality_profile_id
        __props__.__dict__["default_tags"] = default_tags
        __props__.__dict__["host"] = host
        __props__.__dict__["is_calibre_library"] = is_calibre_library
        __props__.__dict__["library"] = library
        __props__.__dict__["name"] = name
        __props__.__dict__["output_profile"] = output_profile
        __props__.__dict__["password"] = password
        __props__.__dict__["path"] = path
        __props__.__dict__["port"] = port
        __props__.__dict__["use_ssl"] = use_ssl
        __props__.__dict__["username"] = username
        return RootFolder(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def accessible(self) -> pulumi.Output[bool]:
        """
        Access flag.
        """
        return pulumi.get(self, "accessible")

    @property
    @pulumi.getter(name="defaultMetadataProfileId")
    def default_metadata_profile_id(self) -> pulumi.Output[int]:
        """
        Default metadata profile ID.
        """
        return pulumi.get(self, "default_metadata_profile_id")

    @property
    @pulumi.getter(name="defaultMonitorNewItemOption")
    def default_monitor_new_item_option(self) -> pulumi.Output[str]:
        """
        Default monitor new item option.
        """
        return pulumi.get(self, "default_monitor_new_item_option")

    @property
    @pulumi.getter(name="defaultMonitorOption")
    def default_monitor_option(self) -> pulumi.Output[str]:
        """
        Default monitor option.
        """
        return pulumi.get(self, "default_monitor_option")

    @property
    @pulumi.getter(name="defaultQualityProfileId")
    def default_quality_profile_id(self) -> pulumi.Output[int]:
        """
        Default metadata profile ID.
        """
        return pulumi.get(self, "default_quality_profile_id")

    @property
    @pulumi.getter(name="defaultTags")
    def default_tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "default_tags")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Calibre host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="isCalibreLibrary")
    def is_calibre_library(self) -> pulumi.Output[bool]:
        """
        Is calibre library flag.
        """
        return pulumi.get(self, "is_calibre_library")

    @property
    @pulumi.getter
    def library(self) -> pulumi.Output[str]:
        """
        Calibre library.
        """
        return pulumi.get(self, "library")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Root Folder name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputProfile")
    def output_profile(self) -> pulumi.Output[str]:
        """
        Calibre output profile.
        """
        return pulumi.get(self, "output_profile")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Calibre password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        Root Folder absolute path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Calibre Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> pulumi.Output[bool]:
        """
        Use SSL for calibre connection.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Calibre username.
        """
        return pulumi.get(self, "username")

