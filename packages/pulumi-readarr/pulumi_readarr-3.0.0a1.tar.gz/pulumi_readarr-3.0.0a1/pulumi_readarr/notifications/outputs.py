# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetNotificationsNotificationResult',
]

@pulumi.output_type
class GetNotificationsNotificationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 access_token_secret: str,
                 add_ids: Sequence[str],
                 api_key: str,
                 app_token: str,
                 arguments: str,
                 attach_files: bool,
                 auth_user: str,
                 author: str,
                 avatar: str,
                 bccs: Sequence[str],
                 bot_token: str,
                 ccs: Sequence[str],
                 channel: str,
                 channel_tags: Sequence[str],
                 chat_id: str,
                 click_url: str,
                 condition: int,
                 config_contract: str,
                 consumer_key: str,
                 consumer_secret: str,
                 description: str,
                 device_ids: Sequence[str],
                 device_names: str,
                 devices: Sequence[str],
                 direct_message: bool,
                 event: str,
                 expire: int,
                 field_tags: Sequence[str],
                 from_: str,
                 grab_fields: int,
                 host: str,
                 icon: str,
                 id: int,
                 implementation: str,
                 import_fields: int,
                 include_health_warnings: bool,
                 instance_name: str,
                 key: str,
                 location: str,
                 map_from: str,
                 map_to: str,
                 mention: str,
                 method: int,
                 name: str,
                 notify: bool,
                 on_application_update: bool,
                 on_author_delete: bool,
                 on_book_delete: bool,
                 on_book_file_delete: bool,
                 on_book_file_delete_for_upgrade: bool,
                 on_book_retag: bool,
                 on_download_failure: bool,
                 on_grab: bool,
                 on_health_issue: bool,
                 on_import_failure: bool,
                 on_release_import: bool,
                 on_rename: bool,
                 on_upgrade: bool,
                 password: str,
                 path: str,
                 port: int,
                 priority: int,
                 recipients: Sequence[str],
                 refresh_token: str,
                 remove_ids: Sequence[str],
                 request_token_secret: str,
                 require_encryption: bool,
                 retry: int,
                 send_silently: bool,
                 sender_domain: str,
                 sender_id: str,
                 server: str,
                 server_url: str,
                 sign_in: str,
                 sound: str,
                 tags: Sequence[int],
                 token: str,
                 topics: Sequence[str],
                 tos: Sequence[str],
                 update_library: bool,
                 url: str,
                 url_base: str,
                 use_eu_endpoint: bool,
                 use_ssl: bool,
                 user_id: str,
                 user_key: str,
                 username: str,
                 web_hook_url: str):
        """
        :param str access_token: Access token.
        :param str access_token_secret: Access token secret.
        :param Sequence[str] add_ids: Add IDs.
        :param str api_key: API key.
        :param str app_token: App token.
        :param str arguments: Arguments.
        :param bool attach_files: Attach files flag.
        :param str auth_user: Auth user.
        :param str author: Author.
        :param str avatar: Avatar.
        :param Sequence[str] bccs: Bcc.
        :param str bot_token: Bot token.
        :param Sequence[str] ccs: Cc.
        :param str channel: Channel.
        :param Sequence[str] channel_tags: Channel tags.
        :param str chat_id: Chat ID.
        :param str click_url: Click URL.
        :param int condition: Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.
        :param str config_contract: Notification configuration template.
        :param str consumer_key: Consumer key.
        :param str consumer_secret: Consumer secret.
        :param str description: Condition description.
        :param Sequence[str] device_ids: Device IDs.
        :param str device_names: Device names.
        :param Sequence[str] devices: Devices.
        :param bool direct_message: Direct message flag.
        :param str event: Event.
        :param int expire: Expire.
        :param Sequence[str] field_tags: Devices.
        :param str from_: From.
        :param int grab_fields: Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.
        :param str host: Host.
        :param str icon: Icon.
        :param int id: Notification ID.
        :param str implementation: Notification implementation name.
        :param int import_fields: Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        :param bool include_health_warnings: Include health warnings.
        :param str instance_name: Instance name.
        :param str key: Key.
        :param str location: Purchase location.
        :param str map_from: Map From.
        :param str map_to: Map To.
        :param str mention: Mention.
        :param int method: Method. `1` POST, `2` PUT.
        :param str name: Notification name.
        :param bool notify: Notify flag.
        :param bool on_application_update: On application update flag.
        :param bool on_author_delete: On author deleted flag.
        :param bool on_book_delete: On book delete flag.
        :param bool on_book_file_delete: On book file delete flag.
        :param bool on_book_file_delete_for_upgrade: On book file delete for upgrade flag.
        :param bool on_book_retag: On book retag flag.
        :param bool on_download_failure: On download failure flag.
        :param bool on_grab: On grab flag.
        :param bool on_health_issue: On health issue flag.
        :param bool on_import_failure: On import failure flag.
        :param bool on_release_import: On release import flag.
        :param bool on_rename: On rename flag.
        :param bool on_upgrade: On upgrade flag.
        :param str password: password.
        :param str path: Path.
        :param int port: Port.
        :param int priority: Priority.
        :param Sequence[str] recipients: Recipients.
        :param str refresh_token: Refresh token.
        :param Sequence[str] remove_ids: Remove IDs.
        :param str request_token_secret: Request token secret.
        :param bool require_encryption: Require encryption flag.
        :param int retry: Retry.
        :param bool send_silently: Add silently flag.
        :param str sender_domain: Sender domain.
        :param str sender_id: Sender ID.
        :param str server: server.
        :param str server_url: Server url.
        :param str sign_in: Sign in.
        :param str sound: Sound.
        :param Sequence[int] tags: List of associated tags.
        :param str token: Token.
        :param Sequence[str] topics: Devices.
        :param Sequence[str] tos: To.
        :param bool update_library: Update library flag.
        :param str url: URL.
        :param str url_base: URL base.
        :param bool use_eu_endpoint: Use EU endpoint flag.
        :param bool use_ssl: Use SSL flag.
        :param str user_id: User ID.
        :param str user_key: User key.
        :param str username: Username.
        :param str web_hook_url: Web hook url.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "access_token_secret", access_token_secret)
        pulumi.set(__self__, "add_ids", add_ids)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "app_token", app_token)
        pulumi.set(__self__, "arguments", arguments)
        pulumi.set(__self__, "attach_files", attach_files)
        pulumi.set(__self__, "auth_user", auth_user)
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "avatar", avatar)
        pulumi.set(__self__, "bccs", bccs)
        pulumi.set(__self__, "bot_token", bot_token)
        pulumi.set(__self__, "ccs", ccs)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "channel_tags", channel_tags)
        pulumi.set(__self__, "chat_id", chat_id)
        pulumi.set(__self__, "click_url", click_url)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_ids", device_ids)
        pulumi.set(__self__, "device_names", device_names)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "direct_message", direct_message)
        pulumi.set(__self__, "event", event)
        pulumi.set(__self__, "expire", expire)
        pulumi.set(__self__, "field_tags", field_tags)
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "grab_fields", grab_fields)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "icon", icon)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "import_fields", import_fields)
        pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "map_from", map_from)
        pulumi.set(__self__, "map_to", map_to)
        pulumi.set(__self__, "mention", mention)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notify", notify)
        pulumi.set(__self__, "on_application_update", on_application_update)
        pulumi.set(__self__, "on_author_delete", on_author_delete)
        pulumi.set(__self__, "on_book_delete", on_book_delete)
        pulumi.set(__self__, "on_book_file_delete", on_book_file_delete)
        pulumi.set(__self__, "on_book_file_delete_for_upgrade", on_book_file_delete_for_upgrade)
        pulumi.set(__self__, "on_book_retag", on_book_retag)
        pulumi.set(__self__, "on_download_failure", on_download_failure)
        pulumi.set(__self__, "on_grab", on_grab)
        pulumi.set(__self__, "on_health_issue", on_health_issue)
        pulumi.set(__self__, "on_import_failure", on_import_failure)
        pulumi.set(__self__, "on_release_import", on_release_import)
        pulumi.set(__self__, "on_rename", on_rename)
        pulumi.set(__self__, "on_upgrade", on_upgrade)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "recipients", recipients)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "remove_ids", remove_ids)
        pulumi.set(__self__, "request_token_secret", request_token_secret)
        pulumi.set(__self__, "require_encryption", require_encryption)
        pulumi.set(__self__, "retry", retry)
        pulumi.set(__self__, "send_silently", send_silently)
        pulumi.set(__self__, "sender_domain", sender_domain)
        pulumi.set(__self__, "sender_id", sender_id)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "server_url", server_url)
        pulumi.set(__self__, "sign_in", sign_in)
        pulumi.set(__self__, "sound", sound)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "topics", topics)
        pulumi.set(__self__, "tos", tos)
        pulumi.set(__self__, "update_library", update_library)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "url_base", url_base)
        pulumi.set(__self__, "use_eu_endpoint", use_eu_endpoint)
        pulumi.set(__self__, "use_ssl", use_ssl)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_key", user_key)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "web_hook_url", web_hook_url)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accessTokenSecret")
    def access_token_secret(self) -> str:
        """
        Access token secret.
        """
        return pulumi.get(self, "access_token_secret")

    @property
    @pulumi.getter(name="addIds")
    def add_ids(self) -> Sequence[str]:
        """
        Add IDs.
        """
        return pulumi.get(self, "add_ids")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> str:
        """
        App token.
        """
        return pulumi.get(self, "app_token")

    @property
    @pulumi.getter
    def arguments(self) -> str:
        """
        Arguments.
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="attachFiles")
    def attach_files(self) -> bool:
        """
        Attach files flag.
        """
        return pulumi.get(self, "attach_files")

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> str:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        Author.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def avatar(self) -> str:
        """
        Avatar.
        """
        return pulumi.get(self, "avatar")

    @property
    @pulumi.getter
    def bccs(self) -> Sequence[str]:
        """
        Bcc.
        """
        return pulumi.get(self, "bccs")

    @property
    @pulumi.getter(name="botToken")
    def bot_token(self) -> str:
        """
        Bot token.
        """
        return pulumi.get(self, "bot_token")

    @property
    @pulumi.getter
    def ccs(self) -> Sequence[str]:
        """
        Cc.
        """
        return pulumi.get(self, "ccs")

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        Channel.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelTags")
    def channel_tags(self) -> Sequence[str]:
        """
        Channel tags.
        """
        return pulumi.get(self, "channel_tags")

    @property
    @pulumi.getter(name="chatId")
    def chat_id(self) -> str:
        """
        Chat ID.
        """
        return pulumi.get(self, "chat_id")

    @property
    @pulumi.getter(name="clickUrl")
    def click_url(self) -> str:
        """
        Click URL.
        """
        return pulumi.get(self, "click_url")

    @property
    @pulumi.getter
    def condition(self) -> int:
        """
        Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Notification configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        """
        Consumer key.
        """
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        """
        Consumer secret.
        """
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Condition description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> Sequence[str]:
        """
        Device IDs.
        """
        return pulumi.get(self, "device_ids")

    @property
    @pulumi.getter(name="deviceNames")
    def device_names(self) -> str:
        """
        Device names.
        """
        return pulumi.get(self, "device_names")

    @property
    @pulumi.getter
    def devices(self) -> Sequence[str]:
        """
        Devices.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="directMessage")
    def direct_message(self) -> bool:
        """
        Direct message flag.
        """
        return pulumi.get(self, "direct_message")

    @property
    @pulumi.getter
    def event(self) -> str:
        """
        Event.
        """
        return pulumi.get(self, "event")

    @property
    @pulumi.getter
    def expire(self) -> int:
        """
        Expire.
        """
        return pulumi.get(self, "expire")

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Sequence[str]:
        """
        Devices.
        """
        return pulumi.get(self, "field_tags")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        From.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="grabFields")
    def grab_fields(self) -> int:
        """
        Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.
        """
        return pulumi.get(self, "grab_fields")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def icon(self) -> str:
        """
        Icon.
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Notification ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Notification implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="importFields")
    def import_fields(self) -> int:
        """
        Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
        """
        return pulumi.get(self, "import_fields")

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> bool:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Purchase location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="mapFrom")
    def map_from(self) -> str:
        """
        Map From.
        """
        return pulumi.get(self, "map_from")

    @property
    @pulumi.getter(name="mapTo")
    def map_to(self) -> str:
        """
        Map To.
        """
        return pulumi.get(self, "map_to")

    @property
    @pulumi.getter
    def mention(self) -> str:
        """
        Mention.
        """
        return pulumi.get(self, "mention")

    @property
    @pulumi.getter
    def method(self) -> int:
        """
        Method. `1` POST, `2` PUT.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Notification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notify(self) -> bool:
        """
        Notify flag.
        """
        return pulumi.get(self, "notify")

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> bool:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @property
    @pulumi.getter(name="onAuthorDelete")
    def on_author_delete(self) -> bool:
        """
        On author deleted flag.
        """
        return pulumi.get(self, "on_author_delete")

    @property
    @pulumi.getter(name="onBookDelete")
    def on_book_delete(self) -> bool:
        """
        On book delete flag.
        """
        return pulumi.get(self, "on_book_delete")

    @property
    @pulumi.getter(name="onBookFileDelete")
    def on_book_file_delete(self) -> bool:
        """
        On book file delete flag.
        """
        return pulumi.get(self, "on_book_file_delete")

    @property
    @pulumi.getter(name="onBookFileDeleteForUpgrade")
    def on_book_file_delete_for_upgrade(self) -> bool:
        """
        On book file delete for upgrade flag.
        """
        return pulumi.get(self, "on_book_file_delete_for_upgrade")

    @property
    @pulumi.getter(name="onBookRetag")
    def on_book_retag(self) -> bool:
        """
        On book retag flag.
        """
        return pulumi.get(self, "on_book_retag")

    @property
    @pulumi.getter(name="onDownloadFailure")
    def on_download_failure(self) -> bool:
        """
        On download failure flag.
        """
        return pulumi.get(self, "on_download_failure")

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> bool:
        """
        On grab flag.
        """
        return pulumi.get(self, "on_grab")

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> bool:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @property
    @pulumi.getter(name="onImportFailure")
    def on_import_failure(self) -> bool:
        """
        On import failure flag.
        """
        return pulumi.get(self, "on_import_failure")

    @property
    @pulumi.getter(name="onReleaseImport")
    def on_release_import(self) -> bool:
        """
        On release import flag.
        """
        return pulumi.get(self, "on_release_import")

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> bool:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> bool:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def recipients(self) -> Sequence[str]:
        """
        Recipients.
        """
        return pulumi.get(self, "recipients")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="removeIds")
    def remove_ids(self) -> Sequence[str]:
        """
        Remove IDs.
        """
        return pulumi.get(self, "remove_ids")

    @property
    @pulumi.getter(name="requestTokenSecret")
    def request_token_secret(self) -> str:
        """
        Request token secret.
        """
        return pulumi.get(self, "request_token_secret")

    @property
    @pulumi.getter(name="requireEncryption")
    def require_encryption(self) -> bool:
        """
        Require encryption flag.
        """
        return pulumi.get(self, "require_encryption")

    @property
    @pulumi.getter
    def retry(self) -> int:
        """
        Retry.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="sendSilently")
    def send_silently(self) -> bool:
        """
        Add silently flag.
        """
        return pulumi.get(self, "send_silently")

    @property
    @pulumi.getter(name="senderDomain")
    def sender_domain(self) -> str:
        """
        Sender domain.
        """
        return pulumi.get(self, "sender_domain")

    @property
    @pulumi.getter(name="senderId")
    def sender_id(self) -> str:
        """
        Sender ID.
        """
        return pulumi.get(self, "sender_id")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> str:
        """
        Server url.
        """
        return pulumi.get(self, "server_url")

    @property
    @pulumi.getter(name="signIn")
    def sign_in(self) -> str:
        """
        Sign in.
        """
        return pulumi.get(self, "sign_in")

    @property
    @pulumi.getter
    def sound(self) -> str:
        """
        Sound.
        """
        return pulumi.get(self, "sound")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        Token.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def topics(self) -> Sequence[str]:
        """
        Devices.
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter
    def tos(self) -> Sequence[str]:
        """
        To.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> bool:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        """
        URL base.
        """
        return pulumi.get(self, "url_base")

    @property
    @pulumi.getter(name="useEuEndpoint")
    def use_eu_endpoint(self) -> bool:
        """
        Use EU endpoint flag.
        """
        return pulumi.get(self, "use_eu_endpoint")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> bool:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userKey")
    def user_key(self) -> str:
        """
        User key.
        """
        return pulumi.get(self, "user_key")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="webHookUrl")
    def web_hook_url(self) -> str:
        """
        Web hook url.
        """
        return pulumi.get(self, "web_hook_url")


