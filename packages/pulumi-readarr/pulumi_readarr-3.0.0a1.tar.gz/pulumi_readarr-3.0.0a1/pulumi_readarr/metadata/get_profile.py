# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetProfileResult',
    'AwaitableGetProfileResult',
    'get_profile',
    'get_profile_output',
]

@pulumi.output_type
class GetProfileResult:
    """
    A collection of values returned by getProfile.
    """
    def __init__(__self__, allowed_languages=None, id=None, ignoreds=None, min_pages=None, min_popularity=None, name=None, skip_missing_date=None, skip_missing_isbn=None, skip_parts_and_sets=None, skip_series_secondary=None):
        if allowed_languages and not isinstance(allowed_languages, str):
            raise TypeError("Expected argument 'allowed_languages' to be a str")
        pulumi.set(__self__, "allowed_languages", allowed_languages)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if ignoreds and not isinstance(ignoreds, list):
            raise TypeError("Expected argument 'ignoreds' to be a list")
        pulumi.set(__self__, "ignoreds", ignoreds)
        if min_pages and not isinstance(min_pages, int):
            raise TypeError("Expected argument 'min_pages' to be a int")
        pulumi.set(__self__, "min_pages", min_pages)
        if min_popularity and not isinstance(min_popularity, float):
            raise TypeError("Expected argument 'min_popularity' to be a float")
        pulumi.set(__self__, "min_popularity", min_popularity)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if skip_missing_date and not isinstance(skip_missing_date, bool):
            raise TypeError("Expected argument 'skip_missing_date' to be a bool")
        pulumi.set(__self__, "skip_missing_date", skip_missing_date)
        if skip_missing_isbn and not isinstance(skip_missing_isbn, bool):
            raise TypeError("Expected argument 'skip_missing_isbn' to be a bool")
        pulumi.set(__self__, "skip_missing_isbn", skip_missing_isbn)
        if skip_parts_and_sets and not isinstance(skip_parts_and_sets, bool):
            raise TypeError("Expected argument 'skip_parts_and_sets' to be a bool")
        pulumi.set(__self__, "skip_parts_and_sets", skip_parts_and_sets)
        if skip_series_secondary and not isinstance(skip_series_secondary, bool):
            raise TypeError("Expected argument 'skip_series_secondary' to be a bool")
        pulumi.set(__self__, "skip_series_secondary", skip_series_secondary)

    @property
    @pulumi.getter(name="allowedLanguages")
    def allowed_languages(self) -> str:
        """
        Allowed languages. Comma separated list of ISO 639-3 language codes.
        """
        return pulumi.get(self, "allowed_languages")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Metadata Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ignoreds(self) -> Sequence[str]:
        """
        Terms to ignore.
        """
        return pulumi.get(self, "ignoreds")

    @property
    @pulumi.getter(name="minPages")
    def min_pages(self) -> int:
        """
        Minimum pages.
        """
        return pulumi.get(self, "min_pages")

    @property
    @pulumi.getter(name="minPopularity")
    def min_popularity(self) -> float:
        """
        Minimum popularity.
        """
        return pulumi.get(self, "min_popularity")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Metadata Profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="skipMissingDate")
    def skip_missing_date(self) -> bool:
        """
        Skip missing date.
        """
        return pulumi.get(self, "skip_missing_date")

    @property
    @pulumi.getter(name="skipMissingIsbn")
    def skip_missing_isbn(self) -> bool:
        """
        Skip missing ISBN.
        """
        return pulumi.get(self, "skip_missing_isbn")

    @property
    @pulumi.getter(name="skipPartsAndSets")
    def skip_parts_and_sets(self) -> bool:
        """
        Skip parts and sets.
        """
        return pulumi.get(self, "skip_parts_and_sets")

    @property
    @pulumi.getter(name="skipSeriesSecondary")
    def skip_series_secondary(self) -> bool:
        """
        Skip secondary series books.
        """
        return pulumi.get(self, "skip_series_secondary")


class AwaitableGetProfileResult(GetProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProfileResult(
            allowed_languages=self.allowed_languages,
            id=self.id,
            ignoreds=self.ignoreds,
            min_pages=self.min_pages,
            min_popularity=self.min_popularity,
            name=self.name,
            skip_missing_date=self.skip_missing_date,
            skip_missing_isbn=self.skip_missing_isbn,
            skip_parts_and_sets=self.skip_parts_and_sets,
            skip_series_secondary=self.skip_series_secondary)


def get_profile(name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProfileResult:
    """
    <!-- subcategory:Profiles -->Single Metadata Profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_readarr as readarr

    example = readarr.Metadata.get_profile(name="Example")
    ```


    :param str name: Metadata Profile name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('readarr:Metadata/getProfile:getProfile', __args__, opts=opts, typ=GetProfileResult).value

    return AwaitableGetProfileResult(
        allowed_languages=pulumi.get(__ret__, 'allowed_languages'),
        id=pulumi.get(__ret__, 'id'),
        ignoreds=pulumi.get(__ret__, 'ignoreds'),
        min_pages=pulumi.get(__ret__, 'min_pages'),
        min_popularity=pulumi.get(__ret__, 'min_popularity'),
        name=pulumi.get(__ret__, 'name'),
        skip_missing_date=pulumi.get(__ret__, 'skip_missing_date'),
        skip_missing_isbn=pulumi.get(__ret__, 'skip_missing_isbn'),
        skip_parts_and_sets=pulumi.get(__ret__, 'skip_parts_and_sets'),
        skip_series_secondary=pulumi.get(__ret__, 'skip_series_secondary'))


@_utilities.lift_output_func(get_profile)
def get_profile_output(name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProfileResult]:
    """
    <!-- subcategory:Profiles -->Single Metadata Profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_readarr as readarr

    example = readarr.Metadata.get_profile(name="Example")
    ```


    :param str name: Metadata Profile name.
    """
    ...
