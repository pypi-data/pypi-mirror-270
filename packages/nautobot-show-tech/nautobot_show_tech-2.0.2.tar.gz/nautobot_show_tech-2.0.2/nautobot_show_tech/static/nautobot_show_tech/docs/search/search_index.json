{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Nautobot Show Tech","text":"<p>    An App for Nautobot. </p>"},{"location":"index.html#overview","title":"Overview","text":""},{"location":"index.html#purpose-providing-diagnostics-in-a-nautobot-environment","title":"Purpose: Providing diagnostics in a Nautobot environment","text":"<p>When troubleshooting an environment, it is best to be able to answer questions about the environment quickly. This process is challenging to perform with a back-and-forth with a customer. Therefore, Nautobot Show Tech is designed to aggregate and provide that information in an easy-to-consume format as a one-time ask. The goal is to aid in troubleshooting managed service customer environments, but it can be extended to do more or be used to meet stakeholder requirements.</p>"},{"location":"index.html#versions-nautobot-2x-or-1x-compatible","title":"Versions: Nautobot 2.X or 1.X compatible","text":"<p>Nautobot Show Tech is versioned in coordination with the Major Release version of Nautobot.  Please be sure to use the appropriate version for best diagnostic return results. - Nautobot Show Tech 2.X will support Nautobot 2.X environments. - Nautobot Show Tech 1.X will support Nautobot 1.X environments.</p>"},{"location":"index.html#screenshots","title":"Screenshots","text":""},{"location":"index.html#recorded-examples","title":"Recorded Examples","text":""},{"location":"index.html#current-release","title":"Current Release","text":"<p>This App is available is not currently open sourced.  Instead it is currently available via pypi.org and the maintainers are not accepting feature requests, bugs, or pull requests at this time.</p>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>Coming Soon. Until then, use this readme and the <code>docs</code> folder in this repository.</p> <ul> <li>User Guide - Overview, Using the App, Getting Started.</li> <li>Administrator Guide - How to Install, Configure, Upgrade, or Uninstall the App.</li> <li>Developer Guide - Extending the App, Code Reference, Contribution Guide.</li> <li>Release Notes / Changelog.</li> <li>Frequently Asked Questions.</li> </ul>"},{"location":"admin/compatibility_matrix.html","title":"Compatibility Matrix","text":"<p>Show Tech has been designed to work primarily as a standalone python package.  Show Tech can be installed and registered with Nautobot as an Nautobot App.  This enables Show Tech Checks to be ran as as Nautobot Jobs.</p>"},{"location":"admin/install.html","title":"Installing the App in Nautobot","text":"<p>Here you will find detailed instructions on how to install and configure the App within your Nautobot environment.</p>"},{"location":"admin/install.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Show Tech is compatible with any Nautobot version.</li> <li>Currently Show Tech works in Linux and docker containers running Linux</li> <li>Show Tech is working on <code>Python 3.8</code> and higher. Lower Python versions may not be compatible with Show Tech.</li> </ul> <p>Note</p> <p>Please check the dedicated page for a full compatibility matrix and the deprecation policy.</p>"},{"location":"admin/install.html#access-requirements","title":"Access Requirements","text":"<p>No additional access is required to run Show Tech.</p>"},{"location":"admin/install.html#install-guide","title":"Install Guide","text":"<p>Note</p> <p>Plugins can be installed manually or using Python's <code>pip</code>. See the nautobot documentation for more details. The pip package name for this plugin is <code>nautobot_show_tech</code>.</p> <p>Currently nautobot_show_tech is only available via the private NTC repository.  Once the Open Source process has been completed, then nautobot_show_tech will be available as a Python package via PyPI and can be installed with <code>pip</code>:</p> <pre><code>pip install nautobot_show_tech\n</code></pre> <p>To ensure nautobot_show_tech is automatically re-installed during future upgrades, create a file named <code>local_requirements.txt</code> (if not already existing) in the Nautobot root directory (alongside <code>requirements.txt</code>) and list the <code>nautobot_show_tech</code> package:</p> <pre><code>echo nautobot_show_tech &gt;&gt; local_requirements.txt\n</code></pre>"},{"location":"admin/uninstall.html","title":"Uninstall the App from Nautobot","text":"<p>Here you will find any steps necessary to cleanly remove the App from your Nautobot environment.</p>"},{"location":"admin/uninstall.html#uninstall-guide","title":"Uninstall Guide","text":"<pre><code>pip uninstall nautobot_show_tech\n</code></pre>"},{"location":"admin/upgrade.html","title":"Upgrading the App","text":"<p>Here you will find any steps necessary to upgrade the App in your Nautobot environment.</p>"},{"location":"admin/upgrade.html#upgrade-guide","title":"Upgrade Guide","text":"<p>When a new release comes out it may be necessary to run a migration of the database to account for any changes in the data models used by this plugin. Execute the command <code>nautobot-server post-upgrade</code> within the runtime environment of your Nautobot installation after updating the <code>show_tech</code> package via <code>pip</code>.</p>"},{"location":"admin/release_notes/index.html","title":"Release Notes","text":"<p>All the published release notes can be found via the navigation menu. All patch releases are included in the same minor release (e.g. <code>v1.2</code>) document.</p>"},{"location":"admin/release_notes/version_1.0.html","title":"v1.0 Release Notes","text":"<p>Developer Note - Remove Me!</p> <p>Guiding Principles:</p> <ul> <li>Changelogs are for humans, not machines.</li> <li>There should be an entry for every single version.</li> <li>The same types of changes should be grouped.</li> <li>Versions and sections should be linkable.</li> <li>The latest version comes first.</li> <li>The release date of each version is displayed.</li> <li>Mention whether you follow Semantic Versioning.</li> </ul> <p>Types of changes:</p> <ul> <li><code>Added</code> for new features.</li> <li><code>Changed</code> for changes in existing functionality.</li> <li><code>Deprecated</code> for soon-to-be removed features.</li> <li><code>Removed</code> for now removed features.</li> <li><code>Fixed</code> for any bug fixes.</li> <li><code>Security</code> in case of vulnerabilities.</li> </ul> <p>This document describes all new features and changes in the release <code>1.0</code>. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"admin/release_notes/version_1.0.html#release-overview","title":"Release Overview","text":"<ul> <li>Major features or milestones</li> <li>Achieved in this <code>x.y</code> release</li> <li>Changes to compatibility with Nautobot and/or other plugins, libraries etc.</li> </ul>"},{"location":"admin/release_notes/version_1.0.html#v101-2021-09-08","title":"[v1.0.1] - 2021-09-08","text":""},{"location":"admin/release_notes/version_1.0.html#added","title":"Added","text":""},{"location":"admin/release_notes/version_1.0.html#changed","title":"Changed","text":""},{"location":"admin/release_notes/version_1.0.html#fixed","title":"Fixed","text":"<ul> <li>#123 Fixed Tag filtering not working in job launch form</li> </ul>"},{"location":"admin/release_notes/version_1.0.html#v100-2021-08-03","title":"[v1.0.0] - 2021-08-03","text":""},{"location":"admin/release_notes/version_1.0.html#added_1","title":"Added","text":""},{"location":"admin/release_notes/version_1.0.html#changed_1","title":"Changed","text":""},{"location":"admin/release_notes/version_1.0.html#fixed_1","title":"Fixed","text":""},{"location":"dev/contributing.html","title":"Contributing to the App","text":"<p>The project is packaged with a light development environment based on <code>docker-compose</code> to help with the local development of the project and to run tests.</p> <p>The project is following Network to Code software development guidelines and is leveraging the following:</p> <ul> <li>Python linting and formatting: <code>black</code>, <code>pylint</code>, <code>bandit</code>, <code>flake8</code>, and <code>pydocstyle</code>.</li> <li>YAML linting is done with <code>yamllint</code>.</li> <li>Django unit test to ensure the plugin is working properly.</li> </ul> <p>Documentation is built using mkdocs. The Docker based development environment automatically starts a container hosting a live version of the documentation website on http://localhost:8080 that auto-refreshes when you make any changes to your local files.</p>"},{"location":"dev/contributing.html#branching-policy","title":"Branching Policy","text":"<p>The branching policy includes the following tenets:</p> <ul> <li>The <code>main</code> branch is locked and can only have a PR merged to it; however, we should only merge to main from <code>develop</code>.</li> <li>The <code>develop</code> branch is the default branch.</li> <li>PRs intended to add new features should be branched from and merged to the next branch.</li> <li>PRs intended to add new features that break backward compatibility should be discussed before a PR is created.</li> <li>PRs intended to address bug fixes and security patches should be branched from and merged to the develop branch.</li> </ul>"},{"location":"dev/contributing.html#release-policy","title":"Release Policy","text":"<p>Show Tech has currently no intended scheduled release schedule, and will release new features in minor versions.</p> <p>When a new release of any kind (e.g. from <code>develop</code> to <code>main</code>, or a release of a <code>stable-&lt;major&gt;.&lt;minor&gt;</code>) is created the following should happen.</p> <ul> <li>A release PR is created:<ul> <li>Add and/or update to the changelog in <code>docs/admin/release_notes/version_&lt;major&gt;.&lt;minor&gt;.md</code> file to reflect the changes.</li> <li>Update the mkdocs.yml file to include updates when adding a new release_notes version file.</li> <li>Change the version from <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-beta</code> to <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> in pyproject.toml.</li> <li>Set the PR to the proper branch, e.g. either <code>main</code> or <code>stable-&lt;major&gt;.&lt;minor&gt;</code>.</li> </ul> </li> <li>Ensure the tests for the PR pass.</li> <li>Merge the PR.</li> <li>Create a new tag:<ul> <li>The tag should be in the form of <code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>.</li> <li>The title should be in the form of <code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>.</li> <li>The description should be the changes that were added to the <code>version_&lt;major&gt;.&lt;minor&gt;.md</code> document.</li> </ul> </li> <li>If merged into <code>main</code>, then push from <code>main</code> to <code>develop</code>, in order to retain the merge commit created when the PR was merged.</li> <li>If the is a new <code>&lt;major&gt;.&lt;minor&gt;</code>, create a <code>stable-&lt;major&gt;.&lt;minor&gt;</code> for the previous version, so that security updates to old versions may be applied more easily.</li> <li>A post release PR is created:<ul> <li>Change the version from <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> to <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch + 1&gt;-beta</code> in pyproject.toml.</li> <li>Set the PR to the proper branch, e.g. either <code>develop</code> or <code>stable-&lt;major&gt;.&lt;minor&gt;</code>.</li> <li>Once tests pass, merge.</li> </ul> </li> </ul>"},{"location":"dev/dev_environment.html","title":"Building Your Development Environment","text":""},{"location":"dev/dev_environment.html#quickstart-guide","title":"Quickstart Guide","text":"<p>The development environment can be used in two ways:</p> <ol> <li>(Recommended) All services, including Nautobot, are spun up using Docker containers and a volume mount so you can develop locally.</li> <li>With a local Poetry environment if you wish to develop outside of Docker, with the caveat of using external services provided by Docker for the database (PostgreSQL by default, MySQL optionally) and Redis services.</li> </ol> <p>This is a quick reference guide if you're already familiar with the development environment provided, which you can read more about later in this document.</p>"},{"location":"dev/dev_environment.html#invoke","title":"Invoke","text":"<p>The Invoke library is used to provide some helper commands based on the environment. There are a few configuration parameters which can be passed to Invoke to override the default configuration:</p> <ul> <li><code>nautobot_ver</code>: the version of Nautobot to use as a base for any built docker containers (default: latest)</li> <li><code>project_name</code>: the default docker compose project name (default: <code>nautobot_show_tech</code>)</li> <li><code>python_ver</code>: the version of Python to use as a base for any built docker containers (default: 3.8)</li> <li><code>local</code>: a boolean flag indicating if invoke tasks should be run on the host or inside the docker containers (default: False, commands will be run in docker containers)</li> <li><code>compose_dir</code>: the full path to a directory containing the project compose files</li> <li><code>compose_files</code>: a list of compose files applied in order (see Multiple Compose files for more information)</li> </ul> <p>Using Invoke these configuration options can be overridden using several methods. Perhaps the simplest is setting an environment variable <code>INVOKE_SHOW_TECH_VARIABLE_NAME</code> where <code>VARIABLE_NAME</code> is the variable you are trying to override. The only exception is <code>compose_files</code>, because it is a list it must be overridden in a YAML file. There is an example <code>invoke.yml</code> (<code>invoke.example.yml</code>) in this directory which can be used as a starting point.</p>"},{"location":"dev/dev_environment.html#docker-development-environment","title":"Docker Development Environment","text":"<p>Tip</p> <p>This is the recommended option for development.</p> <p>This project is managed by Python Poetry and has a few requirements to setup your development environment:</p> <ol> <li>Install Poetry, see the Poetry Documentation for your operating system.</li> <li>Install Docker, see the Docker documentation for your operating system.</li> </ol> <p>Once you have Poetry and Docker installed you can run the following commands (in the root of the repository) to install all other development dependencies in an isolated Python virtual environment:</p> <pre><code>poetry shell\npoetry install\ncp development/creds.example.env development/creds.env\ninvoke build\ninvoke start\n</code></pre> <p>The Nautobot server can now be accessed at http://localhost:8080 and the live documentation at http://localhost:8001.</p> <p>To either stop or destroy the development environment use the following options.</p> <ul> <li>invoke stop - Stop the containers, but keep all underlying systems intact</li> <li>invoke destroy - Stop and remove all containers, volumes, etc. (This results in data loss due to the volume being deleted)</li> </ul>"},{"location":"dev/dev_environment.html#local-poetry-development-environment","title":"Local Poetry Development Environment","text":"<ul> <li>Create an <code>invoke.yml</code> file with the following contents at the root of the repo and edit as necessary</li> </ul> <pre><code>---\nnautobot_show_tech:\nlocal: true\ncompose_files:\n- \"docker-compose.requirements.yml\"\n</code></pre> <p>Run the following commands:</p> <pre><code>poetry shell\npoetry install --extras nautobot\nexport $(cat development/dev.env | xargs)\nexport $(cat development/creds.env | xargs)\ninvoke start &amp;&amp; sleep 5\nnautobot-server migrate\n</code></pre> <p>Note</p> <p>If you want to develop on the latest develop branch of Nautobot, run the following command: <code>poetry add --optional git+https://github.com/nautobot/nautobot@develop</code>. After the <code>@</code> symbol must match either a branch or a tag.</p> <p>You can now run <code>nautobot-server</code> commands as you would from the Nautobot documentation for example to start the development server:</p> <pre><code>nautobot-server runserver 0.0.0.0:8080 --insecure\n</code></pre> <p>Nautobot server can now be accessed at http://localhost:8080.</p> <p>It is typically recommended to launch the Nautobot runserver command in a separate shell so you can keep developing and manage the webserver separately.</p>"},{"location":"dev/dev_environment.html#updating-the-documentation","title":"Updating the Documentation","text":"<p>Documentation dependencies are pinned to exact versions to ensure consistent results. For the development environment, they are defined in the <code>pyproject.toml</code> file.</p> <p>If you need to update any of the documentation dependencies to a newer version, make sure you copy the exact same versions pinned in <code>pyproject.toml</code> to the <code>docs/requirements.txt</code> file as well. The latter is used in the automated build pipeline on ReadTheDocs to build the live version of the documentation.</p>"},{"location":"dev/dev_environment.html#cli-helper-commands","title":"CLI Helper Commands","text":"<p>The project features a CLI helper based on Invoke to help setup the development environment. The commands are listed below in 3 categories:</p> <ul> <li><code>dev environment</code></li> <li><code>utility</code></li> <li><code>testing</code></li> </ul> <p>Each command can be executed with <code>invoke &lt;command&gt;</code>. All commands support the arguments <code>--nautobot-ver</code> and <code>--python-ver</code> if you want to manually define the version of Python and Nautobot to use. Each command also has its own help <code>invoke &lt;command&gt; --help</code></p> <p>Note</p> <p>To run the mysql (mariadb) development environment, set the environment variable as such <code>export NAUTOBOT_USE_MYSQL=1</code>.</p>"},{"location":"dev/dev_environment.html#local-development-environment","title":"Local Development Environment","text":"<pre><code>  build            Build all docker images.\n  debug            Start Nautobot and its dependencies in debug mode.\n  destroy          Destroy all containers and volumes.\n  restart          Restart Nautobot and its dependencies in detached mode.\n  start            Start Nautobot and its dependencies in detached mode.\n  stop             Stop Nautobot and its dependencies.\n</code></pre>"},{"location":"dev/dev_environment.html#utility","title":"Utility","text":"<pre><code>  cli              Launch a bash shell inside the running Nautobot container.\n  create-user      Create a new user in django (default: admin), will prompt for password.\n  makemigrations   Run Make Migration in Django.\n  nbshell          Launch a nbshell session.\n</code></pre>"},{"location":"dev/dev_environment.html#testing","title":"Testing","text":"<pre><code>  bandit           Run bandit to validate basic static code security analysis.\n  black            Run black to check that Python files adhere to its style standards.\n  flake8           Run flake8 to check that Python files adhere to its style standards.\n  pydocstyle       Run pydocstyle to validate docstring formatting adheres to NTC defined standards.\n  pylint           Run pylint code analysis.\n  tests            Run all tests for this plugin.\n  unittest         Run Django unit tests for the plugin.\n</code></pre>"},{"location":"dev/dev_environment.html#project-overview","title":"Project Overview","text":"<p>This project provides the ability to develop and manage the Nautobot server locally (with supporting services being Dockerized) or by using only Docker containers to manage Nautobot. The main difference between the two environments is the ability to debug and use pdb when developing locally. Debugging with pdb within the Docker container is more complicated, but can still be accomplished by either entering into the container (via <code>docker exec</code>) or attaching your IDE to the container and running the Nautobot service manually within the container.</p> <p>The upside to having the Nautobot service handled by Docker rather than locally is that you do not have to manage the Nautobot server. The Docker logs provide the majority of the information you will need to help troubleshoot, while getting started quickly and not requiring you to perform several manual steps and remembering to have the Nautobot server running in a separate terminal while you develop.</p> <p>Note</p> <p>The local environment still uses Docker containers for the supporting services (Postgres, Redis, and RQ Worker), but the Nautobot server is handled locally by you, the developer.</p> <p>Follow the directions below for the specific development environment that you choose.</p>"},{"location":"dev/dev_environment.html#poetry","title":"Poetry","text":"<p>Poetry is used in lieu of the \"virtualenv\" commands and is leveraged in both environments. The virtual environment will provide all of the Python packages required to manage the development environment such as Invoke. See the Local Development Environment section to see how to install Nautobot if you're going to be developing locally (i.e. not using the Docker container).</p> <p>The <code>pyproject.toml</code> file outlines all of the relevant dependencies for the project:</p> <ul> <li><code>tool.poetry.dependencies</code> - the main list of dependencies.</li> <li><code>tool.poetry.dev-dependencies</code> - development dependencies, to facilitate linting, testing, and documentation building.</li> </ul> <p>The <code>poetry shell</code> command is used to create and enable a virtual environment managed by Poetry, so all commands ran going forward are executed within the virtual environment. This is similar to running the <code>source venv/bin/activate</code> command with virtualenvs. To install project dependencies in the virtual environment, you should run <code>poetry install</code> - this will install both project and development dependencies.</p> <p>For more details about Poetry and its commands please check out its online documentation.</p>"},{"location":"dev/dev_environment.html#full-docker-development-environment","title":"Full Docker Development Environment","text":"<p>This project is set up with a number of Invoke tasks consumed as simple CLI commands to get developing fast. You'll use a few <code>invoke</code> commands to get your environment up and running.</p>"},{"location":"dev/dev_environment.html#copy-the-credentials-file-for-nautobot","title":"Copy the credentials file for Nautobot","text":"<p>First, you need to create the <code>development/creds.env</code> file - it stores a bunch of private information such as passwords and tokens for your local Nautobot install. You can make a copy of the <code>development/creds.example.env</code> and modify it to suit you.</p> <pre><code>cp development/creds.example.env development/creds.env\n</code></pre>"},{"location":"dev/dev_environment.html#invoke-building-the-docker-image","title":"Invoke - Building the Docker Image","text":"<p>The first thing you need to do is build the necessary Docker image for Nautobot that installs the specific <code>nautobot_ver</code>. The image is used for Nautobot and the Celery worker service used by Docker Compose.</p> <pre><code>\u279c invoke build\n... &lt;omitted for brevity&gt;\n#14 exporting to image\n#14 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00\n#14 exporting layers\n#14 exporting layers 1.2s done\n#14 writing image sha256:2d524bc1665327faa0d34001b0a9d2ccf450612bf8feeb969312e96a2d3e3503 done\n#14 naming to docker.io/nautobot_show_tech/nautobot:latest-py3.7 done\n</code></pre>"},{"location":"dev/dev_environment.html#invoke-starting-the-development-environment","title":"Invoke - Starting the Development Environment","text":"<p>Next, you need to start up your Docker containers.</p> <pre><code>\u279c invoke start\nStarting Nautobot in detached mode...\nRunning docker-compose command \"up --detach\"\nCreating network \"nautobot_show_tech_default\" with the default driver\nCreating volume \"nautobot_show_tech_postgres_data\" with default driver\nCreating nautobot_show_tech_redis_1 ...\nCreating nautobot_show_tech_docs_1  ...\nCreating nautobot_show_tech_postgres_1 ...\nCreating nautobot_show_tech_postgres_1 ... done\nCreating nautobot_show_tech_redis_1    ... done\nCreating nautobot_show_tech_nautobot_1 ...\nCreating nautobot_show_tech_docs_1     ... done\nCreating nautobot_show_tech_nautobot_1 ... done\nCreating nautobot_show_tech_worker_1   ...\nCreating nautobot_show_tech_worker_1   ... done\nDocker Compose is now in the Docker CLI, try `docker compose up`\n</code></pre> <p>This will start all of the Docker containers used for hosting Nautobot. You should see the following containers running after <code>invoke start</code> is finished.</p> <pre><code>\u279c docker ps\n****CONTAINER ID   IMAGE                            COMMAND                  CREATED          STATUS          PORTS                                       NAMES\nee90fbfabd77   nautobot_show_tech/nautobot:latest-py3.7   \"nautobot-server rqw\u2026\"   16 seconds ago   Up 13 seconds                                               nautobot_show_tech_worker_1\nb8adb781d013   nautobot_show_tech/nautobot:latest-py3.7   \"/docker-entrypoint.\u2026\"   20 seconds ago   Up 15 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   nautobot_show_tech_nautobot_1\nd64ebd60675d   nautobot_show_tech/nautobot:latest-py3.7   \"mkdocs serve -v -a \u2026\"   25 seconds ago   Up 18 seconds   0.0.0.0:8001-&gt;8080/tcp, :::8001-&gt;8080/tcp   nautobot_show_tech_docs_1\ne72d63129b36   postgres:13-alpine               \"docker-entrypoint.s\u2026\"   25 seconds ago   Up 19 seconds   0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp   nautobot_show_tech_postgres_1\n96c6ff66997c   redis:6-alpine                   \"docker-entrypoint.s\u2026\"   25 seconds ago   Up 21 seconds   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp   nautobot_show_tech_redis_1\n</code></pre> <p>Once the containers are fully up, you should be able to open up a web browser, and view:</p> <ul> <li>The Nautobot homepage at http://localhost:8080</li> <li>A live version of the documentation at http://localhost:8001</li> </ul> <p>Note</p> <p>Sometimes the containers take a minute to fully spin up. If the page doesn't load right away, wait a minute and try again.</p>"},{"location":"dev/dev_environment.html#invoke-creating-a-superuser","title":"Invoke - Creating a Superuser","text":"<p>The Nautobot development image will automatically provision a super user when specifying the following variables within <code>creds.env</code> which is the default when copying <code>creds.example.env</code> to <code>creds.env</code>.</p> <ul> <li><code>NAUTOBOT_CREATE_SUPERUSER=true</code></li> <li><code>NAUTOBOT_SUPERUSER_API_TOKEN=0123456789abcdef0123456789abcdef01234567</code></li> <li><code>NAUTOBOT_SUPERUSER_PASSWORD=admin</code></li> </ul> <p>Note</p> <p>The default username is admin, but can be overridden by specifying NAUTOBOT_SUPERUSER_USERNAME.</p> <p>If you need to create additional superusers, run the follow commands.</p> <pre><code>\u279c invoke createsuperuser\nRunning docker-compose command \"ps --services --filter status=running\"\nRunning docker-compose command \"exec nautobot nautobot-server createsuperuser --username admin\"\nError: That username is already taken.\nUsername: ntc\nEmail address: ntc@networktocode.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n</code></pre>"},{"location":"dev/dev_environment.html#invoke-stopping-the-development-environment","title":"Invoke - Stopping the Development Environment","text":"<p>The last command to know for now is <code>invoke stop</code>.</p> <pre><code>\u279c invoke stop\nStopping Nautobot...\nRunning docker-compose command \"down\"\nStopping nautobot_show_tech_worker_1   ...\nStopping nautobot_show_tech_nautobot_1 ...\nStopping nautobot_show_tech_docs_1     ...\nStopping nautobot_show_tech_redis_1    ...\nStopping nautobot_show_tech_postgres_1 ...\nStopping nautobot_show_tech_worker_1   ... done\nStopping nautobot_show_tech_nautobot_1 ... done\nStopping nautobot_show_tech_postgres_1 ... done\nStopping nautobot_show_tech_redis_1    ... done\nStopping nautobot_show_tech_docs_1     ... done\nRemoving nautobot_show_tech_worker_1   ...\nRemoving nautobot_show_tech_nautobot_1 ...\nRemoving nautobot_show_tech_docs_1     ...\nRemoving nautobot_show_tech_redis_1    ...\nRemoving nautobot_show_tech_postgres_1 ...\nRemoving nautobot_show_tech_postgres_1 ... done\nRemoving nautobot_show_tech_docs_1     ... done\nRemoving nautobot_show_tech_worker_1   ... done\nRemoving nautobot_show_tech_redis_1    ... done\nRemoving nautobot_show_tech_nautobot_1 ... done\nRemoving network nautobot_show_tech_default\n</code></pre> <p>This will safely shut down all of your running Docker containers for this project. When you are ready to spin containers back up, it is as simple as running <code>invoke start</code> again as seen previously.</p> <p>Warning</p> <p>If you're wanting to reset the database and configuration settings, you can use the <code>invoke destroy</code> command, but you will lose any data stored in those containers, so make sure that is what you want to do.</p>"},{"location":"dev/dev_environment.html#real-time-updates-how-cool","title":"Real-Time Updates? How Cool!","text":"<p>Your environment should now be fully setup, all necessary Docker containers are created and running, and you're logged into Nautobot in your web browser. Now what?</p> <p>Now you can start developing your plugin in the project folder!</p> <p>The magic here is the root directory is mounted inside your Docker containers when built and ran, so any changes made to the files in here are directly updated to the Nautobot plugin code running in Docker. This means that as you modify the code in your plugin folder, the changes will be instantly updated in Nautobot.</p> <p>Warning</p> <p>There are a few exceptions to this, as outlined in the section To Rebuild or Not To Rebuild.</p> <p>The back-end Django process is setup to automatically reload itself (it only takes a couple of seconds) every time a file is updated (saved). So for example, if you were to update one of the files like <code>tables.py</code>, then save it, the changes will be visible right away in the web browser!</p> <p>Note</p> <p>You may get connection refused while Django reloads, but it should be refreshed fairly quickly.</p>"},{"location":"dev/dev_environment.html#docker-logs","title":"Docker Logs","text":"<p>When trying to debug an issue, one helpful thing you can look at are the logs within the Docker containers.</p> <pre><code>\u279c docker logs &lt;name of container&gt; -f\n</code></pre> <p>Note</p> <p>The <code>-f</code> tag will keep the logs open, and output them in realtime as they are generated.</p> <p>So for example, our plugin is named <code>nautobot_show_tech</code>, the command would most likely be <code>docker logs nautobot_show_tech_nautobot_1 -f</code>. You can find the name of all running containers via <code>docker ps</code>.</p> <p>If you want to view the logs specific to the worker container, simply use the name of that container instead.</p>"},{"location":"dev/dev_environment.html#to-rebuild-or-not-to-rebuild","title":"To Rebuild or Not to Rebuild","text":"<p>Most of the time, you will not need to rebuild your images. Simply running <code>invoke start</code> and <code>invoke stop</code> is enough to keep your environment going.</p> <p>However there are a couple of instances when you will want to.</p>"},{"location":"dev/dev_environment.html#updating-environment-variables","title":"Updating Environment Variables","text":"<p>To add environment variables to your containers, thus allowing Nautobot to use them, you will update/add them in the <code>development/development.env</code> file. However, doing so is considered updating the underlying container shell, instead of Django (which auto restarts itself on changes).</p> <p>To get new environment variables to take effect, you will need stop any running images, rebuild the images, then restart them. This can easily be done with 3 commands:</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre> <p>Once completed, the new/updated environment variables should now be live.</p>"},{"location":"dev/dev_environment.html#installing-additional-python-packages","title":"Installing Additional Python Packages","text":"<p>If you want your plugin to leverage another available Nautobot plugin or another Python package, you can easily add them into your Docker environment.</p> <pre><code>\u279c poetry shell\n\u279c poetry add &lt;package_name&gt;\n</code></pre> <p>Once the dependencies are resolved, stop the existing containers, rebuild the Docker image, and then start all containers again.</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre>"},{"location":"dev/dev_environment.html#installing-additional-nautobot-plugins","title":"Installing Additional Nautobot Plugins","text":"<p>Let's say for example you want the new plugin you're creating to integrate into Slack. To do this, you will want to integrate into the existing Nautobot ChatOps Plugin.</p> <pre><code>\u279c poetry shell\n\u279c poetry add nautobot-chatops\n</code></pre> <p>Once you activate the virtual environment via Poetry, you then tell Poetry to install the new plugin.</p> <p>Before you continue, you'll need to update the file <code>development/nautobot_config.py</code> accordingly with the name of the new plugin under <code>PLUGINS</code> and any relevant settings as necessary for the plugin under <code>PLUGINS_CONFIG</code>. Since you're modifying the underlying OS (not just Django files), you need to rebuild the image. This is a similar process to updating environment variables, which was explained earlier.</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre> <p>Once the containers are up and running, you should now see the new plugin installed in your Nautobot instance.</p> <p>Note</p> <p>You can even launch an <code>ngrok</code> service locally on your laptop, pointing to port 8080 (such as for chatops development), and it will point traffic directly to your Docker images.</p>"},{"location":"dev/dev_environment.html#updating-python-version","title":"Updating Python Version","text":"<p>To update the Python version, you can update it within <code>tasks.py</code>.</p> <pre><code>namespace = Collection(\"nautobot_show_tech\")\nnamespace.configure(\n{\n\"nautobot_show_tech\": {\n...\n\"python_ver\": \"3.7\",\n...\n}\n}\n)\n</code></pre> <p>Or set the <code>INVOKE_NAUTOBOT_GOLDEN_CONFIG_PYTHON_VER</code> variable.</p>"},{"location":"dev/dev_environment.html#updating-nautobot-version","title":"Updating Nautobot Version","text":"<p>To update the Nautobot version, you can update it within <code>tasks.py</code>.</p> <pre><code>namespace = Collection(\"nautobot_show_tech\")\nnamespace.configure(\n{\n\"nautobot_show_tech\": {\n...\n\"nautobot_ver\": \"1.0.2\",\n...\n}\n}\n)\n</code></pre> <p>Or set the <code>INVOKE_SHOW_TECH_NAUTOBOT_VER</code> variable.</p>"},{"location":"dev/dev_environment.html#other-miscellaneous-commands-to-know","title":"Other Miscellaneous Commands To Know","text":""},{"location":"dev/dev_environment.html#python-shell","title":"Python Shell","text":"<p>To drop into a Django shell for Nautobot (in the Docker container) run:</p> <pre><code>\u279c invoke nbshell\n</code></pre> <p>This is the same as running:</p> <pre><code>\u279c invoke cli\n\u279c nautobot-server nbshell\n</code></pre>"},{"location":"dev/dev_environment.html#ipython-shell-plus","title":"iPython Shell Plus","text":"<p>Django also has a more advanced shell that uses iPython and that will automatically import all the models:</p> <pre><code>\u279c invoke shell-plus\n</code></pre> <p>This is the same as running:</p> <pre><code>\u279c invoke cli\n\u279c nautobot-server shell_plus\n</code></pre>"},{"location":"dev/dev_environment.html#tests","title":"Tests","text":"<p>To run tests against your code, you can run all of the tests that TravisCI runs against any new PR with:</p> <pre><code>\u279c invoke tests\n</code></pre> <p>To run an individual test, you can run any or all of the following:</p> <pre><code>\u279c invoke unittest\n\u279c invoke bandit\n\u279c invoke black\n\u279c invoke flake8\n\u279c invoke pydocstyle\n\u279c invoke pylint\n</code></pre>"},{"location":"dev/extending.html","title":"Extending the App","text":"<p>Extending the application is welcome, however it is best to open an issue first, to ensure that a PR would be accepted and makes sense in terms of features and design.</p>"},{"location":"dev/extending.html#ways-you-may-consider-extending-the-app","title":"Ways you may consider extending the App","text":"<p>1) Add a show_tech_check.yaml file      - Use date.yaml as an example.  This will use the existing entry_point, subprocess_run.py, to run a command against the OS.      - Use nautobot_server_jobs.yaml as an example.  This will use the existing entry_point, subprocess_run.py, as well as a nautobot-server command show_tech_check_jobs.py to run. This example also provides the option to add a json payload for entry_point options.</p> <p>2) Add a entry_point.py file         - Use subprocess_run.py as an example.  You will then need a show_tech_check.yaml file to pass data into that entry_point.</p> <p>3) Edit functionality of the run_check.py main script. Please exercise caution here as we will want to ensure backwards compatibility.</p>"},{"location":"dev/framework.html","title":"Show Tech's Design and Code Intent","text":""},{"location":"dev/framework.html#show-tech-in-action","title":"Show Tech in action","text":"<p>Show Tech was written to capture errors and include them in the output instead of failing or stalling.  I don't know the name of this design methodology, but it is very useful when you want as much data in a single go as possible and do not want the poor soul running the code to have to troubleshoot stack traces and other errors.  As a diagnostic tool Show Tech does it's best to run each check as designed and return the output.  Please use this as a design choice and keep that methodology.</p>"},{"location":"dev/framework.html#show_tech_checks","title":"Show_tech_checks","text":"<p>Checks will be written as a combination python code to perform the check and yaml formatted data to run the check. The check.yaml file will be written to account for argument passing.  The entry_point.py file will be written in a way that a dictionary can be passed by importing the check.yaml file with parameters around how the check.py file will be run.  This will allow run_check.py to pass a check dictionary to entry_point.py and not care about the details. Object oriented programming (OOP) is neat.</p> <p>To aid in additions to the app and more checks, each check will be a standardized file. Checks will have properties for enabling or disabling by default. This will allow us to roll checks out slowly or toggle off certain ones by a Nautobot admin. The intent is that checks could be enabled or disabled from the Nautobot GUI, this is not a feature at this time.  Checks will have properties and parameters. Some of these may be immutable. Parameters will help structure the arguments a user could pass into Show Tech to run the check.</p>"},{"location":"dev/framework.html#first-set-of-checks","title":"First Set of Checks","text":"<ul> <li>utilize the subprocess module for running commands against a host</li> <li>entry point will be a wrapper for the subprocess module</li> <li>will focus on human readable responses from the check. An option for json data output will always be included.</li> <li>will allow output to be put into a zip file.</li> </ul>"},{"location":"dev/framework.html#second-and-beyond-set-of-checks-to-be-added-later","title":"Second and Beyond Set of Checks to be added later","text":"<ul> <li>Should follow the same guidelines for development as the first set of checks.</li> <li>Each check should have a check.yaml file which has an enyry point into a check.py file</li> </ul>"},{"location":"dev/framework.html#scripts-in-show-tech","title":"Scripts in Show Tech","text":"<p>run_check.py was designed to handle the running of checks as if they were actions.</p> <p>helpers.py was designed for common tasks which will be relied upon by Show Tech but are generic functionality.</p> <p>update_readme.py was designed to update the readme in the show_tech_checks folder and keep check information up to date.</p>"},{"location":"dev/framework.html#show-tech-input","title":"Show Tech Input","text":"<p>Show Tech can be run a few ways. The primary way is via finding all <code>enabled: true</code> key:value in each rachet_check.yaml file. Then outputting via Zip file of all checks ran with the results being stored as yaml files.  This provides an immediate answer without customizing any outputs.  This behavior can be overridden.</p> <p>1) Enabled checks - search for all show_tech_checks/*.yaml files and find all checks with <code>enabled: true</code> <pre><code>nautobot_show_tech\n</code></pre></p> <p>2) Single <pre><code>nautobot_show_tech --check_name date\n</code></pre></p> <p>3) Idea: Multiple  - Still thinking on this one. Not available currently <pre><code>nautobot_show_tech --check_name date hostname\n</code></pre></p>"},{"location":"dev/framework.html#show-tech-output","title":"Show Tech Output","text":"<p>Show Tech can output in 3 consistent ways currently. The primary way is via API and a json payload will be generated in the same structure as the yaml example below.  This behavior can be overridden.</p> <p>1) via api</p> <p>2) via a temp directory where the data will be wiped on reload and a zip file output</p> <p>3) via output to the screen</p>"},{"location":"dev/framework.html#examples","title":"Examples","text":"<p><pre><code># yaml example provides key descriptions\n# json example provides an actual output for API consumption\ncheck_name:\ncommand: check_name command being ran\ncommand_result: capture and return result of running command\ncommand_result_status: enum options of `Success`, `Failure`, `Error`\ncommand_result_type: best estimate for string, json, or raw text in `command_result`\ncommand_result_error: capture and return any errors when running the command through the entry_point.\nentry_point_error: capture and return any errors when running the entry_point script\noutput_version: versioning output for better API handling\n</code></pre> <pre><code>{\n\"check_name\": {\n\"command\": \"date\",\n\"command_result\": \"Mon Oct 9 02:04:26 UTC 2023\",\n\"command_result_status\": \"success\",\n\"command_result_type\": \"best estimate for string, json, or raw text in `command_result`\",\n\"command_result_error\": \"None\",\n\"entry_point_error\": \"None\",\n},\n\"output_version\": \"v1\"\n}\n</code></pre></p>"},{"location":"dev/code_reference/index.html","title":"Code Reference","text":"<p>Auto-generated code reference documentation from docstrings.</p> <p>Developer Note - Remove Me!</p> <p>Uses mkdocstrings syntax to auto-generate code documentation from docstrings. Two example pages are provided (api and package), add new stubs for each module or package that you think has relevant documentation.</p>"},{"location":"dev/code_reference/api.html","title":"Show Tech API Package","text":""},{"location":"dev/code_reference/api.html#nautobot_show_tech.api","title":"<code>nautobot_show_tech.api</code>","text":"<p>REST API module for show_tech plugin.</p>"},{"location":"dev/code_reference/package.html","title":"Package","text":""},{"location":"dev/code_reference/package.html#nautobot_show_tech","title":"<code>nautobot_show_tech</code>","text":"<p>App declaration for nautobot_show_tech.</p>"},{"location":"dev/code_reference/package.html#nautobot_show_tech.NautobotShowTechConfig","title":"<code>NautobotShowTechConfig</code>","text":"<p>             Bases: <code>NautobotAppConfig</code></p> <p>App configuration for the nautobot_show_tech app.</p> Source code in <code>nautobot_show_tech/__init__.py</code> <pre><code>class NautobotShowTechConfig(NautobotAppConfig):\n\"\"\"App configuration for the nautobot_show_tech app.\"\"\"\nname = \"nautobot_show_tech\"\nverbose_name = \"Nautobot Show Tech\"\nversion = __version__\nauthor = \"Network to Code, LLC\"\ndescription = \"An app to aid in troubleshooting a Nautobot environment..\"\nbase_url = \"show-tech\"\nrequired_settings = []\nmin_version = \"2.0.0\"\nmax_version = \"2.9999\"\ndefault_settings = {\n\"nautobot_cloud_api_host\": \"https://nautobot.cloud\",\n\"nautobot_cloud_api_organization_id\": \"\",\n\"nautobot_cloud_api_token\": \"\",\n}\ncaching_config = {}\n</code></pre>"},{"location":"user/app_getting_started.html","title":"Getting Started with the App","text":"<p>This document provides a step-by-step tutorial on how to get the App going and how to use it.</p>"},{"location":"user/app_getting_started.html#install-the-app","title":"Install the App","text":"<p>To install the App, please follow the instructions detailed in the Installation Guide.</p>"},{"location":"user/app_getting_started.html#first-steps-with-the-app","title":"First steps with the App","text":"<p>To run Show Tech, issue the CLI command <pre><code>nautobot_show_tech\n</code></pre></p> <p>This will run the workflow for all enabled checks.</p>"},{"location":"user/app_getting_started.html#enabled-checks","title":"Enabled Checks","text":"<p>Be sure to see nautobot_show_tech/show_tech_checks/README.md for details about which checks are enabled, what commands they run, and more.  To disable a check, please update the <code>enabled</code> field to be <code>false</code>.</p>"},{"location":"user/app_getting_started.html#what-are-the-next-steps","title":"What are the next steps?","text":"<p>Once Show Tech has run, it will output the results of the checks to a zip file and will provide a path/to/results; usually in <code>/tmp/</code> directory.  This zip file can then be uploaded to a support case.</p>"},{"location":"user/app_overview.html","title":"App Overview","text":"<p>This document provides an overview of the App including critical information and import considerations when applying it to your Nautobot environment.</p> <p>Note</p> <p>Throughout this documentation, the terms \"app\" and \"plugin\" will be used interchangeably.</p>"},{"location":"user/app_overview.html#description","title":"Description","text":"<p>Purpose: When troubleshooting an environment, it is best to be able to answer questions about the environment quickly. This process is difficult to perform with a back and forth with a customer. Therefore, Show Tech is designed to aggregate that information together and provide it in a easy to consume format as a one-time ask. The goal is to aid in troubleshooting managed service customer environments, but can absolutely be extended to do more or be used to stakeholder requirements.</p>"},{"location":"user/app_overview.html#audience-user-personas-who-should-use-this-app","title":"Audience (User Personas) - Who should use this App?","text":"<p>All users of Nautobot are encouraged to use Show Tech any time there is the need for troubleshooting the Nautobot environment.</p>"},{"location":"user/app_overview.html#authors-and-maintainers","title":"Authors and Maintainers","text":"<p>Matt Miller Nikko Hayden</p>"},{"location":"user/app_use_cases.html","title":"Using the App","text":"<p>This document describes common use-cases and scenarios for this App.</p>"},{"location":"user/app_use_cases.html#general-usage","title":"General Usage","text":"<p>Show Tech has been designed as a \"show tech\" functionality that allows for troubleshooting of a Nautobot environment.</p> <p>To operate Show Tech, run <code>nautobot_show_tech</code> from the command line.</p>"},{"location":"user/faq.html","title":"Frequently Asked Questions","text":"<p>Is Show Tech a standalone program or a Nautobot App? - Show Tech is primarily intended a standalone program, however it can be registered as a Nautobot App. The reason being is that if Nautobot is down, Show Tech needs to be able to continue to function.</p> <p>Do you recommend installing Show Tech as a Nautobot App? - Yes. The diagnostics functionality is the same however as a Nautobot App we can leverage Nautobot Jobs and Nautobot views for quality-of-life.</p> <p>Who is the target audience of Show Tech? - Initially the target audience is anyone looking for assistance in troubleshooting an Nautobot Environment.  Show Tech performs several checks which help provide information about what could be going wrong. - Additionally, there are features of Show Tech which may be important to other audiences. We hope to include those people as we iterate Show Tech.</p> <p>Why is the name of the App Show Tech? - The name Show Tech was chosen to because it is recognizable to known industry naming patterns for the intended use-case.</p>"}]}