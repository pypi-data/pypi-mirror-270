Metadata-Version: 2.1
Name: crud_repository
Version: 0.1.0
Summary: The CRUDRepository is a Python project designed to provide a generic implementation of Create, Read, Update, and Delete (CRUD) operations for various databases.
Home-page: https://github.com/dellius-alexander/CRUDRepository.git
Author: Dellius Alexander
Author-email: Dellius Alexander <dalexander@hyfisolutions.com>, info@hyfisolutions.com
Maintainer-email: Dellius Alexander <dalexander@hyfisolutions.com>
License: MIT License
        
        Copyright (c) 2024 Dellius Alexander
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/dellius-alexander/CRUDRepository.git
Keywords: crud-repository,database,model,abstraction
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: sqlalchemy >=2.0.29
Requires-Dist: psycopg2-binary >=2.9.9
Requires-Dist: python-dotenv >=1.0.1
Requires-Dist: colorlog >=6.4.1
Requires-Dist: cryptography >=42.0.5
Requires-Dist: pymysql >=1.1.0
Requires-Dist: SQLAlchemy-Utils >=0.41.2

[![Build test and deploy to package repository](https://github.com/dellius-alexander/CRUDRepository/actions/workflows/deploy.yml/badge.svg?branch=main)](https://github.com/dellius-alexander/CRUDRepository/actions/workflows/deploy.yml)

---

# CRUD Repository

---
## Description

The CRUDRepository is a Python project designed to provide a 
generic implementation of Create, Read, Update, and Delete (CRUD) 
operations for various databases. It uses the Repository design pattern 
to abstract the data access layer, allowing for easy switching between 
different databases using the Factory pattern in which each database 
object implements a Singleton object.  

The project includes classes for handling different types of databases 
such as PostgreSQL, MySQL, and MariaDB. Each of these classes implements 
a common Interface, ensuring a consistent method of interaction 
regardless of the underlying database.  

The CRUDRepository also includes a Repository class that provides generic 
CRUD operations. This class can be used as a base for creating more specific 
repositories, like the test Repository UserRepository included in the project, which is 
designed to manage User instances.  

The project uses SQLAlchemy for ORM, providing a high-level, Pythonic 
interface for database operations. It also includes a DatabaseFactory for 
creating instances of the appropriate database class based on provided 
configuration.  

In summary, CRUDRepository is a flexible and extensible 
foundation for Python applications that require database interactions, 
abstracting the complexities of direct database access and providing a 
clear and simple interface for performing CRUD operations.

## Class Diagram

```mermaid
classDiagram
    class Base {
    }
    class User {
        +id: int
        +username: str
        +password: str
    }
    class IDatabase {
        +connect(): Connection
        +get_session(): scoped_session
    }
    class IRepository ~Base as T~ {
        +create(entity: T) : T
        +read(id) : T
        +update(entity: T): T
        +delete(entity: T): None
    }
    class Repository {
        #database: IDatabase
        #model: T
        +create(entity: T) : T
        +read(id) : T
        +update(entity: T): T
        +delete(entity: T): None
    }
    class UserRepository {
        +__init__(database: IDatabase)
    }
    class PostgreSQLDatabase {
        #session: scoped_session
        #engine: Engine
        +connect(): Connection
        +get_session(): scoped_session
    }
    class MySQLDatabase {
        #session: scoped_session
        #engine: Engine
        +connect(): Connection
        +get_session(): scoped_session
    }
    class MariaDBDatabase {
        #session: scoped_session
        #engine: Engine
        +connect(): Connection
        +get_session(): scoped_session
    }
    IDatabase <|-- PostgreSQLDatabase: Implements
    IDatabase <|-- MySQLDatabase: Implements
    IDatabase <|-- MariaDBDatabase: Implements
    class DatabaseFactory {
        +create(config: dict): IDatabase
    }
    
    IRepository ~Base as T~ <|-- Repository : Implements
    Repository <|-- UserRepository: Implements
    PostgreSQLDatabase "1" -- "1" Repository: Uses
    MySQLDatabase "1" -- "1" Repository: Uses
    MariaDBDatabase "1" -- "1" Repository: Uses
    UserRepository "1" -- "1" User: Manages
    Base <|-- User: Implements
    DatabaseFactory --> PostgreSQLDatabase: << create >>
    DatabaseFactory --> MySQLDatabase: << create >>
    DatabaseFactory --> MariaDBDatabase: << create >>
```

### In this diagram (Class Diagram):

- `Base` is a base class for all models, and `User` is a specific model that extends `Base`.
- `IDatabase` is an abstract base class that defines the interface for a database. `PostgreSQLDatabase`, `MySQLDatabase`, and `MariaDBDatabase` are concrete implementations of this interface.
- `DatabaseFactory` is a factory class that creates instances of `PostgreSQLDatabase`, `MySQLDatabase`, or `MariaDBDatabase` based on the provided configuration.
- `IRepository ~T~` is an abstract base class that defines the interface for a repository, and `Repository ~Base~` is a generic implementation of this interface that is bound to the `Base` model class.
- `UserRepository` is a specific repository that manages `User` instances.
- `PostgreSQLDatabase`, `MySQLDatabase`, and `MariaDBDatabase` are used by `Repository ~Base~`, and `UserRepository` manages `User` instances.

---

## Sequence Diagram

```mermaid
sequenceDiagram
    participant Client
    participant UserRepository
    participant Repository
    participant DatabaseFactory
    participant PostgreSQLDatabase
    participant MySQLDatabase
    participant MariaDBDatabase
    participant Session
    participant User
    Client->>UserRepository: performOperation(user, operation)
    alt operation == 'create'
        UserRepository->>Repository: create(user)
        Repository->>DatabaseFactory: create(config)
        alt db_name == 'postgresql'
            DatabaseFactory-->>PostgreSQLDatabase: create(config)
            PostgreSQLDatabase-->>Repository: return session
        else db_name == 'mysql'
            DatabaseFactory-->>MySQLDatabase: create(config)
            MySQLDatabase-->>Repository: return session
        else db_name == 'mariadb'
            DatabaseFactory-->>MariaDBDatabase: create(config)
            MariaDBDatabase-->>Repository: return session
        end
        Repository->>Session: add(user)
        Session->>User: add(user)
        Repository->>Session: commit()
        Session-->>Repository: commit successful
        Repository-->>UserRepository: return user
        UserRepository-->>Client: return user
    else operation == 'read'
        UserRepository->>Repository: read(id)
        Repository->>DatabaseFactory: create(config)
        alt db_name == 'postgresql'
            DatabaseFactory-->>PostgreSQLDatabase: create(config)
            PostgreSQLDatabase-->>Repository: return session
        else db_name == 'mysql'
            DatabaseFactory-->>MySQLDatabase: create(config)
            MySQLDatabase-->>Repository: return session
        else db_name == 'mariadb'
            DatabaseFactory-->>MariaDBDatabase: create(config)
            MariaDBDatabase-->>Repository: return session
        end
        Repository->>Session: get(user)
        Session-->>Repository: return user
        Repository-->>UserRepository: return user
        UserRepository-->>Client: return user
    else operation == 'update'
        UserRepository->>Repository: update(user)
        Repository->>DatabaseFactory: create(config)
        alt db_name == 'postgresql'
            DatabaseFactory-->>PostgreSQLDatabase: create(config)
            PostgreSQLDatabase-->>Repository: return session
        else db_name == 'mysql'
            DatabaseFactory-->>MySQLDatabase: create(config)
            MySQLDatabase-->>Repository: return session
        else db_name == 'mariadb'
            DatabaseFactory-->>MariaDBDatabase: create(config)
            MariaDBDatabase-->>Repository: return session
        end
        Repository->>Session: update(user)
        Session->>User: update(user)
        Repository->>Session: commit()
        Session-->>Repository: commit successful
        Repository-->>UserRepository: return user
        UserRepository-->>Client: return user
    else operation == 'delete'
        UserRepository->>Repository: delete(user)
        Repository->>DatabaseFactory: create(config)
        alt db_name == 'postgresql'
            DatabaseFactory-->>PostgreSQLDatabase: create(config)
            PostgreSQLDatabase-->>Repository: return session
        else db_name == 'mysql'
            DatabaseFactory-->>MySQLDatabase: create(config)
            MySQLDatabase-->>Repository: return session
        else db_name == 'mariadb'
            DatabaseFactory-->>MariaDBDatabase: create(config)
            MariaDBDatabase-->>Repository: return session
        end
        Repository->>Session: delete(user)
        Session->>User: delete(user)
        Repository->>Session: commit()
        Session-->>Repository: commit successful
        Repository-->>UserRepository: return success
        UserRepository-->>Client: return success
    end
```


### In this diagram (Sequence Diagram):


- `Client` represents the client code that interacts with the `UserRepository`.
- `UserRepository` is a specific repository that manages `User` instances.
- `Repository` is a generic implementation of a repository.
- `DatabaseFactory` is a factory class that creates instances of `PostgreSQLDatabase`, `MySQLDatabase`, or `MariaDBDatabase` based on the provided configuration.
- `PostgreSQLDatabase`, `MySQLDatabase`, and `MariaDBDatabase` are concrete implementations of a IDatabase interface.
- `Session` represents a database session.
- `User` represents a user instance.

The sequence diagram shows the process of performing a CRUD operation on a user. The client 
calls the `performOperation` method on the `UserRepository`, which in turn calls the 
corresponding method (create, read, update, or delete) on the `Repository`. The `Repository` 
gets a session from the `DatabaseFactory` which creates an instance of either `PostgreSQLDatabase`, 
`MySQLDatabase`, or `MariaDBDatabase` based on the provided configuration. The `Repository` 
then performs the operation on the user in the session, and commits the session. The result 
of the operation is then returned to the client.

---

## Code Example Usage

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from src.db.factory import DatabaseFactory
from typing import Optional
from sqlalchemy import Column, Sequence, Integer, String
from sqlalchemy.orm import Mapped
from src.model.base import Base
from db.idatabase import IDatabase
from src.repo.repository import Repository


# ---------------------------------------------------------
# Create a User model
# ---------------------------------------------------------
class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = Column(
        Integer,
        Sequence("user_id_seq"),
        primary_key=True,
        autoincrement=True,
        nullable=False,
        unique=True,
        index=True,
    )
    username: Mapped[str] = Column(String(128), nullable=False)
    password: Mapped[Optional[str]] = Column(String(128), nullable=True)

    def to_dict(self) -> dict:
        return {"id": self.id, "username": self.username, "password": self.password}

    def as_dict(self) -> dict:  # renamed from __dict__ to as_dict
        return self.to_dict()

    def __repr__(self) -> str:
        return (
            f"User(id={self.id!r}, name={self.username!r}, fullname={self.password!r})"
        )


# ---------------------------------------------------------
# Create a UserRepository instance with the database instance
# ---------------------------------------------------------
class UserRepository(Repository[User]):
    def __init__(self, database: IDatabase):
        super().__init__(database, User)


# ---------------------------------------------------------
# Create a new user
# ---------------------------------------------------------
if __name__ == '__main__':
    # Create a new database instance
    db_config = {
        'type': 'postgresql',
        'db_name': 'volunteer',
        'user': "postgres",
        'password': "adminpassword",
        'host': "127.0.0.1",
        'port': "5432"
    }
    # Create a new database instance
    db = DatabaseFactory.create(db_config)

    # Create a UserRepository instance with the database instance
    user_repo = UserRepository(db)

    # OR create a generic Repository instance with the 
    # database instance and the User model
    #user_repo = Repository(db, User)

    # Create a new user
    user = User(username='Candy', password='password')

    # Add the user to the database
    user_repo.create(user)
```
---

