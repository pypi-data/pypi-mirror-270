import os
from pathlib import Path

import inflection
import yaml

from komodo.framework.komodo_app import KomodoApp
from komodo.framework.komodo_context import KomodoContext
from komodo.framework.komodo_features import KomodoFeatures, KomodoApplianceType
from komodo.framework.komodo_locations import KomodoLocations
from komodo.framework.komodo_user import KomodoUser
from komodo.loaders.filesystem.agent_loader import AgentLoader
from komodo.loaders.filesystem.loader_helper import load_context_from_yaml, load_dictionary_from_yaml, load_contents
from komodo.loaders.filesystem.loader_locations import LoaderLocations


class ApplianceLoader():
    def __init__(self, definitions_directory: Path, data_directory: Path):
        self.locations = LoaderLocations(definitions_directory)
        self.data = KomodoLocations(data_directory)
        self.agent_loader = AgentLoader(definitions_directory, data_directory)

    def load(self, appliance_name: str) -> dict:
        appliance_folder = self.locations.appliance(appliance_name)
        if not appliance_folder.exists():
            raise ValueError(f"Appliance {appliance_name} not found in {self.locations.appliances()}")

        appliance_file = self.locations.appliance(appliance_name) / "appliance.yml"
        if not appliance_file.exists():
            raise ValueError(f"Appliance file not found for appliance {appliance_file}")

        definition = load_dictionary_from_yaml(appliance_file)

        context = KomodoContext()
        context_file = appliance_folder / "context.yml"
        if context_file.exists():
            context = load_context_from_yaml(context_file)

        dictionary = {}
        dictionary_file = appliance_folder / "dictionary.yml"
        if dictionary_file.exists():
            dictionary = load_dictionary_from_yaml(dictionary_file)

        goal_file = appliance_folder / "goal.yml"
        goal = load_contents(goal_file) if goal_file.exists() else None

        shortcode = definition.pop('shortcode', appliance_name)
        name = definition.pop('name', f'{inflection.titleize(appliance_name)}')
        purpose = definition.pop('purpose', "Generated by appliance loader.")
        tools = definition.pop('tools', [])

        agents = [self.agent_loader.load_agent(shortcode) for shortcode in definition.pop('agents', [])]
        type = KomodoApplianceType(definition.pop('type', 'enterprise'))
        features = [KomodoFeatures(feature) for feature in definition.pop('features', [])]
        users = [KomodoUser(**user) for user in definition.pop('users', [])]

        data_folder = self.data.appliance_data(appliance_name)
        data = {}

        if 'autoload' in definition:
            for file in data_folder.glob("**/*"):
                if file.is_file():
                    if file.stem in definition['autoload']:
                        data[file.stem] = load_contents(file)

        named_parameters = dict(shortcode=shortcode,
                                name=name,
                                purpose=purpose,
                                agents=agents,
                                tools=tools,
                                context=context,
                                dictionary=dictionary,
                                data=data,
                                goal=goal,
                                type=type,
                                features=features,
                                users=users)

        return {**definition, **named_parameters}

    def load_appliance(self, appliance_name: str) -> [KomodoApp]:
        appliance_data = self.load(appliance_name)
        return KomodoApp(**appliance_data)

    def load_all(self) -> [KomodoApp]:
        return [self.load_appliance(appliance_name) for appliance_name in self.locations.available_appliances()]

    def setup_appliance(self, appliance_name: str):
        os.makedirs(self.locations.appliance(appliance_name), exist_ok=True)
        placeholder = {
            "shortcode": appliance_name,
            "name": f"{inflection.titleize(appliance_name)}",
            "purpose": "Generated by appliance loader.",
            "company": "Komodo AI",
            "type": "enterprise",
            "features": ["chat", "chatdoc"],
            "agents": [],
            "tools": []
        }

        with open(self.locations.appliance(appliance_name) / "appliance.yml", 'w') as file:
            yaml.dump(placeholder, file, sort_keys=False, default_flow_style=False)


if __name__ == "__main__":
    from komodo.core.tools.utils.sample_tool import SampleTool
    from komodo.framework.komodo_tool_registry import KomodoToolRegistry
    from komodo.config import PlatformConfig

    KomodoToolRegistry.add_komodo_tool(SampleTool("."))

    config = PlatformConfig()
    loader = ApplianceLoader(config.definitions_directory, config.data_directory)
    appliances = loader.load_all()
    for appliance in appliances:
        print(appliance.shortcode)
        print(appliance.context)
        print(appliance.purpose)
        print(appliance.agents)
        print(appliance.tools)

    loader.setup_appliance("test")
# Path: komodo/loaders/filesystem/agent_loader.py
