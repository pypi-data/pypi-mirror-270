from pathlib import Path

import inflection

from komodo.framework.komodo_context import KomodoContext
from komodo.framework.komodo_locations import KomodoLocations
from komodo.framework.komodo_workflow import KomodoWorkflow
from komodo.loaders.filesystem.loader_helper import load_context_from_yaml, load_dictionary_from_yaml, load_contents
from komodo.loaders.filesystem.loader_locations import LoaderLocations


class WorkflowLoader():
    def __init__(self, definitions_directory: Path, data_directory: Path):
        self.locations = LoaderLocations(definitions_directory)
        self.data = KomodoLocations(data_directory)

    def load(self, workflow_name: str) -> dict:
        workflow_folder = self.locations.workflow(workflow_name)
        if not workflow_folder.exists():
            raise ValueError(f"Workflow {workflow_name} not found in {self.locations.workflows()}")

        workflow_file = self.locations.workflow(workflow_name) / "workflow.yml"
        if not workflow_file.exists():
            raise ValueError(f"Workflow file not found for workflow {workflow_name}")

        definition = load_dictionary_from_yaml(workflow_file)

        context = KomodoContext()
        context_file = workflow_folder / "context.yml"
        if context_file.exists():
            context = load_context_from_yaml(context_file)

        dictionary = {}
        dictionary_file = workflow_folder / "dictionary.yml"
        if dictionary_file.exists():
            dictionary = load_dictionary_from_yaml(dictionary_file)

        data_folder = self.data.workflow_data(workflow_name)
        data = {}
        if 'autoload' in definition:
            for file in data_folder.glob("**/*"):
                if file.is_file():
                    if file.stem in definition['autoload']:
                        data[file.stem] = load_contents(file)

        shortcode = definition.pop('shortcode', workflow_name)
        name = definition.pop('name', f'{inflection.titleize(workflow_name)}')
        purpose = definition.pop('purpose', "Generated by workflow loader.")

        named_parameters = dict(shortcode=shortcode,
                                name=name,
                                context=context,
                                purpose=purpose,
                                data=data,
                                dictionary=dictionary)

        return {**definition, **named_parameters}

    def load_workflow(self, workflow_name: str) -> [KomodoWorkflow]:
        workflow_data = self.load(workflow_name)
        return KomodoWorkflow(**workflow_data)

    def load_all(self) -> [KomodoWorkflow]:
        return [self.load_workflow(workflow_name) for workflow_name in self.locations.available_workflows()]


if __name__ == "__main__":
    from komodo.config import PlatformConfig
    from komodo.models.framework.chat_message import ChatMessage

    config = PlatformConfig()
    loader = WorkflowLoader(config.definitions_directory, config.data_directory)
    workflows = loader.load_all()
    for workflow in workflows:
        print(workflow.shortcode)
        print(workflow.context)
        messages = ChatMessage.convert_from_context(workflow.context)
        print(messages)
