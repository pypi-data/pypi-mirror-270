import configparser
import pathlib
from collections import OrderedDict

import click

from mlsteam_model_sdk.utils.config import (
    CFG_DIR,
    CFG_FILE,
    CFG_SECTION,
    OPTION_API_ENDPOINT,
    OPTION_API_TOKEN,
    OPTION_DEFAULT_ENC_MODEL_CLEANUP,
    OPTION_DEFAULT_MODEL_NAME,
    OPTION_DEFAULT_MUUID,
    OPTION_DEFAULT_PROJECT_NAME,
    OPTION_DEFAULT_PUUID,
)


UuidNameChoice = click.Choice(['uuid', 'name'], case_sensitive=False)
UuidNameSkipChoice = click.Choice(['uuid', 'name', 'skip'], case_sensitive=False)
EncModelCleanupChoice = click.Choice(['never', 'after-load'], case_sensitive=False)


def prompt_input(ctx, param, value):
    if ctx.params.get('interactive') and value is None:
        return click.prompt(str(param), default='', show_default=False,
                            value_proc=lambda raw_input: raw_input if raw_input != '' else None)
    return value


def prompt_input_uuid_name(ctx, param, value):
    if ctx.params.get('interactive') and value is None:
        return click.prompt(str(param), type=UuidNameSkipChoice)
    return value


def prompt_input_enc_model_cleanup(ctx, param, value):
    if ctx.params.get('interactive') and value is None:
        return click.prompt(str(param), type=EncModelCleanupChoice)
    return value


def _get_cfg_opts(api_token, api_endpoint,
                  default_project_type, default_project_val,
                  default_model_type, default_model_val,
                  default_enc_model_cleanup):
    cfg_opts = OrderedDict()

    cfg_opts[OPTION_API_TOKEN] = api_token
    cfg_opts[OPTION_API_ENDPOINT] = api_endpoint

    if default_project_type == 'uuid':
        cfg_opts[OPTION_DEFAULT_PUUID] = default_project_val
    elif default_project_type == 'name':
        cfg_opts[OPTION_DEFAULT_PROJECT_NAME] = default_project_val
    elif default_project_type != 'skip' and default_project_val:
        raise ValueError('default_project_type should be given when default_project_val is given')
    else:
        cfg_opts[OPTION_DEFAULT_PUUID] = None
        cfg_opts[OPTION_DEFAULT_PROJECT_NAME] = None

    if default_model_type == 'uuid':
        cfg_opts[OPTION_DEFAULT_MUUID] = default_model_val
    elif default_model_type == 'name':
        cfg_opts[OPTION_DEFAULT_MODEL_NAME] = default_model_val
    elif default_model_type != 'skip' and default_model_val:
        raise ValueError('default_model_type should be given when default_model_val is given')
    else:
        cfg_opts[OPTION_DEFAULT_MUUID] = None
        cfg_opts[OPTION_DEFAULT_MODEL_NAME] = None

    if default_enc_model_cleanup:
        cfg_opts[OPTION_DEFAULT_ENC_MODEL_CLEANUP] = default_enc_model_cleanup
    else:
        cfg_opts[OPTION_DEFAULT_ENC_MODEL_CLEANUP] = None

    return cfg_opts


@click.command(help='initialize SDK settings')
@click.option('-i', '--interactive', is_flag=True, default=False, is_eager=True,
              help='prompts the user for inputing fields not providied yet with commandline options,'
              ' rather than silently setting them as empty')
@click.option('-d', '--dir', 'cfg_dir',
              help='base directory to keep SDK settings (default: user\'s home directory)')
@click.option('--api_token', callback=prompt_input)
@click.option('--api_endpoint', callback=prompt_input)
@click.option('--default_project_type', type=UuidNameChoice, callback=prompt_input_uuid_name)
@click.option('--default_project_val', callback=prompt_input)
@click.option('--default_model_type', type=UuidNameChoice, callback=prompt_input_uuid_name)
@click.option('--default_model_val', callback=prompt_input)
@click.option('--default_enc_model_cleanup', type=EncModelCleanupChoice, callback=prompt_input_enc_model_cleanup,
              help='default model file cleanup policy for encrypted models during model\'s active time')
def cmd(interactive, cfg_dir, api_token, api_endpoint,
        default_project_type, default_project_val,
        default_model_type, default_model_val,
        default_enc_model_cleanup):
    if cfg_dir:
        cfg_dir = pathlib.Path(cfg_dir) / CFG_DIR
    else:
        cfg_dir = pathlib.Path.home() / CFG_DIR

    cfg_dir.mkdir(parents=True, exist_ok=False)

    cfg_file = cfg_dir / CFG_FILE
    with cfg_file.open('wt') as cf:
        cfg_opts = _get_cfg_opts(
            api_token=api_token,
            api_endpoint=api_endpoint,
            default_project_type=default_project_type,
            default_project_val=default_project_val,
            default_model_type=default_model_type,
            default_model_val=default_model_val,
            default_enc_model_cleanup=default_enc_model_cleanup)

        cfg = configparser.ConfigParser(allow_no_value=True)
        cfg.read_dict({
            CFG_SECTION: cfg_opts
        })
        cf.write('\n'.join([
            '# MLSteam Model SDK Configuration',
            '# ===============================',
            '# This file is generated by CLI. You may update the settings by',
            '# assigning new values to empty fields or by chaning existing',
            '# values. All settings are in either of the form:',
            '#',
            '# field_name=field value',
            '# field_name:field value',
            '\n'
        ]))
        cfg.write(cf)
