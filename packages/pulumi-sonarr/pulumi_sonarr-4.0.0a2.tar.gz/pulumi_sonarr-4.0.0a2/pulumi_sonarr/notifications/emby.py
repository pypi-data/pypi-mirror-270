# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EmbyArgs', 'Emby']

@pulumi.input_type
class EmbyArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 host: pulumi.Input[str],
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify: Optional[pulumi.Input[bool]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_series_add: Optional[pulumi.Input[bool]] = None,
                 on_series_delete: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Emby resource.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationEmby name.
        :param pulumi.Input[bool] notify: Notify flag.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_episode_file_delete: On episode file delete flag.
        :param pulumi.Input[bool] on_episode_file_delete_for_upgrade: On episode file delete for upgrade flag.
        :param pulumi.Input[bool] on_grab: On grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_series_add: On series add flag.
        :param pulumi.Input[bool] on_series_delete: On series delete flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "host", host)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify is not None:
            pulumi.set(__self__, "notify", notify)
        if on_application_update is not None:
            pulumi.set(__self__, "on_application_update", on_application_update)
        if on_download is not None:
            pulumi.set(__self__, "on_download", on_download)
        if on_episode_file_delete is not None:
            pulumi.set(__self__, "on_episode_file_delete", on_episode_file_delete)
        if on_episode_file_delete_for_upgrade is not None:
            pulumi.set(__self__, "on_episode_file_delete_for_upgrade", on_episode_file_delete_for_upgrade)
        if on_grab is not None:
            pulumi.set(__self__, "on_grab", on_grab)
        if on_health_issue is not None:
            pulumi.set(__self__, "on_health_issue", on_health_issue)
        if on_health_restored is not None:
            pulumi.set(__self__, "on_health_restored", on_health_restored)
        if on_rename is not None:
            pulumi.set(__self__, "on_rename", on_rename)
        if on_series_add is not None:
            pulumi.set(__self__, "on_series_add", on_series_add)
        if on_series_delete is not None:
            pulumi.set(__self__, "on_series_delete", on_series_delete)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_library is not None:
            pulumi.set(__self__, "update_library", update_library)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationEmby name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notify(self) -> Optional[pulumi.Input[bool]]:
        """
        Notify flag.
        """
        return pulumi.get(self, "notify")

    @notify.setter
    def notify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify", value)

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> Optional[pulumi.Input[bool]]:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @on_application_update.setter
    def on_application_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_application_update", value)

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> Optional[pulumi.Input[bool]]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @on_download.setter
    def on_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_download", value)

    @property
    @pulumi.getter(name="onEpisodeFileDelete")
    def on_episode_file_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On episode file delete flag.
        """
        return pulumi.get(self, "on_episode_file_delete")

    @on_episode_file_delete.setter
    def on_episode_file_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_episode_file_delete", value)

    @property
    @pulumi.getter(name="onEpisodeFileDeleteForUpgrade")
    def on_episode_file_delete_for_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On episode file delete for upgrade flag.
        """
        return pulumi.get(self, "on_episode_file_delete_for_upgrade")

    @on_episode_file_delete_for_upgrade.setter
    def on_episode_file_delete_for_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_episode_file_delete_for_upgrade", value)

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> Optional[pulumi.Input[bool]]:
        """
        On grab flag.
        """
        return pulumi.get(self, "on_grab")

    @on_grab.setter
    def on_grab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_grab", value)

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> Optional[pulumi.Input[bool]]:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @on_health_issue.setter
    def on_health_issue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_issue", value)

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> Optional[pulumi.Input[bool]]:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @on_health_restored.setter
    def on_health_restored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_restored", value)

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> Optional[pulumi.Input[bool]]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @on_rename.setter
    def on_rename(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_rename", value)

    @property
    @pulumi.getter(name="onSeriesAdd")
    def on_series_add(self) -> Optional[pulumi.Input[bool]]:
        """
        On series add flag.
        """
        return pulumi.get(self, "on_series_add")

    @on_series_add.setter
    def on_series_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_series_add", value)

    @property
    @pulumi.getter(name="onSeriesDelete")
    def on_series_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On series delete flag.
        """
        return pulumi.get(self, "on_series_delete")

    @on_series_delete.setter
    def on_series_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_series_delete", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @update_library.setter
    def update_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_library", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)


@pulumi.input_type
class _EmbyState:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify: Optional[pulumi.Input[bool]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_series_add: Optional[pulumi.Input[bool]] = None,
                 on_series_delete: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Emby resources.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationEmby name.
        :param pulumi.Input[bool] notify: Notify flag.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_episode_file_delete: On episode file delete flag.
        :param pulumi.Input[bool] on_episode_file_delete_for_upgrade: On episode file delete for upgrade flag.
        :param pulumi.Input[bool] on_grab: On grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_series_add: On series add flag.
        :param pulumi.Input[bool] on_series_delete: On series delete flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify is not None:
            pulumi.set(__self__, "notify", notify)
        if on_application_update is not None:
            pulumi.set(__self__, "on_application_update", on_application_update)
        if on_download is not None:
            pulumi.set(__self__, "on_download", on_download)
        if on_episode_file_delete is not None:
            pulumi.set(__self__, "on_episode_file_delete", on_episode_file_delete)
        if on_episode_file_delete_for_upgrade is not None:
            pulumi.set(__self__, "on_episode_file_delete_for_upgrade", on_episode_file_delete_for_upgrade)
        if on_grab is not None:
            pulumi.set(__self__, "on_grab", on_grab)
        if on_health_issue is not None:
            pulumi.set(__self__, "on_health_issue", on_health_issue)
        if on_health_restored is not None:
            pulumi.set(__self__, "on_health_restored", on_health_restored)
        if on_rename is not None:
            pulumi.set(__self__, "on_rename", on_rename)
        if on_series_add is not None:
            pulumi.set(__self__, "on_series_add", on_series_add)
        if on_series_delete is not None:
            pulumi.set(__self__, "on_series_delete", on_series_delete)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_library is not None:
            pulumi.set(__self__, "update_library", update_library)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationEmby name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notify(self) -> Optional[pulumi.Input[bool]]:
        """
        Notify flag.
        """
        return pulumi.get(self, "notify")

    @notify.setter
    def notify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify", value)

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> Optional[pulumi.Input[bool]]:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @on_application_update.setter
    def on_application_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_application_update", value)

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> Optional[pulumi.Input[bool]]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @on_download.setter
    def on_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_download", value)

    @property
    @pulumi.getter(name="onEpisodeFileDelete")
    def on_episode_file_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On episode file delete flag.
        """
        return pulumi.get(self, "on_episode_file_delete")

    @on_episode_file_delete.setter
    def on_episode_file_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_episode_file_delete", value)

    @property
    @pulumi.getter(name="onEpisodeFileDeleteForUpgrade")
    def on_episode_file_delete_for_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On episode file delete for upgrade flag.
        """
        return pulumi.get(self, "on_episode_file_delete_for_upgrade")

    @on_episode_file_delete_for_upgrade.setter
    def on_episode_file_delete_for_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_episode_file_delete_for_upgrade", value)

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> Optional[pulumi.Input[bool]]:
        """
        On grab flag.
        """
        return pulumi.get(self, "on_grab")

    @on_grab.setter
    def on_grab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_grab", value)

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> Optional[pulumi.Input[bool]]:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @on_health_issue.setter
    def on_health_issue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_issue", value)

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> Optional[pulumi.Input[bool]]:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @on_health_restored.setter
    def on_health_restored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_restored", value)

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> Optional[pulumi.Input[bool]]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @on_rename.setter
    def on_rename(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_rename", value)

    @property
    @pulumi.getter(name="onSeriesAdd")
    def on_series_add(self) -> Optional[pulumi.Input[bool]]:
        """
        On series add flag.
        """
        return pulumi.get(self, "on_series_add")

    @on_series_add.setter
    def on_series_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_series_add", value)

    @property
    @pulumi.getter(name="onSeriesDelete")
    def on_series_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On series delete flag.
        """
        return pulumi.get(self, "on_series_delete")

    @on_series_delete.setter
    def on_series_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_series_delete", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> Optional[pulumi.Input[bool]]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @update_library.setter
    def update_library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_library", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)


class Emby(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify: Optional[pulumi.Input[bool]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_series_add: Optional[pulumi.Input[bool]] = None,
                 on_series_delete: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        <!-- subcategory:Notifications -->
        Notification Emby resource.
        For more information refer to [Notification](https://wiki.servarr.com/sonarr/settings#connect) and [Emby](https://wiki.servarr.com/sonarr/supported#mediabrowser).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sonarr as sonarr

        example = sonarr.notifications.Emby("example",
            api_key="API_Key",
            host="emby.lcl",
            include_health_warnings=False,
            on_application_update=False,
            on_download=True,
            on_episode_file_delete=False,
            on_episode_file_delete_for_upgrade=True,
            on_grab=False,
            on_health_issue=False,
            on_rename=False,
            on_series_delete=False,
            on_upgrade=True,
            port=8096)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import sonarr:Notifications/emby:Emby example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationEmby name.
        :param pulumi.Input[bool] notify: Notify flag.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_episode_file_delete: On episode file delete flag.
        :param pulumi.Input[bool] on_episode_file_delete_for_upgrade: On episode file delete for upgrade flag.
        :param pulumi.Input[bool] on_grab: On grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_series_add: On series add flag.
        :param pulumi.Input[bool] on_series_delete: On series delete flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EmbyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Notifications -->
        Notification Emby resource.
        For more information refer to [Notification](https://wiki.servarr.com/sonarr/settings#connect) and [Emby](https://wiki.servarr.com/sonarr/supported#mediabrowser).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sonarr as sonarr

        example = sonarr.notifications.Emby("example",
            api_key="API_Key",
            host="emby.lcl",
            include_health_warnings=False,
            on_application_update=False,
            on_download=True,
            on_episode_file_delete=False,
            on_episode_file_delete_for_upgrade=True,
            on_grab=False,
            on_health_issue=False,
            on_rename=False,
            on_series_delete=False,
            on_upgrade=True,
            port=8096)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import sonarr:Notifications/emby:Emby example 1
        ```

        :param str resource_name: The name of the resource.
        :param EmbyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EmbyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify: Optional[pulumi.Input[bool]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 on_rename: Optional[pulumi.Input[bool]] = None,
                 on_series_add: Optional[pulumi.Input[bool]] = None,
                 on_series_delete: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 update_library: Optional[pulumi.Input[bool]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EmbyArgs.__new__(EmbyArgs)

            if api_key is None and not opts.urn:
                raise TypeError("Missing required property 'api_key'")
            __props__.__dict__["api_key"] = None if api_key is None else pulumi.Output.secret(api_key)
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["include_health_warnings"] = include_health_warnings
            __props__.__dict__["name"] = name
            __props__.__dict__["notify"] = notify
            __props__.__dict__["on_application_update"] = on_application_update
            __props__.__dict__["on_download"] = on_download
            __props__.__dict__["on_episode_file_delete"] = on_episode_file_delete
            __props__.__dict__["on_episode_file_delete_for_upgrade"] = on_episode_file_delete_for_upgrade
            __props__.__dict__["on_grab"] = on_grab
            __props__.__dict__["on_health_issue"] = on_health_issue
            __props__.__dict__["on_health_restored"] = on_health_restored
            __props__.__dict__["on_rename"] = on_rename
            __props__.__dict__["on_series_add"] = on_series_add
            __props__.__dict__["on_series_delete"] = on_series_delete
            __props__.__dict__["on_upgrade"] = on_upgrade
            __props__.__dict__["port"] = port
            __props__.__dict__["tags"] = tags
            __props__.__dict__["update_library"] = update_library
            __props__.__dict__["use_ssl"] = use_ssl
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Emby, __self__).__init__(
            'sonarr:Notifications/emby:Emby',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_key: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            include_health_warnings: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notify: Optional[pulumi.Input[bool]] = None,
            on_application_update: Optional[pulumi.Input[bool]] = None,
            on_download: Optional[pulumi.Input[bool]] = None,
            on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
            on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
            on_grab: Optional[pulumi.Input[bool]] = None,
            on_health_issue: Optional[pulumi.Input[bool]] = None,
            on_health_restored: Optional[pulumi.Input[bool]] = None,
            on_rename: Optional[pulumi.Input[bool]] = None,
            on_series_add: Optional[pulumi.Input[bool]] = None,
            on_series_delete: Optional[pulumi.Input[bool]] = None,
            on_upgrade: Optional[pulumi.Input[bool]] = None,
            port: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            update_library: Optional[pulumi.Input[bool]] = None,
            use_ssl: Optional[pulumi.Input[bool]] = None) -> 'Emby':
        """
        Get an existing Emby resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key: API key.
        :param pulumi.Input[str] host: Host.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationEmby name.
        :param pulumi.Input[bool] notify: Notify flag.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_episode_file_delete: On episode file delete flag.
        :param pulumi.Input[bool] on_episode_file_delete_for_upgrade: On episode file delete for upgrade flag.
        :param pulumi.Input[bool] on_grab: On grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[bool] on_rename: On rename flag.
        :param pulumi.Input[bool] on_series_add: On series add flag.
        :param pulumi.Input[bool] on_series_delete: On series delete flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[int] port: Port.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[bool] update_library: Update library flag.
        :param pulumi.Input[bool] use_ssl: Use SSL flag.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EmbyState.__new__(_EmbyState)

        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["host"] = host
        __props__.__dict__["include_health_warnings"] = include_health_warnings
        __props__.__dict__["name"] = name
        __props__.__dict__["notify"] = notify
        __props__.__dict__["on_application_update"] = on_application_update
        __props__.__dict__["on_download"] = on_download
        __props__.__dict__["on_episode_file_delete"] = on_episode_file_delete
        __props__.__dict__["on_episode_file_delete_for_upgrade"] = on_episode_file_delete_for_upgrade
        __props__.__dict__["on_grab"] = on_grab
        __props__.__dict__["on_health_issue"] = on_health_issue
        __props__.__dict__["on_health_restored"] = on_health_restored
        __props__.__dict__["on_rename"] = on_rename
        __props__.__dict__["on_series_add"] = on_series_add
        __props__.__dict__["on_series_delete"] = on_series_delete
        __props__.__dict__["on_upgrade"] = on_upgrade
        __props__.__dict__["port"] = port
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_library"] = update_library
        __props__.__dict__["use_ssl"] = use_ssl
        return Emby(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[str]:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> pulumi.Output[bool]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        NotificationEmby name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notify(self) -> pulumi.Output[bool]:
        """
        Notify flag.
        """
        return pulumi.get(self, "notify")

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> pulumi.Output[bool]:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> pulumi.Output[bool]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @property
    @pulumi.getter(name="onEpisodeFileDelete")
    def on_episode_file_delete(self) -> pulumi.Output[bool]:
        """
        On episode file delete flag.
        """
        return pulumi.get(self, "on_episode_file_delete")

    @property
    @pulumi.getter(name="onEpisodeFileDeleteForUpgrade")
    def on_episode_file_delete_for_upgrade(self) -> pulumi.Output[bool]:
        """
        On episode file delete for upgrade flag.
        """
        return pulumi.get(self, "on_episode_file_delete_for_upgrade")

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> pulumi.Output[bool]:
        """
        On grab flag.
        """
        return pulumi.get(self, "on_grab")

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> pulumi.Output[bool]:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> pulumi.Output[bool]:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @property
    @pulumi.getter(name="onRename")
    def on_rename(self) -> pulumi.Output[bool]:
        """
        On rename flag.
        """
        return pulumi.get(self, "on_rename")

    @property
    @pulumi.getter(name="onSeriesAdd")
    def on_series_add(self) -> pulumi.Output[bool]:
        """
        On series add flag.
        """
        return pulumi.get(self, "on_series_add")

    @property
    @pulumi.getter(name="onSeriesDelete")
    def on_series_delete(self) -> pulumi.Output[bool]:
        """
        On series delete flag.
        """
        return pulumi.get(self, "on_series_delete")

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> pulumi.Output[bool]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> pulumi.Output[bool]:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> pulumi.Output[bool]:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

