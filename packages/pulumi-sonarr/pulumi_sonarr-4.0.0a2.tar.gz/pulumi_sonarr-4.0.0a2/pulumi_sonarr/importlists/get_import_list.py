# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetImportListResult',
    'AwaitableGetImportListResult',
    'get_import_list',
    'get_import_list_output',
]

@pulumi.output_type
class GetImportListResult:
    """
    A collection of values returned by getImportList.
    """
    def __init__(__self__, access_token=None, api_key=None, auth_user=None, base_url=None, config_contract=None, enable_automatic_add=None, expires=None, genres=None, id=None, implementation=None, language_profile_ids=None, limit=None, list_id=None, list_type=None, listname=None, name=None, quality_profile_id=None, quality_profile_ids=None, rating=None, refresh_token=None, root_folder_path=None, season_folder=None, series_type=None, should_monitor=None, tag_ids=None, tags=None, trakt_additional_parameters=None, trakt_list_type=None, url=None, username=None, years=None):
        if access_token and not isinstance(access_token, str):
            raise TypeError("Expected argument 'access_token' to be a str")
        pulumi.set(__self__, "access_token", access_token)
        if api_key and not isinstance(api_key, str):
            raise TypeError("Expected argument 'api_key' to be a str")
        pulumi.set(__self__, "api_key", api_key)
        if auth_user and not isinstance(auth_user, str):
            raise TypeError("Expected argument 'auth_user' to be a str")
        pulumi.set(__self__, "auth_user", auth_user)
        if base_url and not isinstance(base_url, str):
            raise TypeError("Expected argument 'base_url' to be a str")
        pulumi.set(__self__, "base_url", base_url)
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if enable_automatic_add and not isinstance(enable_automatic_add, bool):
            raise TypeError("Expected argument 'enable_automatic_add' to be a bool")
        pulumi.set(__self__, "enable_automatic_add", enable_automatic_add)
        if expires and not isinstance(expires, str):
            raise TypeError("Expected argument 'expires' to be a str")
        pulumi.set(__self__, "expires", expires)
        if genres and not isinstance(genres, str):
            raise TypeError("Expected argument 'genres' to be a str")
        pulumi.set(__self__, "genres", genres)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if language_profile_ids and not isinstance(language_profile_ids, list):
            raise TypeError("Expected argument 'language_profile_ids' to be a list")
        pulumi.set(__self__, "language_profile_ids", language_profile_ids)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if list_id and not isinstance(list_id, str):
            raise TypeError("Expected argument 'list_id' to be a str")
        pulumi.set(__self__, "list_id", list_id)
        if list_type and not isinstance(list_type, int):
            raise TypeError("Expected argument 'list_type' to be a int")
        pulumi.set(__self__, "list_type", list_type)
        if listname and not isinstance(listname, str):
            raise TypeError("Expected argument 'listname' to be a str")
        pulumi.set(__self__, "listname", listname)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if quality_profile_id and not isinstance(quality_profile_id, int):
            raise TypeError("Expected argument 'quality_profile_id' to be a int")
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if quality_profile_ids and not isinstance(quality_profile_ids, list):
            raise TypeError("Expected argument 'quality_profile_ids' to be a list")
        pulumi.set(__self__, "quality_profile_ids", quality_profile_ids)
        if rating and not isinstance(rating, str):
            raise TypeError("Expected argument 'rating' to be a str")
        pulumi.set(__self__, "rating", rating)
        if refresh_token and not isinstance(refresh_token, str):
            raise TypeError("Expected argument 'refresh_token' to be a str")
        pulumi.set(__self__, "refresh_token", refresh_token)
        if root_folder_path and not isinstance(root_folder_path, str):
            raise TypeError("Expected argument 'root_folder_path' to be a str")
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        if season_folder and not isinstance(season_folder, bool):
            raise TypeError("Expected argument 'season_folder' to be a bool")
        pulumi.set(__self__, "season_folder", season_folder)
        if series_type and not isinstance(series_type, str):
            raise TypeError("Expected argument 'series_type' to be a str")
        pulumi.set(__self__, "series_type", series_type)
        if should_monitor and not isinstance(should_monitor, str):
            raise TypeError("Expected argument 'should_monitor' to be a str")
        pulumi.set(__self__, "should_monitor", should_monitor)
        if tag_ids and not isinstance(tag_ids, list):
            raise TypeError("Expected argument 'tag_ids' to be a list")
        pulumi.set(__self__, "tag_ids", tag_ids)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if trakt_additional_parameters and not isinstance(trakt_additional_parameters, str):
            raise TypeError("Expected argument 'trakt_additional_parameters' to be a str")
        pulumi.set(__self__, "trakt_additional_parameters", trakt_additional_parameters)
        if trakt_list_type and not isinstance(trakt_list_type, int):
            raise TypeError("Expected argument 'trakt_list_type' to be a int")
        pulumi.set(__self__, "trakt_list_type", trakt_list_type)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if years and not isinstance(years, str):
            raise TypeError("Expected argument 'years' to be a str")
        pulumi.set(__self__, "years", years)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> str:
        """
        Auth User.
        """
        return pulumi.get(self, "auth_user")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        ImportList configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="enableAutomaticAdd")
    def enable_automatic_add(self) -> bool:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_automatic_add")

    @property
    @pulumi.getter
    def expires(self) -> str:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def genres(self) -> str:
        """
        Genres.
        """
        return pulumi.get(self, "genres")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Import List ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        ImportList implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="languageProfileIds")
    def language_profile_ids(self) -> Sequence[int]:
        """
        Language profile IDs.
        """
        return pulumi.get(self, "language_profile_ids")

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Limit.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> str:
        """
        List ID.
        """
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> int:
        """
        Simkl list type.
        """
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter
    def listname(self) -> str:
        """
        List name.
        """
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter(name="qualityProfileIds")
    def quality_profile_ids(self) -> Sequence[int]:
        """
        Quality profile IDs.
        """
        return pulumi.get(self, "quality_profile_ids")

    @property
    @pulumi.getter
    def rating(self) -> str:
        """
        Rating.
        """
        return pulumi.get(self, "rating")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="seasonFolder")
    def season_folder(self) -> bool:
        """
        Season folder flag.
        """
        return pulumi.get(self, "season_folder")

    @property
    @pulumi.getter(name="seriesType")
    def series_type(self) -> str:
        """
        Series type.
        """
        return pulumi.get(self, "series_type")

    @property
    @pulumi.getter(name="shouldMonitor")
    def should_monitor(self) -> str:
        """
        Should monitor.
        """
        return pulumi.get(self, "should_monitor")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[int]:
        """
        Tag IDs.
        """
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="traktAdditionalParameters")
    def trakt_additional_parameters(self) -> str:
        """
        Trakt additional parameters.
        """
        return pulumi.get(self, "trakt_additional_parameters")

    @property
    @pulumi.getter(name="traktListType")
    def trakt_list_type(self) -> int:
        """
        Trakt list type.
        """
        return pulumi.get(self, "trakt_list_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def years(self) -> str:
        """
        Years.
        """
        return pulumi.get(self, "years")


class AwaitableGetImportListResult(GetImportListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImportListResult(
            access_token=self.access_token,
            api_key=self.api_key,
            auth_user=self.auth_user,
            base_url=self.base_url,
            config_contract=self.config_contract,
            enable_automatic_add=self.enable_automatic_add,
            expires=self.expires,
            genres=self.genres,
            id=self.id,
            implementation=self.implementation,
            language_profile_ids=self.language_profile_ids,
            limit=self.limit,
            list_id=self.list_id,
            list_type=self.list_type,
            listname=self.listname,
            name=self.name,
            quality_profile_id=self.quality_profile_id,
            quality_profile_ids=self.quality_profile_ids,
            rating=self.rating,
            refresh_token=self.refresh_token,
            root_folder_path=self.root_folder_path,
            season_folder=self.season_folder,
            series_type=self.series_type,
            should_monitor=self.should_monitor,
            tag_ids=self.tag_ids,
            tags=self.tags,
            trakt_additional_parameters=self.trakt_additional_parameters,
            trakt_list_type=self.trakt_list_type,
            url=self.url,
            username=self.username,
            years=self.years)


def get_import_list(name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImportListResult:
    """
    <!-- subcategory:Download Clients -->
    Single Download Client.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.ImportLists.get_import_list(name="Example")
    ```


    :param str name: Import List name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarr:ImportLists/getImportList:getImportList', __args__, opts=opts, typ=GetImportListResult).value

    return AwaitableGetImportListResult(
        access_token=pulumi.get(__ret__, 'access_token'),
        api_key=pulumi.get(__ret__, 'api_key'),
        auth_user=pulumi.get(__ret__, 'auth_user'),
        base_url=pulumi.get(__ret__, 'base_url'),
        config_contract=pulumi.get(__ret__, 'config_contract'),
        enable_automatic_add=pulumi.get(__ret__, 'enable_automatic_add'),
        expires=pulumi.get(__ret__, 'expires'),
        genres=pulumi.get(__ret__, 'genres'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        language_profile_ids=pulumi.get(__ret__, 'language_profile_ids'),
        limit=pulumi.get(__ret__, 'limit'),
        list_id=pulumi.get(__ret__, 'list_id'),
        list_type=pulumi.get(__ret__, 'list_type'),
        listname=pulumi.get(__ret__, 'listname'),
        name=pulumi.get(__ret__, 'name'),
        quality_profile_id=pulumi.get(__ret__, 'quality_profile_id'),
        quality_profile_ids=pulumi.get(__ret__, 'quality_profile_ids'),
        rating=pulumi.get(__ret__, 'rating'),
        refresh_token=pulumi.get(__ret__, 'refresh_token'),
        root_folder_path=pulumi.get(__ret__, 'root_folder_path'),
        season_folder=pulumi.get(__ret__, 'season_folder'),
        series_type=pulumi.get(__ret__, 'series_type'),
        should_monitor=pulumi.get(__ret__, 'should_monitor'),
        tag_ids=pulumi.get(__ret__, 'tag_ids'),
        tags=pulumi.get(__ret__, 'tags'),
        trakt_additional_parameters=pulumi.get(__ret__, 'trakt_additional_parameters'),
        trakt_list_type=pulumi.get(__ret__, 'trakt_list_type'),
        url=pulumi.get(__ret__, 'url'),
        username=pulumi.get(__ret__, 'username'),
        years=pulumi.get(__ret__, 'years'))


@_utilities.lift_output_func(get_import_list)
def get_import_list_output(name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImportListResult]:
    """
    <!-- subcategory:Download Clients -->
    Single Download Client.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.ImportLists.get_import_list(name="Example")
    ```


    :param str name: Import List name.
    """
    ...
