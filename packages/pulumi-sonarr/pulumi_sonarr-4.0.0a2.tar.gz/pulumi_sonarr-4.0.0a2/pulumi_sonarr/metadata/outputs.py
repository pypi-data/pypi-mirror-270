# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetConsumersMetadataConsumerResult',
]

@pulumi.output_type
class GetConsumersMetadataConsumerResult(dict):
    def __init__(__self__, *,
                 config_contract: str,
                 enable: bool,
                 episode_metadata: bool,
                 id: int,
                 implementation: str,
                 name: str,
                 season_images: bool,
                 series_images: bool,
                 series_metadata: bool,
                 series_metadata_url: bool,
                 tags: Sequence[int],
                 episode_images: Optional[bool] = None):
        """
        :param str config_contract: Metadata configuration template.
        :param bool enable: Enable flag.
        :param bool episode_metadata: Episode metadata flag.
        :param int id: Metadata ID.
        :param str implementation: Metadata implementation name.
        :param str name: Metadata name.
        :param bool season_images: Season images flag.
        :param bool series_images: Series images flag.
        :param bool series_metadata: Series metadata flag.
        :param bool series_metadata_url: Series metadata URL flag.
        :param Sequence[int] tags: List of associated tags.
        :param bool episode_images: Episode images flag.
        """
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "episode_metadata", episode_metadata)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "season_images", season_images)
        pulumi.set(__self__, "series_images", series_images)
        pulumi.set(__self__, "series_metadata", series_metadata)
        pulumi.set(__self__, "series_metadata_url", series_metadata_url)
        pulumi.set(__self__, "tags", tags)
        if episode_images is not None:
            pulumi.set(__self__, "episode_images", episode_images)

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Metadata configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="episodeMetadata")
    def episode_metadata(self) -> bool:
        """
        Episode metadata flag.
        """
        return pulumi.get(self, "episode_metadata")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Metadata ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Metadata implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Metadata name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="seasonImages")
    def season_images(self) -> bool:
        """
        Season images flag.
        """
        return pulumi.get(self, "season_images")

    @property
    @pulumi.getter(name="seriesImages")
    def series_images(self) -> bool:
        """
        Series images flag.
        """
        return pulumi.get(self, "series_images")

    @property
    @pulumi.getter(name="seriesMetadata")
    def series_metadata(self) -> bool:
        """
        Series metadata flag.
        """
        return pulumi.get(self, "series_metadata")

    @property
    @pulumi.getter(name="seriesMetadataUrl")
    def series_metadata_url(self) -> bool:
        """
        Series metadata URL flag.
        """
        return pulumi.get(self, "series_metadata_url")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="episodeImages")
    def episode_images(self) -> Optional[bool]:
        """
        Episode images flag.
        """
        return pulumi.get(self, "episode_images")


