# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutoTagResult',
    'AwaitableGetAutoTagResult',
    'get_auto_tag',
    'get_auto_tag_output',
]

@pulumi.output_type
class GetAutoTagResult:
    """
    A collection of values returned by getAutoTag.
    """
    def __init__(__self__, id=None, name=None, remove_tags_automatically=None, specifications=None, tags=None):
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if remove_tags_automatically and not isinstance(remove_tags_automatically, bool):
            raise TypeError("Expected argument 'remove_tags_automatically' to be a bool")
        pulumi.set(__self__, "remove_tags_automatically", remove_tags_automatically)
        if specifications and not isinstance(specifications, list):
            raise TypeError("Expected argument 'specifications' to be a list")
        pulumi.set(__self__, "specifications", specifications)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Auto Tag ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Auto Tag name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="removeTagsAutomatically")
    def remove_tags_automatically(self) -> bool:
        """
        Remove tags automatically flag.
        """
        return pulumi.get(self, "remove_tags_automatically")

    @property
    @pulumi.getter
    def specifications(self) -> Sequence['outputs.GetAutoTagSpecificationResult']:
        """
        Specifications.
        """
        return pulumi.get(self, "specifications")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetAutoTagResult(GetAutoTagResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoTagResult(
            id=self.id,
            name=self.name,
            remove_tags_automatically=self.remove_tags_automatically,
            specifications=self.specifications,
            tags=self.tags)


def get_auto_tag(name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoTagResult:
    """
    <!-- subcategory:Tags -->
    Single Auto Tag.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.Tags.get_auto_tag(name="Example")
    ```


    :param str name: Specification name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarr:Tags/getAutoTag:getAutoTag', __args__, opts=opts, typ=GetAutoTagResult).value

    return AwaitableGetAutoTagResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        remove_tags_automatically=pulumi.get(__ret__, 'remove_tags_automatically'),
        specifications=pulumi.get(__ret__, 'specifications'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_auto_tag)
def get_auto_tag_output(name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAutoTagResult]:
    """
    <!-- subcategory:Tags -->
    Single Auto Tag.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.Tags.get_auto_tag(name="Example")
    ```


    :param str name: Specification name.
    """
    ...
