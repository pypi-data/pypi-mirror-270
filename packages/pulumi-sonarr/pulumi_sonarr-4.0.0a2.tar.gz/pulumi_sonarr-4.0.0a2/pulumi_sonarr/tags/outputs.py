# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AutoTagSpecification',
    'GetAutoTagSpecificationResult',
    'GetAutoTagsAutoTagResult',
    'GetAutoTagsAutoTagSpecificationResult',
    'GetTagsTagResult',
]

@pulumi.output_type
class AutoTagSpecification(dict):
    def __init__(__self__, *,
                 implementation: Optional[str] = None,
                 name: Optional[str] = None,
                 negate: Optional[bool] = None,
                 required: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str implementation: Implementation.
        :param str name: Specification name.
        :param bool negate: Negate flag.
        :param bool required: Required flag.
        :param str value: Value.
        """
        if implementation is not None:
            pulumi.set(__self__, "implementation", implementation)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def implementation(self) -> Optional[str]:
        """
        Implementation.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        """
        Negate flag.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Required flag.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoTagSpecificationResult(dict):
    def __init__(__self__, *,
                 implementation: str,
                 name: str,
                 negate: bool,
                 required: bool,
                 value: str):
        """
        :param str implementation: Implementation.
        :param str name: Specification name.
        :param bool negate: Negate flag.
        :param bool required: Computed flag.
        :param str value: Value.
        """
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "negate", negate)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Implementation.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def negate(self) -> bool:
        """
        Negate flag.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Computed flag.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoTagsAutoTagResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 remove_tags_automatically: bool,
                 specifications: Sequence['outputs.GetAutoTagsAutoTagSpecificationResult'],
                 tags: Sequence[int]):
        """
        :param int id: Auto Tag ID.
        :param str name: Auto Tag name.
        :param bool remove_tags_automatically: Remove tags automatically flag.
        :param Sequence['GetAutoTagsAutoTagSpecificationArgs'] specifications: Specifications.
        :param Sequence[int] tags: List of associated tags.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remove_tags_automatically", remove_tags_automatically)
        pulumi.set(__self__, "specifications", specifications)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Auto Tag ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Auto Tag name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="removeTagsAutomatically")
    def remove_tags_automatically(self) -> bool:
        """
        Remove tags automatically flag.
        """
        return pulumi.get(self, "remove_tags_automatically")

    @property
    @pulumi.getter
    def specifications(self) -> Sequence['outputs.GetAutoTagsAutoTagSpecificationResult']:
        """
        Specifications.
        """
        return pulumi.get(self, "specifications")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetAutoTagsAutoTagSpecificationResult(dict):
    def __init__(__self__, *,
                 implementation: str,
                 name: str,
                 negate: bool,
                 required: bool,
                 value: str):
        """
        :param str implementation: Implementation.
        :param str name: Auto Tag name.
        :param bool negate: Negate flag.
        :param bool required: Computed flag.
        :param str value: Value.
        """
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "negate", negate)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Implementation.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Auto Tag name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def negate(self) -> bool:
        """
        Negate flag.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Computed flag.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str):
        """
        :param int id: Tag ID.
        :param str label: Tag label.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Tag ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Tag label.
        """
        return pulumi.get(self, "label")


