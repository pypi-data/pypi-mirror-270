# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSearchSeriesResult',
    'AwaitableGetSearchSeriesResult',
    'get_search_series',
    'get_search_series_output',
]

@pulumi.output_type
class GetSearchSeriesResult:
    """
    A collection of values returned by getSearchSeries.
    """
    def __init__(__self__, id=None, monitored=None, path=None, quality_profile_id=None, root_folder_path=None, season_folder=None, tags=None, title=None, title_slug=None, tvdb_id=None, use_scene_numbering=None):
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if monitored and not isinstance(monitored, bool):
            raise TypeError("Expected argument 'monitored' to be a bool")
        pulumi.set(__self__, "monitored", monitored)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if quality_profile_id and not isinstance(quality_profile_id, int):
            raise TypeError("Expected argument 'quality_profile_id' to be a int")
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if root_folder_path and not isinstance(root_folder_path, str):
            raise TypeError("Expected argument 'root_folder_path' to be a str")
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        if season_folder and not isinstance(season_folder, bool):
            raise TypeError("Expected argument 'season_folder' to be a bool")
        pulumi.set(__self__, "season_folder", season_folder)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)
        if title_slug and not isinstance(title_slug, str):
            raise TypeError("Expected argument 'title_slug' to be a str")
        pulumi.set(__self__, "title_slug", title_slug)
        if tvdb_id and not isinstance(tvdb_id, int):
            raise TypeError("Expected argument 'tvdb_id' to be a int")
        pulumi.set(__self__, "tvdb_id", tvdb_id)
        if use_scene_numbering and not isinstance(use_scene_numbering, bool):
            raise TypeError("Expected argument 'use_scene_numbering' to be a bool")
        pulumi.set(__self__, "use_scene_numbering", use_scene_numbering)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Series ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monitored(self) -> bool:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Series Path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality Profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        Series Root Folder.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="seasonFolder")
    def season_folder(self) -> bool:
        """
        Season Folder flag.
        """
        return pulumi.get(self, "season_folder")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Series Title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleSlug")
    def title_slug(self) -> str:
        """
        Series Title in kebab format.
        """
        return pulumi.get(self, "title_slug")

    @property
    @pulumi.getter(name="tvdbId")
    def tvdb_id(self) -> int:
        """
        TVDB ID.
        """
        return pulumi.get(self, "tvdb_id")

    @property
    @pulumi.getter(name="useSceneNumbering")
    def use_scene_numbering(self) -> bool:
        """
        Scene numbering flag.
        """
        return pulumi.get(self, "use_scene_numbering")


class AwaitableGetSearchSeriesResult(GetSearchSeriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSearchSeriesResult(
            id=self.id,
            monitored=self.monitored,
            path=self.path,
            quality_profile_id=self.quality_profile_id,
            root_folder_path=self.root_folder_path,
            season_folder=self.season_folder,
            tags=self.tags,
            title=self.title,
            title_slug=self.title_slug,
            tvdb_id=self.tvdb_id,
            use_scene_numbering=self.use_scene_numbering)


def get_search_series(tvdb_id: Optional[int] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSearchSeriesResult:
    """
    <!-- subcategory:Series -->
    Search a Single Series via tvdb_id.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.Series.get_search_series(tvdb_id=153021)
    ```


    :param int tvdb_id: TVDB ID.
    """
    __args__ = dict()
    __args__['tvdbId'] = tvdb_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarr:Series/getSearchSeries:getSearchSeries', __args__, opts=opts, typ=GetSearchSeriesResult).value

    return AwaitableGetSearchSeriesResult(
        id=pulumi.get(__ret__, 'id'),
        monitored=pulumi.get(__ret__, 'monitored'),
        path=pulumi.get(__ret__, 'path'),
        quality_profile_id=pulumi.get(__ret__, 'quality_profile_id'),
        root_folder_path=pulumi.get(__ret__, 'root_folder_path'),
        season_folder=pulumi.get(__ret__, 'season_folder'),
        tags=pulumi.get(__ret__, 'tags'),
        title=pulumi.get(__ret__, 'title'),
        title_slug=pulumi.get(__ret__, 'title_slug'),
        tvdb_id=pulumi.get(__ret__, 'tvdb_id'),
        use_scene_numbering=pulumi.get(__ret__, 'use_scene_numbering'))


@_utilities.lift_output_func(get_search_series)
def get_search_series_output(tvdb_id: Optional[pulumi.Input[int]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSearchSeriesResult]:
    """
    <!-- subcategory:Series -->
    Search a Single Series via tvdb_id.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.Series.get_search_series(tvdb_id=153021)
    ```


    :param int tvdb_id: TVDB ID.
    """
    ...
