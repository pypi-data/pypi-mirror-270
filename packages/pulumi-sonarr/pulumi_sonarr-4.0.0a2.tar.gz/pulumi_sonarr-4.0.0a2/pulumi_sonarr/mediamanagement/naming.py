# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NamingArgs', 'Naming']

@pulumi.input_type
class NamingArgs:
    def __init__(__self__, *,
                 anime_episode_format: pulumi.Input[str],
                 colon_replacement_format: pulumi.Input[int],
                 daily_episode_format: pulumi.Input[str],
                 multi_episode_style: pulumi.Input[int],
                 rename_episodes: pulumi.Input[bool],
                 replace_illegal_characters: pulumi.Input[bool],
                 season_folder_format: pulumi.Input[str],
                 series_folder_format: pulumi.Input[str],
                 specials_folder_format: pulumi.Input[str],
                 standard_episode_format: pulumi.Input[str]):
        """
        The set of arguments for constructing a Naming resource.
        :param pulumi.Input[str] anime_episode_format: Anime episode format.
        :param pulumi.Input[int] colon_replacement_format: Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
        :param pulumi.Input[str] daily_episode_format: Daily episode format.
        :param pulumi.Input[int] multi_episode_style: Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
        :param pulumi.Input[bool] rename_episodes: Sonarr will use the existing file name if false.
        :param pulumi.Input[bool] replace_illegal_characters: Replace illegal characters. They will be removed if false.
        :param pulumi.Input[str] season_folder_format: Season folder format.
        :param pulumi.Input[str] series_folder_format: Series folder format.
        :param pulumi.Input[str] specials_folder_format: Special folder format.
        :param pulumi.Input[str] standard_episode_format: Standard episode formatss.
        """
        pulumi.set(__self__, "anime_episode_format", anime_episode_format)
        pulumi.set(__self__, "colon_replacement_format", colon_replacement_format)
        pulumi.set(__self__, "daily_episode_format", daily_episode_format)
        pulumi.set(__self__, "multi_episode_style", multi_episode_style)
        pulumi.set(__self__, "rename_episodes", rename_episodes)
        pulumi.set(__self__, "replace_illegal_characters", replace_illegal_characters)
        pulumi.set(__self__, "season_folder_format", season_folder_format)
        pulumi.set(__self__, "series_folder_format", series_folder_format)
        pulumi.set(__self__, "specials_folder_format", specials_folder_format)
        pulumi.set(__self__, "standard_episode_format", standard_episode_format)

    @property
    @pulumi.getter(name="animeEpisodeFormat")
    def anime_episode_format(self) -> pulumi.Input[str]:
        """
        Anime episode format.
        """
        return pulumi.get(self, "anime_episode_format")

    @anime_episode_format.setter
    def anime_episode_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "anime_episode_format", value)

    @property
    @pulumi.getter(name="colonReplacementFormat")
    def colon_replacement_format(self) -> pulumi.Input[int]:
        """
        Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
        """
        return pulumi.get(self, "colon_replacement_format")

    @colon_replacement_format.setter
    def colon_replacement_format(self, value: pulumi.Input[int]):
        pulumi.set(self, "colon_replacement_format", value)

    @property
    @pulumi.getter(name="dailyEpisodeFormat")
    def daily_episode_format(self) -> pulumi.Input[str]:
        """
        Daily episode format.
        """
        return pulumi.get(self, "daily_episode_format")

    @daily_episode_format.setter
    def daily_episode_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "daily_episode_format", value)

    @property
    @pulumi.getter(name="multiEpisodeStyle")
    def multi_episode_style(self) -> pulumi.Input[int]:
        """
        Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
        """
        return pulumi.get(self, "multi_episode_style")

    @multi_episode_style.setter
    def multi_episode_style(self, value: pulumi.Input[int]):
        pulumi.set(self, "multi_episode_style", value)

    @property
    @pulumi.getter(name="renameEpisodes")
    def rename_episodes(self) -> pulumi.Input[bool]:
        """
        Sonarr will use the existing file name if false.
        """
        return pulumi.get(self, "rename_episodes")

    @rename_episodes.setter
    def rename_episodes(self, value: pulumi.Input[bool]):
        pulumi.set(self, "rename_episodes", value)

    @property
    @pulumi.getter(name="replaceIllegalCharacters")
    def replace_illegal_characters(self) -> pulumi.Input[bool]:
        """
        Replace illegal characters. They will be removed if false.
        """
        return pulumi.get(self, "replace_illegal_characters")

    @replace_illegal_characters.setter
    def replace_illegal_characters(self, value: pulumi.Input[bool]):
        pulumi.set(self, "replace_illegal_characters", value)

    @property
    @pulumi.getter(name="seasonFolderFormat")
    def season_folder_format(self) -> pulumi.Input[str]:
        """
        Season folder format.
        """
        return pulumi.get(self, "season_folder_format")

    @season_folder_format.setter
    def season_folder_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "season_folder_format", value)

    @property
    @pulumi.getter(name="seriesFolderFormat")
    def series_folder_format(self) -> pulumi.Input[str]:
        """
        Series folder format.
        """
        return pulumi.get(self, "series_folder_format")

    @series_folder_format.setter
    def series_folder_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "series_folder_format", value)

    @property
    @pulumi.getter(name="specialsFolderFormat")
    def specials_folder_format(self) -> pulumi.Input[str]:
        """
        Special folder format.
        """
        return pulumi.get(self, "specials_folder_format")

    @specials_folder_format.setter
    def specials_folder_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "specials_folder_format", value)

    @property
    @pulumi.getter(name="standardEpisodeFormat")
    def standard_episode_format(self) -> pulumi.Input[str]:
        """
        Standard episode formatss.
        """
        return pulumi.get(self, "standard_episode_format")

    @standard_episode_format.setter
    def standard_episode_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "standard_episode_format", value)


@pulumi.input_type
class _NamingState:
    def __init__(__self__, *,
                 anime_episode_format: Optional[pulumi.Input[str]] = None,
                 colon_replacement_format: Optional[pulumi.Input[int]] = None,
                 daily_episode_format: Optional[pulumi.Input[str]] = None,
                 multi_episode_style: Optional[pulumi.Input[int]] = None,
                 rename_episodes: Optional[pulumi.Input[bool]] = None,
                 replace_illegal_characters: Optional[pulumi.Input[bool]] = None,
                 season_folder_format: Optional[pulumi.Input[str]] = None,
                 series_folder_format: Optional[pulumi.Input[str]] = None,
                 specials_folder_format: Optional[pulumi.Input[str]] = None,
                 standard_episode_format: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Naming resources.
        :param pulumi.Input[str] anime_episode_format: Anime episode format.
        :param pulumi.Input[int] colon_replacement_format: Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
        :param pulumi.Input[str] daily_episode_format: Daily episode format.
        :param pulumi.Input[int] multi_episode_style: Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
        :param pulumi.Input[bool] rename_episodes: Sonarr will use the existing file name if false.
        :param pulumi.Input[bool] replace_illegal_characters: Replace illegal characters. They will be removed if false.
        :param pulumi.Input[str] season_folder_format: Season folder format.
        :param pulumi.Input[str] series_folder_format: Series folder format.
        :param pulumi.Input[str] specials_folder_format: Special folder format.
        :param pulumi.Input[str] standard_episode_format: Standard episode formatss.
        """
        if anime_episode_format is not None:
            pulumi.set(__self__, "anime_episode_format", anime_episode_format)
        if colon_replacement_format is not None:
            pulumi.set(__self__, "colon_replacement_format", colon_replacement_format)
        if daily_episode_format is not None:
            pulumi.set(__self__, "daily_episode_format", daily_episode_format)
        if multi_episode_style is not None:
            pulumi.set(__self__, "multi_episode_style", multi_episode_style)
        if rename_episodes is not None:
            pulumi.set(__self__, "rename_episodes", rename_episodes)
        if replace_illegal_characters is not None:
            pulumi.set(__self__, "replace_illegal_characters", replace_illegal_characters)
        if season_folder_format is not None:
            pulumi.set(__self__, "season_folder_format", season_folder_format)
        if series_folder_format is not None:
            pulumi.set(__self__, "series_folder_format", series_folder_format)
        if specials_folder_format is not None:
            pulumi.set(__self__, "specials_folder_format", specials_folder_format)
        if standard_episode_format is not None:
            pulumi.set(__self__, "standard_episode_format", standard_episode_format)

    @property
    @pulumi.getter(name="animeEpisodeFormat")
    def anime_episode_format(self) -> Optional[pulumi.Input[str]]:
        """
        Anime episode format.
        """
        return pulumi.get(self, "anime_episode_format")

    @anime_episode_format.setter
    def anime_episode_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anime_episode_format", value)

    @property
    @pulumi.getter(name="colonReplacementFormat")
    def colon_replacement_format(self) -> Optional[pulumi.Input[int]]:
        """
        Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
        """
        return pulumi.get(self, "colon_replacement_format")

    @colon_replacement_format.setter
    def colon_replacement_format(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "colon_replacement_format", value)

    @property
    @pulumi.getter(name="dailyEpisodeFormat")
    def daily_episode_format(self) -> Optional[pulumi.Input[str]]:
        """
        Daily episode format.
        """
        return pulumi.get(self, "daily_episode_format")

    @daily_episode_format.setter
    def daily_episode_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daily_episode_format", value)

    @property
    @pulumi.getter(name="multiEpisodeStyle")
    def multi_episode_style(self) -> Optional[pulumi.Input[int]]:
        """
        Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
        """
        return pulumi.get(self, "multi_episode_style")

    @multi_episode_style.setter
    def multi_episode_style(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multi_episode_style", value)

    @property
    @pulumi.getter(name="renameEpisodes")
    def rename_episodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Sonarr will use the existing file name if false.
        """
        return pulumi.get(self, "rename_episodes")

    @rename_episodes.setter
    def rename_episodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rename_episodes", value)

    @property
    @pulumi.getter(name="replaceIllegalCharacters")
    def replace_illegal_characters(self) -> Optional[pulumi.Input[bool]]:
        """
        Replace illegal characters. They will be removed if false.
        """
        return pulumi.get(self, "replace_illegal_characters")

    @replace_illegal_characters.setter
    def replace_illegal_characters(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace_illegal_characters", value)

    @property
    @pulumi.getter(name="seasonFolderFormat")
    def season_folder_format(self) -> Optional[pulumi.Input[str]]:
        """
        Season folder format.
        """
        return pulumi.get(self, "season_folder_format")

    @season_folder_format.setter
    def season_folder_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "season_folder_format", value)

    @property
    @pulumi.getter(name="seriesFolderFormat")
    def series_folder_format(self) -> Optional[pulumi.Input[str]]:
        """
        Series folder format.
        """
        return pulumi.get(self, "series_folder_format")

    @series_folder_format.setter
    def series_folder_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_folder_format", value)

    @property
    @pulumi.getter(name="specialsFolderFormat")
    def specials_folder_format(self) -> Optional[pulumi.Input[str]]:
        """
        Special folder format.
        """
        return pulumi.get(self, "specials_folder_format")

    @specials_folder_format.setter
    def specials_folder_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "specials_folder_format", value)

    @property
    @pulumi.getter(name="standardEpisodeFormat")
    def standard_episode_format(self) -> Optional[pulumi.Input[str]]:
        """
        Standard episode formatss.
        """
        return pulumi.get(self, "standard_episode_format")

    @standard_episode_format.setter
    def standard_episode_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standard_episode_format", value)


class Naming(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anime_episode_format: Optional[pulumi.Input[str]] = None,
                 colon_replacement_format: Optional[pulumi.Input[int]] = None,
                 daily_episode_format: Optional[pulumi.Input[str]] = None,
                 multi_episode_style: Optional[pulumi.Input[int]] = None,
                 rename_episodes: Optional[pulumi.Input[bool]] = None,
                 replace_illegal_characters: Optional[pulumi.Input[bool]] = None,
                 season_folder_format: Optional[pulumi.Input[str]] = None,
                 series_folder_format: Optional[pulumi.Input[str]] = None,
                 specials_folder_format: Optional[pulumi.Input[str]] = None,
                 standard_episode_format: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        <!-- subcategory:Media Management -->
        Naming resource.
        For more information refer to [Naming](https://wiki.servarr.com/sonarr/settings#community-naming-suggestions) documentation.

        ## Import

        import does not need parameters

        ```sh
         $ pulumi import sonarr:MediaManagement/naming:Naming example ""
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] anime_episode_format: Anime episode format.
        :param pulumi.Input[int] colon_replacement_format: Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
        :param pulumi.Input[str] daily_episode_format: Daily episode format.
        :param pulumi.Input[int] multi_episode_style: Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
        :param pulumi.Input[bool] rename_episodes: Sonarr will use the existing file name if false.
        :param pulumi.Input[bool] replace_illegal_characters: Replace illegal characters. They will be removed if false.
        :param pulumi.Input[str] season_folder_format: Season folder format.
        :param pulumi.Input[str] series_folder_format: Series folder format.
        :param pulumi.Input[str] specials_folder_format: Special folder format.
        :param pulumi.Input[str] standard_episode_format: Standard episode formatss.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Media Management -->
        Naming resource.
        For more information refer to [Naming](https://wiki.servarr.com/sonarr/settings#community-naming-suggestions) documentation.

        ## Import

        import does not need parameters

        ```sh
         $ pulumi import sonarr:MediaManagement/naming:Naming example ""
        ```

        :param str resource_name: The name of the resource.
        :param NamingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anime_episode_format: Optional[pulumi.Input[str]] = None,
                 colon_replacement_format: Optional[pulumi.Input[int]] = None,
                 daily_episode_format: Optional[pulumi.Input[str]] = None,
                 multi_episode_style: Optional[pulumi.Input[int]] = None,
                 rename_episodes: Optional[pulumi.Input[bool]] = None,
                 replace_illegal_characters: Optional[pulumi.Input[bool]] = None,
                 season_folder_format: Optional[pulumi.Input[str]] = None,
                 series_folder_format: Optional[pulumi.Input[str]] = None,
                 specials_folder_format: Optional[pulumi.Input[str]] = None,
                 standard_episode_format: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamingArgs.__new__(NamingArgs)

            if anime_episode_format is None and not opts.urn:
                raise TypeError("Missing required property 'anime_episode_format'")
            __props__.__dict__["anime_episode_format"] = anime_episode_format
            if colon_replacement_format is None and not opts.urn:
                raise TypeError("Missing required property 'colon_replacement_format'")
            __props__.__dict__["colon_replacement_format"] = colon_replacement_format
            if daily_episode_format is None and not opts.urn:
                raise TypeError("Missing required property 'daily_episode_format'")
            __props__.__dict__["daily_episode_format"] = daily_episode_format
            if multi_episode_style is None and not opts.urn:
                raise TypeError("Missing required property 'multi_episode_style'")
            __props__.__dict__["multi_episode_style"] = multi_episode_style
            if rename_episodes is None and not opts.urn:
                raise TypeError("Missing required property 'rename_episodes'")
            __props__.__dict__["rename_episodes"] = rename_episodes
            if replace_illegal_characters is None and not opts.urn:
                raise TypeError("Missing required property 'replace_illegal_characters'")
            __props__.__dict__["replace_illegal_characters"] = replace_illegal_characters
            if season_folder_format is None and not opts.urn:
                raise TypeError("Missing required property 'season_folder_format'")
            __props__.__dict__["season_folder_format"] = season_folder_format
            if series_folder_format is None and not opts.urn:
                raise TypeError("Missing required property 'series_folder_format'")
            __props__.__dict__["series_folder_format"] = series_folder_format
            if specials_folder_format is None and not opts.urn:
                raise TypeError("Missing required property 'specials_folder_format'")
            __props__.__dict__["specials_folder_format"] = specials_folder_format
            if standard_episode_format is None and not opts.urn:
                raise TypeError("Missing required property 'standard_episode_format'")
            __props__.__dict__["standard_episode_format"] = standard_episode_format
        super(Naming, __self__).__init__(
            'sonarr:MediaManagement/naming:Naming',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anime_episode_format: Optional[pulumi.Input[str]] = None,
            colon_replacement_format: Optional[pulumi.Input[int]] = None,
            daily_episode_format: Optional[pulumi.Input[str]] = None,
            multi_episode_style: Optional[pulumi.Input[int]] = None,
            rename_episodes: Optional[pulumi.Input[bool]] = None,
            replace_illegal_characters: Optional[pulumi.Input[bool]] = None,
            season_folder_format: Optional[pulumi.Input[str]] = None,
            series_folder_format: Optional[pulumi.Input[str]] = None,
            specials_folder_format: Optional[pulumi.Input[str]] = None,
            standard_episode_format: Optional[pulumi.Input[str]] = None) -> 'Naming':
        """
        Get an existing Naming resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] anime_episode_format: Anime episode format.
        :param pulumi.Input[int] colon_replacement_format: Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
        :param pulumi.Input[str] daily_episode_format: Daily episode format.
        :param pulumi.Input[int] multi_episode_style: Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
        :param pulumi.Input[bool] rename_episodes: Sonarr will use the existing file name if false.
        :param pulumi.Input[bool] replace_illegal_characters: Replace illegal characters. They will be removed if false.
        :param pulumi.Input[str] season_folder_format: Season folder format.
        :param pulumi.Input[str] series_folder_format: Series folder format.
        :param pulumi.Input[str] specials_folder_format: Special folder format.
        :param pulumi.Input[str] standard_episode_format: Standard episode formatss.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamingState.__new__(_NamingState)

        __props__.__dict__["anime_episode_format"] = anime_episode_format
        __props__.__dict__["colon_replacement_format"] = colon_replacement_format
        __props__.__dict__["daily_episode_format"] = daily_episode_format
        __props__.__dict__["multi_episode_style"] = multi_episode_style
        __props__.__dict__["rename_episodes"] = rename_episodes
        __props__.__dict__["replace_illegal_characters"] = replace_illegal_characters
        __props__.__dict__["season_folder_format"] = season_folder_format
        __props__.__dict__["series_folder_format"] = series_folder_format
        __props__.__dict__["specials_folder_format"] = specials_folder_format
        __props__.__dict__["standard_episode_format"] = standard_episode_format
        return Naming(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="animeEpisodeFormat")
    def anime_episode_format(self) -> pulumi.Output[str]:
        """
        Anime episode format.
        """
        return pulumi.get(self, "anime_episode_format")

    @property
    @pulumi.getter(name="colonReplacementFormat")
    def colon_replacement_format(self) -> pulumi.Output[int]:
        """
        Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
        """
        return pulumi.get(self, "colon_replacement_format")

    @property
    @pulumi.getter(name="dailyEpisodeFormat")
    def daily_episode_format(self) -> pulumi.Output[str]:
        """
        Daily episode format.
        """
        return pulumi.get(self, "daily_episode_format")

    @property
    @pulumi.getter(name="multiEpisodeStyle")
    def multi_episode_style(self) -> pulumi.Output[int]:
        """
        Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
        """
        return pulumi.get(self, "multi_episode_style")

    @property
    @pulumi.getter(name="renameEpisodes")
    def rename_episodes(self) -> pulumi.Output[bool]:
        """
        Sonarr will use the existing file name if false.
        """
        return pulumi.get(self, "rename_episodes")

    @property
    @pulumi.getter(name="replaceIllegalCharacters")
    def replace_illegal_characters(self) -> pulumi.Output[bool]:
        """
        Replace illegal characters. They will be removed if false.
        """
        return pulumi.get(self, "replace_illegal_characters")

    @property
    @pulumi.getter(name="seasonFolderFormat")
    def season_folder_format(self) -> pulumi.Output[str]:
        """
        Season folder format.
        """
        return pulumi.get(self, "season_folder_format")

    @property
    @pulumi.getter(name="seriesFolderFormat")
    def series_folder_format(self) -> pulumi.Output[str]:
        """
        Series folder format.
        """
        return pulumi.get(self, "series_folder_format")

    @property
    @pulumi.getter(name="specialsFolderFormat")
    def specials_folder_format(self) -> pulumi.Output[str]:
        """
        Special folder format.
        """
        return pulumi.get(self, "specials_folder_format")

    @property
    @pulumi.getter(name="standardEpisodeFormat")
    def standard_episode_format(self) -> pulumi.Output[str]:
        """
        Standard episode formatss.
        """
        return pulumi.get(self, "standard_episode_format")

