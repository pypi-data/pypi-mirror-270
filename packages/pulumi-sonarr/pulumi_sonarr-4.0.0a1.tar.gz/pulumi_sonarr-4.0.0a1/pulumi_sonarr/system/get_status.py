# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetStatusResult',
    'AwaitableGetStatusResult',
    'get_status',
    'get_status_output',
]

@pulumi.output_type
class GetStatusResult:
    """
    A collection of values returned by getStatus.
    """
    def __init__(__self__, app_data=None, authentication=None, branch=None, build_time=None, id=None, is_admin=None, is_debug=None, is_linux=None, is_osx=None, is_production=None, is_user_interactive=None, is_windows=None, mode=None, os_name=None, os_version=None, package_author=None, package_update_mechanism=None, package_version=None, runtime_name=None, runtime_version=None, sqlite_version=None, start_time=None, startup_path=None, version=None):
        if app_data and not isinstance(app_data, str):
            raise TypeError("Expected argument 'app_data' to be a str")
        pulumi.set(__self__, "app_data", app_data)
        if authentication and not isinstance(authentication, str):
            raise TypeError("Expected argument 'authentication' to be a str")
        pulumi.set(__self__, "authentication", authentication)
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        pulumi.set(__self__, "branch", branch)
        if build_time and not isinstance(build_time, str):
            raise TypeError("Expected argument 'build_time' to be a str")
        pulumi.set(__self__, "build_time", build_time)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if is_admin and not isinstance(is_admin, bool):
            raise TypeError("Expected argument 'is_admin' to be a bool")
        pulumi.set(__self__, "is_admin", is_admin)
        if is_debug and not isinstance(is_debug, bool):
            raise TypeError("Expected argument 'is_debug' to be a bool")
        pulumi.set(__self__, "is_debug", is_debug)
        if is_linux and not isinstance(is_linux, bool):
            raise TypeError("Expected argument 'is_linux' to be a bool")
        pulumi.set(__self__, "is_linux", is_linux)
        if is_osx and not isinstance(is_osx, bool):
            raise TypeError("Expected argument 'is_osx' to be a bool")
        pulumi.set(__self__, "is_osx", is_osx)
        if is_production and not isinstance(is_production, bool):
            raise TypeError("Expected argument 'is_production' to be a bool")
        pulumi.set(__self__, "is_production", is_production)
        if is_user_interactive and not isinstance(is_user_interactive, bool):
            raise TypeError("Expected argument 'is_user_interactive' to be a bool")
        pulumi.set(__self__, "is_user_interactive", is_user_interactive)
        if is_windows and not isinstance(is_windows, bool):
            raise TypeError("Expected argument 'is_windows' to be a bool")
        pulumi.set(__self__, "is_windows", is_windows)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if os_name and not isinstance(os_name, str):
            raise TypeError("Expected argument 'os_name' to be a str")
        pulumi.set(__self__, "os_name", os_name)
        if os_version and not isinstance(os_version, str):
            raise TypeError("Expected argument 'os_version' to be a str")
        pulumi.set(__self__, "os_version", os_version)
        if package_author and not isinstance(package_author, str):
            raise TypeError("Expected argument 'package_author' to be a str")
        pulumi.set(__self__, "package_author", package_author)
        if package_update_mechanism and not isinstance(package_update_mechanism, str):
            raise TypeError("Expected argument 'package_update_mechanism' to be a str")
        pulumi.set(__self__, "package_update_mechanism", package_update_mechanism)
        if package_version and not isinstance(package_version, str):
            raise TypeError("Expected argument 'package_version' to be a str")
        pulumi.set(__self__, "package_version", package_version)
        if runtime_name and not isinstance(runtime_name, str):
            raise TypeError("Expected argument 'runtime_name' to be a str")
        pulumi.set(__self__, "runtime_name", runtime_name)
        if runtime_version and not isinstance(runtime_version, str):
            raise TypeError("Expected argument 'runtime_version' to be a str")
        pulumi.set(__self__, "runtime_version", runtime_version)
        if sqlite_version and not isinstance(sqlite_version, str):
            raise TypeError("Expected argument 'sqlite_version' to be a str")
        pulumi.set(__self__, "sqlite_version", sqlite_version)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if startup_path and not isinstance(startup_path, str):
            raise TypeError("Expected argument 'startup_path' to be a str")
        pulumi.set(__self__, "startup_path", startup_path)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="appData")
    def app_data(self) -> str:
        """
        App data folder.
        """
        return pulumi.get(self, "app_data")

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Authentication.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def branch(self) -> str:
        """
        Branch.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="buildTime")
    def build_time(self) -> str:
        """
        Build time.
        """
        return pulumi.get(self, "build_time")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Delay Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAdmin")
    def is_admin(self) -> bool:
        """
        Is admin flag.
        """
        return pulumi.get(self, "is_admin")

    @property
    @pulumi.getter(name="isDebug")
    def is_debug(self) -> bool:
        """
        Is debug flag.
        """
        return pulumi.get(self, "is_debug")

    @property
    @pulumi.getter(name="isLinux")
    def is_linux(self) -> bool:
        """
        Is linux flag.
        """
        return pulumi.get(self, "is_linux")

    @property
    @pulumi.getter(name="isOsx")
    def is_osx(self) -> bool:
        """
        Is osx flag.
        """
        return pulumi.get(self, "is_osx")

    @property
    @pulumi.getter(name="isProduction")
    def is_production(self) -> bool:
        """
        Is production flag.
        """
        return pulumi.get(self, "is_production")

    @property
    @pulumi.getter(name="isUserInteractive")
    def is_user_interactive(self) -> bool:
        """
        Is user interactive flag.
        """
        return pulumi.get(self, "is_user_interactive")

    @property
    @pulumi.getter(name="isWindows")
    def is_windows(self) -> bool:
        """
        Is windows flag.
        """
        return pulumi.get(self, "is_windows")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        OS name.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        """
        OS version.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="packageAuthor")
    def package_author(self) -> str:
        """
        Package author.
        """
        return pulumi.get(self, "package_author")

    @property
    @pulumi.getter(name="packageUpdateMechanism")
    def package_update_mechanism(self) -> str:
        """
        Package update mechanism.
        """
        return pulumi.get(self, "package_update_mechanism")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> str:
        """
        Package version.
        """
        return pulumi.get(self, "package_version")

    @property
    @pulumi.getter(name="runtimeName")
    def runtime_name(self) -> str:
        """
        Runtime name.
        """
        return pulumi.get(self, "runtime_name")

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> str:
        """
        Runtime version.
        """
        return pulumi.get(self, "runtime_version")

    @property
    @pulumi.getter(name="sqliteVersion")
    def sqlite_version(self) -> str:
        """
        SQLite version.
        """
        return pulumi.get(self, "sqlite_version")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="startupPath")
    def startup_path(self) -> str:
        """
        Startup path.
        """
        return pulumi.get(self, "startup_path")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version.
        """
        return pulumi.get(self, "version")


class AwaitableGetStatusResult(GetStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStatusResult(
            app_data=self.app_data,
            authentication=self.authentication,
            branch=self.branch,
            build_time=self.build_time,
            id=self.id,
            is_admin=self.is_admin,
            is_debug=self.is_debug,
            is_linux=self.is_linux,
            is_osx=self.is_osx,
            is_production=self.is_production,
            is_user_interactive=self.is_user_interactive,
            is_windows=self.is_windows,
            mode=self.mode,
            os_name=self.os_name,
            os_version=self.os_version,
            package_author=self.package_author,
            package_update_mechanism=self.package_update_mechanism,
            package_version=self.package_version,
            runtime_name=self.runtime_name,
            runtime_version=self.runtime_version,
            sqlite_version=self.sqlite_version,
            start_time=self.start_time,
            startup_path=self.startup_path,
            version=self.version)


def get_status(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStatusResult:
    """
    <!-- subcategory:System -->
    System Status resource. User must have rights to read `config.xml`.
    For more information refer to [System Status](https://wiki.servarr.com/sonarr/system#status) documentation.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.System.get_status()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarr:System/getStatus:getStatus', __args__, opts=opts, typ=GetStatusResult).value

    return AwaitableGetStatusResult(
        app_data=pulumi.get(__ret__, 'app_data'),
        authentication=pulumi.get(__ret__, 'authentication'),
        branch=pulumi.get(__ret__, 'branch'),
        build_time=pulumi.get(__ret__, 'build_time'),
        id=pulumi.get(__ret__, 'id'),
        is_admin=pulumi.get(__ret__, 'is_admin'),
        is_debug=pulumi.get(__ret__, 'is_debug'),
        is_linux=pulumi.get(__ret__, 'is_linux'),
        is_osx=pulumi.get(__ret__, 'is_osx'),
        is_production=pulumi.get(__ret__, 'is_production'),
        is_user_interactive=pulumi.get(__ret__, 'is_user_interactive'),
        is_windows=pulumi.get(__ret__, 'is_windows'),
        mode=pulumi.get(__ret__, 'mode'),
        os_name=pulumi.get(__ret__, 'os_name'),
        os_version=pulumi.get(__ret__, 'os_version'),
        package_author=pulumi.get(__ret__, 'package_author'),
        package_update_mechanism=pulumi.get(__ret__, 'package_update_mechanism'),
        package_version=pulumi.get(__ret__, 'package_version'),
        runtime_name=pulumi.get(__ret__, 'runtime_name'),
        runtime_version=pulumi.get(__ret__, 'runtime_version'),
        sqlite_version=pulumi.get(__ret__, 'sqlite_version'),
        start_time=pulumi.get(__ret__, 'start_time'),
        startup_path=pulumi.get(__ret__, 'startup_path'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_status)
def get_status_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStatusResult]:
    """
    <!-- subcategory:System -->
    System Status resource. User must have rights to read `config.xml`.
    For more information refer to [System Status](https://wiki.servarr.com/sonarr/system#status) documentation.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.System.get_status()
    ```
    """
    ...
