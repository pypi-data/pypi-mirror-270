# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetQualityResult',
    'AwaitableGetQualityResult',
    'get_quality',
    'get_quality_output',
]

@pulumi.output_type
class GetQualityResult:
    """
    A collection of values returned by getQuality.
    """
    def __init__(__self__, id=None, name=None, resolution=None, source=None):
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resolution and not isinstance(resolution, int):
            raise TypeError("Expected argument 'resolution' to be a int")
        pulumi.set(__self__, "resolution", resolution)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Quality  ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Quality Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resolution(self) -> int:
        """
        Quality Resolution.
        """
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Quality source.
        """
        return pulumi.get(self, "source")


class AwaitableGetQualityResult(GetQualityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQualityResult(
            id=self.id,
            name=self.name,
            resolution=self.resolution,
            source=self.source)


def get_quality(name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQualityResult:
    """
    <!-- subcategory:Profiles -->
    Single Quality.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    bluray = sonarr.Profiles.get_quality(name="Bluray-2160p")
    webdl = sonarr.Profiles.get_quality(name="WEBDL-2160p")
    webrip = sonarr.Profiles.get_quality(name="WEBRip-2160p")
    example = sonarr.profiles.Profile("example",
        upgrade_allowed=True,
        cutoff=2000,
        quality_groups=[
            sonarr.profiles.ProfileQualityGroupArgs(
                id=2000,
                name="WEB 2160p",
                qualities=[
                    webdl,
                    webrip,
                ],
            ),
            sonarr.profiles.ProfileQualityGroupArgs(
                qualities=[bluray],
            ),
        ])
    ```


    :param str name: Quality Name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarr:Profiles/getQuality:getQuality', __args__, opts=opts, typ=GetQualityResult).value

    return AwaitableGetQualityResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resolution=pulumi.get(__ret__, 'resolution'),
        source=pulumi.get(__ret__, 'source'))


@_utilities.lift_output_func(get_quality)
def get_quality_output(name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetQualityResult]:
    """
    <!-- subcategory:Profiles -->
    Single Quality.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    bluray = sonarr.Profiles.get_quality(name="Bluray-2160p")
    webdl = sonarr.Profiles.get_quality(name="WEBDL-2160p")
    webrip = sonarr.Profiles.get_quality(name="WEBRip-2160p")
    example = sonarr.profiles.Profile("example",
        upgrade_allowed=True,
        cutoff=2000,
        quality_groups=[
            sonarr.profiles.ProfileQualityGroupArgs(
                id=2000,
                name="WEB 2160p",
                qualities=[
                    webdl,
                    webrip,
                ],
            ),
            sonarr.profiles.ProfileQualityGroupArgs(
                qualities=[bluray],
            ),
        ])
    ```


    :param str name: Quality Name.
    """
    ...
