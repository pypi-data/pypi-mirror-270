# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDownloadClientsDownloadClientResult',
    'GetRemotePathMappingsRemotePathMappingResult',
]

@pulumi.output_type
class GetDownloadClientsDownloadClientResult(dict):
    def __init__(__self__, *,
                 add_paused: bool,
                 add_stopped: bool,
                 additional_tags: Sequence[int],
                 api_key: str,
                 category: str,
                 config_contract: str,
                 destination: str,
                 enable: bool,
                 field_tags: Sequence[str],
                 first_and_last: bool,
                 host: str,
                 id: int,
                 implementation: str,
                 initial_state: int,
                 intial_state: int,
                 magnet_file_extension: str,
                 name: str,
                 nzb_folder: str,
                 older_tv_priority: int,
                 password: str,
                 port: int,
                 post_import_tags: Sequence[str],
                 priority: int,
                 protocol: str,
                 read_only: bool,
                 recent_tv_priority: int,
                 remove_completed_downloads: bool,
                 remove_failed_downloads: bool,
                 rpc_path: str,
                 save_magnet_files: bool,
                 secret_token: str,
                 sequential_order: bool,
                 start_on_add: bool,
                 strm_folder: str,
                 tags: Sequence[int],
                 torrent_folder: str,
                 tv_category: str,
                 tv_directory: str,
                 tv_imported_category: str,
                 url_base: str,
                 use_ssl: bool,
                 username: str,
                 watch_folder: str):
        """
        :param bool add_paused: Add paused flag.
        :param bool add_stopped: Add stopped flag.
        :param Sequence[int] additional_tags: Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.
        :param str api_key: API key.
        :param str category: Category.
        :param str config_contract: DownloadClient configuration template.
        :param str destination: Destination.
        :param bool enable: Enable flag.
        :param Sequence[str] field_tags: Field tags.
        :param bool first_and_last: First and last flag.
        :param str host: host.
        :param int id: Download Client ID.
        :param str implementation: DownloadClient implementation name.
        :param int initial_state: Initial state. `0` Start, `1` ForceStart, `2` Pause.
        :param int intial_state: Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.
        :param str magnet_file_extension: Magnet file extension.
        :param str name: Download Client name.
        :param str nzb_folder: NZB folder.
        :param int older_tv_priority: Older TV priority. `0` Last, `1` First.
        :param str password: Password.
        :param int port: Port.
        :param Sequence[str] post_import_tags: Post import tags.
        :param int priority: Priority.
        :param str protocol: Protocol. Valid values are 'usenet' and 'torrent'.
        :param bool read_only: Read only flag.
        :param int recent_tv_priority: Recent TV priority. `0` Last, `1` First.
        :param bool remove_completed_downloads: Remove completed downloads flag.
        :param bool remove_failed_downloads: Remove failed downloads flag.
        :param str rpc_path: RPC path.
        :param bool save_magnet_files: Save magnet files flag.
        :param str secret_token: Secret token.
        :param bool sequential_order: Sequential order flag.
        :param bool start_on_add: Start on add flag.
        :param str strm_folder: STRM folder.
        :param Sequence[int] tags: List of associated tags.
        :param str torrent_folder: Torrent folder.
        :param str tv_category: TV category.
        :param str tv_directory: TV directory.
        :param str tv_imported_category: TV imported category.
        :param str url_base: Base URL.
        :param bool use_ssl: Use SSL flag.
        :param str username: Username.
        :param str watch_folder: Watch folder flag.
        """
        pulumi.set(__self__, "add_paused", add_paused)
        pulumi.set(__self__, "add_stopped", add_stopped)
        pulumi.set(__self__, "additional_tags", additional_tags)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "field_tags", field_tags)
        pulumi.set(__self__, "first_and_last", first_and_last)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "initial_state", initial_state)
        pulumi.set(__self__, "intial_state", intial_state)
        pulumi.set(__self__, "magnet_file_extension", magnet_file_extension)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nzb_folder", nzb_folder)
        pulumi.set(__self__, "older_tv_priority", older_tv_priority)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_import_tags", post_import_tags)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "recent_tv_priority", recent_tv_priority)
        pulumi.set(__self__, "remove_completed_downloads", remove_completed_downloads)
        pulumi.set(__self__, "remove_failed_downloads", remove_failed_downloads)
        pulumi.set(__self__, "rpc_path", rpc_path)
        pulumi.set(__self__, "save_magnet_files", save_magnet_files)
        pulumi.set(__self__, "secret_token", secret_token)
        pulumi.set(__self__, "sequential_order", sequential_order)
        pulumi.set(__self__, "start_on_add", start_on_add)
        pulumi.set(__self__, "strm_folder", strm_folder)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "torrent_folder", torrent_folder)
        pulumi.set(__self__, "tv_category", tv_category)
        pulumi.set(__self__, "tv_directory", tv_directory)
        pulumi.set(__self__, "tv_imported_category", tv_imported_category)
        pulumi.set(__self__, "url_base", url_base)
        pulumi.set(__self__, "use_ssl", use_ssl)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "watch_folder", watch_folder)

    @property
    @pulumi.getter(name="addPaused")
    def add_paused(self) -> bool:
        """
        Add paused flag.
        """
        return pulumi.get(self, "add_paused")

    @property
    @pulumi.getter(name="addStopped")
    def add_stopped(self) -> bool:
        """
        Add stopped flag.
        """
        return pulumi.get(self, "add_stopped")

    @property
    @pulumi.getter(name="additionalTags")
    def additional_tags(self) -> Sequence[int]:
        """
        Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.
        """
        return pulumi.get(self, "additional_tags")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        DownloadClient configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Destination.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Sequence[str]:
        """
        Field tags.
        """
        return pulumi.get(self, "field_tags")

    @property
    @pulumi.getter(name="firstAndLast")
    def first_and_last(self) -> bool:
        """
        First and last flag.
        """
        return pulumi.get(self, "first_and_last")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Download Client ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        DownloadClient implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="initialState")
    def initial_state(self) -> int:
        """
        Initial state. `0` Start, `1` ForceStart, `2` Pause.
        """
        return pulumi.get(self, "initial_state")

    @property
    @pulumi.getter(name="intialState")
    def intial_state(self) -> int:
        """
        Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.
        """
        return pulumi.get(self, "intial_state")

    @property
    @pulumi.getter(name="magnetFileExtension")
    def magnet_file_extension(self) -> str:
        """
        Magnet file extension.
        """
        return pulumi.get(self, "magnet_file_extension")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Download Client name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nzbFolder")
    def nzb_folder(self) -> str:
        """
        NZB folder.
        """
        return pulumi.get(self, "nzb_folder")

    @property
    @pulumi.getter(name="olderTvPriority")
    def older_tv_priority(self) -> int:
        """
        Older TV priority. `0` Last, `1` First.
        """
        return pulumi.get(self, "older_tv_priority")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="postImportTags")
    def post_import_tags(self) -> Sequence[str]:
        """
        Post import tags.
        """
        return pulumi.get(self, "post_import_tags")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol. Valid values are 'usenet' and 'torrent'.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Read only flag.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="recentTvPriority")
    def recent_tv_priority(self) -> int:
        """
        Recent TV priority. `0` Last, `1` First.
        """
        return pulumi.get(self, "recent_tv_priority")

    @property
    @pulumi.getter(name="removeCompletedDownloads")
    def remove_completed_downloads(self) -> bool:
        """
        Remove completed downloads flag.
        """
        return pulumi.get(self, "remove_completed_downloads")

    @property
    @pulumi.getter(name="removeFailedDownloads")
    def remove_failed_downloads(self) -> bool:
        """
        Remove failed downloads flag.
        """
        return pulumi.get(self, "remove_failed_downloads")

    @property
    @pulumi.getter(name="rpcPath")
    def rpc_path(self) -> str:
        """
        RPC path.
        """
        return pulumi.get(self, "rpc_path")

    @property
    @pulumi.getter(name="saveMagnetFiles")
    def save_magnet_files(self) -> bool:
        """
        Save magnet files flag.
        """
        return pulumi.get(self, "save_magnet_files")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> str:
        """
        Secret token.
        """
        return pulumi.get(self, "secret_token")

    @property
    @pulumi.getter(name="sequentialOrder")
    def sequential_order(self) -> bool:
        """
        Sequential order flag.
        """
        return pulumi.get(self, "sequential_order")

    @property
    @pulumi.getter(name="startOnAdd")
    def start_on_add(self) -> bool:
        """
        Start on add flag.
        """
        return pulumi.get(self, "start_on_add")

    @property
    @pulumi.getter(name="strmFolder")
    def strm_folder(self) -> str:
        """
        STRM folder.
        """
        return pulumi.get(self, "strm_folder")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="torrentFolder")
    def torrent_folder(self) -> str:
        """
        Torrent folder.
        """
        return pulumi.get(self, "torrent_folder")

    @property
    @pulumi.getter(name="tvCategory")
    def tv_category(self) -> str:
        """
        TV category.
        """
        return pulumi.get(self, "tv_category")

    @property
    @pulumi.getter(name="tvDirectory")
    def tv_directory(self) -> str:
        """
        TV directory.
        """
        return pulumi.get(self, "tv_directory")

    @property
    @pulumi.getter(name="tvImportedCategory")
    def tv_imported_category(self) -> str:
        """
        TV imported category.
        """
        return pulumi.get(self, "tv_imported_category")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "url_base")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> bool:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="watchFolder")
    def watch_folder(self) -> str:
        """
        Watch folder flag.
        """
        return pulumi.get(self, "watch_folder")


@pulumi.output_type
class GetRemotePathMappingsRemotePathMappingResult(dict):
    def __init__(__self__, *,
                 host: str,
                 id: int,
                 local_path: str,
                 remote_path: str):
        """
        :param str host: Download Client host.
        :param int id: RemotePathMapping ID.
        :param str local_path: Local path.
        :param str remote_path: Download Client remote path.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "remote_path", remote_path)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Download Client host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        RemotePathMapping ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Local path.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> str:
        """
        Download Client remote path.
        """
        return pulumi.get(self, "remote_path")


