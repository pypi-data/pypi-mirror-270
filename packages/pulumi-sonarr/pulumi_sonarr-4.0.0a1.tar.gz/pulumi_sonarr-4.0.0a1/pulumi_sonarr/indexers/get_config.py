# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetConfigResult',
    'AwaitableGetConfigResult',
    'get_config',
    'get_config_output',
]

@pulumi.output_type
class GetConfigResult:
    """
    A collection of values returned by getConfig.
    """
    def __init__(__self__, id=None, maximum_size=None, minimum_age=None, retention=None, rss_sync_interval=None):
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if maximum_size and not isinstance(maximum_size, int):
            raise TypeError("Expected argument 'maximum_size' to be a int")
        pulumi.set(__self__, "maximum_size", maximum_size)
        if minimum_age and not isinstance(minimum_age, int):
            raise TypeError("Expected argument 'minimum_age' to be a int")
        pulumi.set(__self__, "minimum_age", minimum_age)
        if retention and not isinstance(retention, int):
            raise TypeError("Expected argument 'retention' to be a int")
        pulumi.set(__self__, "retention", retention)
        if rss_sync_interval and not isinstance(rss_sync_interval, int):
            raise TypeError("Expected argument 'rss_sync_interval' to be a int")
        pulumi.set(__self__, "rss_sync_interval", rss_sync_interval)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Delay Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> int:
        """
        Maximum size.
        """
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="minimumAge")
    def minimum_age(self) -> int:
        """
        Minimum age.
        """
        return pulumi.get(self, "minimum_age")

    @property
    @pulumi.getter
    def retention(self) -> int:
        """
        Retention.
        """
        return pulumi.get(self, "retention")

    @property
    @pulumi.getter(name="rssSyncInterval")
    def rss_sync_interval(self) -> int:
        """
        RSS sync interval.
        """
        return pulumi.get(self, "rss_sync_interval")


class AwaitableGetConfigResult(GetConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigResult(
            id=self.id,
            maximum_size=self.maximum_size,
            minimum_age=self.minimum_age,
            retention=self.retention,
            rss_sync_interval=self.rss_sync_interval)


def get_config(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigResult:
    """
    <!-- subcategory:Indexers -->
    Indexer Config.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.Indexers.get_config()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarr:Indexers/getConfig:getConfig', __args__, opts=opts, typ=GetConfigResult).value

    return AwaitableGetConfigResult(
        id=pulumi.get(__ret__, 'id'),
        maximum_size=pulumi.get(__ret__, 'maximum_size'),
        minimum_age=pulumi.get(__ret__, 'minimum_age'),
        retention=pulumi.get(__ret__, 'retention'),
        rss_sync_interval=pulumi.get(__ret__, 'rss_sync_interval'))


@_utilities.lift_output_func(get_config)
def get_config_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConfigResult]:
    """
    <!-- subcategory:Indexers -->
    Indexer Config.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.Indexers.get_config()
    ```
    """
    ...
