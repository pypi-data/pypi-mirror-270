# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetIndexerResult',
    'AwaitableGetIndexerResult',
    'get_indexer',
    'get_indexer_output',
]

@pulumi.output_type
class GetIndexerResult:
    """
    A collection of values returned by getIndexer.
    """
    def __init__(__self__, additional_parameters=None, allow_zero_size=None, anime_categories=None, anime_standard_format_search=None, api_key=None, api_path=None, base_url=None, captcha_token=None, categories=None, config_contract=None, cookie=None, delay=None, download_client_id=None, enable_automatic_search=None, enable_interactive_search=None, enable_rss=None, id=None, implementation=None, minimum_seeders=None, name=None, passkey=None, priority=None, protocol=None, ranked_only=None, season_pack_seed_time=None, seed_ratio=None, seed_time=None, tags=None, username=None):
        if additional_parameters and not isinstance(additional_parameters, str):
            raise TypeError("Expected argument 'additional_parameters' to be a str")
        pulumi.set(__self__, "additional_parameters", additional_parameters)
        if allow_zero_size and not isinstance(allow_zero_size, bool):
            raise TypeError("Expected argument 'allow_zero_size' to be a bool")
        pulumi.set(__self__, "allow_zero_size", allow_zero_size)
        if anime_categories and not isinstance(anime_categories, list):
            raise TypeError("Expected argument 'anime_categories' to be a list")
        pulumi.set(__self__, "anime_categories", anime_categories)
        if anime_standard_format_search and not isinstance(anime_standard_format_search, bool):
            raise TypeError("Expected argument 'anime_standard_format_search' to be a bool")
        pulumi.set(__self__, "anime_standard_format_search", anime_standard_format_search)
        if api_key and not isinstance(api_key, str):
            raise TypeError("Expected argument 'api_key' to be a str")
        pulumi.set(__self__, "api_key", api_key)
        if api_path and not isinstance(api_path, str):
            raise TypeError("Expected argument 'api_path' to be a str")
        pulumi.set(__self__, "api_path", api_path)
        if base_url and not isinstance(base_url, str):
            raise TypeError("Expected argument 'base_url' to be a str")
        pulumi.set(__self__, "base_url", base_url)
        if captcha_token and not isinstance(captcha_token, str):
            raise TypeError("Expected argument 'captcha_token' to be a str")
        pulumi.set(__self__, "captcha_token", captcha_token)
        if categories and not isinstance(categories, list):
            raise TypeError("Expected argument 'categories' to be a list")
        pulumi.set(__self__, "categories", categories)
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if cookie and not isinstance(cookie, str):
            raise TypeError("Expected argument 'cookie' to be a str")
        pulumi.set(__self__, "cookie", cookie)
        if delay and not isinstance(delay, int):
            raise TypeError("Expected argument 'delay' to be a int")
        pulumi.set(__self__, "delay", delay)
        if download_client_id and not isinstance(download_client_id, int):
            raise TypeError("Expected argument 'download_client_id' to be a int")
        pulumi.set(__self__, "download_client_id", download_client_id)
        if enable_automatic_search and not isinstance(enable_automatic_search, bool):
            raise TypeError("Expected argument 'enable_automatic_search' to be a bool")
        pulumi.set(__self__, "enable_automatic_search", enable_automatic_search)
        if enable_interactive_search and not isinstance(enable_interactive_search, bool):
            raise TypeError("Expected argument 'enable_interactive_search' to be a bool")
        pulumi.set(__self__, "enable_interactive_search", enable_interactive_search)
        if enable_rss and not isinstance(enable_rss, bool):
            raise TypeError("Expected argument 'enable_rss' to be a bool")
        pulumi.set(__self__, "enable_rss", enable_rss)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if minimum_seeders and not isinstance(minimum_seeders, int):
            raise TypeError("Expected argument 'minimum_seeders' to be a int")
        pulumi.set(__self__, "minimum_seeders", minimum_seeders)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if passkey and not isinstance(passkey, str):
            raise TypeError("Expected argument 'passkey' to be a str")
        pulumi.set(__self__, "passkey", passkey)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if ranked_only and not isinstance(ranked_only, bool):
            raise TypeError("Expected argument 'ranked_only' to be a bool")
        pulumi.set(__self__, "ranked_only", ranked_only)
        if season_pack_seed_time and not isinstance(season_pack_seed_time, int):
            raise TypeError("Expected argument 'season_pack_seed_time' to be a int")
        pulumi.set(__self__, "season_pack_seed_time", season_pack_seed_time)
        if seed_ratio and not isinstance(seed_ratio, float):
            raise TypeError("Expected argument 'seed_ratio' to be a float")
        pulumi.set(__self__, "seed_ratio", seed_ratio)
        if seed_time and not isinstance(seed_time, int):
            raise TypeError("Expected argument 'seed_time' to be a int")
        pulumi.set(__self__, "seed_time", seed_time)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="additionalParameters")
    def additional_parameters(self) -> str:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_parameters")

    @property
    @pulumi.getter(name="allowZeroSize")
    def allow_zero_size(self) -> bool:
        """
        Allow zero size files.
        """
        return pulumi.get(self, "allow_zero_size")

    @property
    @pulumi.getter(name="animeCategories")
    def anime_categories(self) -> Sequence[int]:
        """
        Anime list.
        """
        return pulumi.get(self, "anime_categories")

    @property
    @pulumi.getter(name="animeStandardFormatSearch")
    def anime_standard_format_search(self) -> bool:
        """
        Search anime in standard format.
        """
        return pulumi.get(self, "anime_standard_format_search")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiPath")
    def api_path(self) -> str:
        """
        API path.
        """
        return pulumi.get(self, "api_path")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="captchaToken")
    def captcha_token(self) -> str:
        """
        Captcha token.
        """
        return pulumi.get(self, "captcha_token")

    @property
    @pulumi.getter
    def categories(self) -> Sequence[int]:
        """
        Series list.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Indexer configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def cookie(self) -> str:
        """
        Cookie.
        """
        return pulumi.get(self, "cookie")

    @property
    @pulumi.getter
    def delay(self) -> int:
        """
        Delay before grabbing.
        """
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter(name="downloadClientId")
    def download_client_id(self) -> int:
        """
        Download client ID.
        """
        return pulumi.get(self, "download_client_id")

    @property
    @pulumi.getter(name="enableAutomaticSearch")
    def enable_automatic_search(self) -> bool:
        """
        Enable automatic search flag.
        """
        return pulumi.get(self, "enable_automatic_search")

    @property
    @pulumi.getter(name="enableInteractiveSearch")
    def enable_interactive_search(self) -> bool:
        """
        Enable interactive search flag.
        """
        return pulumi.get(self, "enable_interactive_search")

    @property
    @pulumi.getter(name="enableRss")
    def enable_rss(self) -> bool:
        """
        Enable RSS flag.
        """
        return pulumi.get(self, "enable_rss")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Indexer ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Indexer implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="minimumSeeders")
    def minimum_seeders(self) -> int:
        """
        Minimum seeders.
        """
        return pulumi.get(self, "minimum_seeders")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Indexer name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def passkey(self) -> str:
        """
        Passkey.
        """
        return pulumi.get(self, "passkey")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol. Valid values are 'usenet' and 'torrent'.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="rankedOnly")
    def ranked_only(self) -> bool:
        """
        Allow ranked only.
        """
        return pulumi.get(self, "ranked_only")

    @property
    @pulumi.getter(name="seasonPackSeedTime")
    def season_pack_seed_time(self) -> int:
        """
        Season seed time.
        """
        return pulumi.get(self, "season_pack_seed_time")

    @property
    @pulumi.getter(name="seedRatio")
    def seed_ratio(self) -> float:
        """
        Seed ratio.
        """
        return pulumi.get(self, "seed_ratio")

    @property
    @pulumi.getter(name="seedTime")
    def seed_time(self) -> int:
        """
        Seed time.
        """
        return pulumi.get(self, "seed_time")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")


class AwaitableGetIndexerResult(GetIndexerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIndexerResult(
            additional_parameters=self.additional_parameters,
            allow_zero_size=self.allow_zero_size,
            anime_categories=self.anime_categories,
            anime_standard_format_search=self.anime_standard_format_search,
            api_key=self.api_key,
            api_path=self.api_path,
            base_url=self.base_url,
            captcha_token=self.captcha_token,
            categories=self.categories,
            config_contract=self.config_contract,
            cookie=self.cookie,
            delay=self.delay,
            download_client_id=self.download_client_id,
            enable_automatic_search=self.enable_automatic_search,
            enable_interactive_search=self.enable_interactive_search,
            enable_rss=self.enable_rss,
            id=self.id,
            implementation=self.implementation,
            minimum_seeders=self.minimum_seeders,
            name=self.name,
            passkey=self.passkey,
            priority=self.priority,
            protocol=self.protocol,
            ranked_only=self.ranked_only,
            season_pack_seed_time=self.season_pack_seed_time,
            seed_ratio=self.seed_ratio,
            seed_time=self.seed_time,
            tags=self.tags,
            username=self.username)


def get_indexer(name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIndexerResult:
    """
    <!-- subcategory:Indexers -->
    Single Indexer.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.Indexers.get_indexer(name="Example")
    ```


    :param str name: Indexer name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarr:Indexers/getIndexer:getIndexer', __args__, opts=opts, typ=GetIndexerResult).value

    return AwaitableGetIndexerResult(
        additional_parameters=pulumi.get(__ret__, 'additional_parameters'),
        allow_zero_size=pulumi.get(__ret__, 'allow_zero_size'),
        anime_categories=pulumi.get(__ret__, 'anime_categories'),
        anime_standard_format_search=pulumi.get(__ret__, 'anime_standard_format_search'),
        api_key=pulumi.get(__ret__, 'api_key'),
        api_path=pulumi.get(__ret__, 'api_path'),
        base_url=pulumi.get(__ret__, 'base_url'),
        captcha_token=pulumi.get(__ret__, 'captcha_token'),
        categories=pulumi.get(__ret__, 'categories'),
        config_contract=pulumi.get(__ret__, 'config_contract'),
        cookie=pulumi.get(__ret__, 'cookie'),
        delay=pulumi.get(__ret__, 'delay'),
        download_client_id=pulumi.get(__ret__, 'download_client_id'),
        enable_automatic_search=pulumi.get(__ret__, 'enable_automatic_search'),
        enable_interactive_search=pulumi.get(__ret__, 'enable_interactive_search'),
        enable_rss=pulumi.get(__ret__, 'enable_rss'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        minimum_seeders=pulumi.get(__ret__, 'minimum_seeders'),
        name=pulumi.get(__ret__, 'name'),
        passkey=pulumi.get(__ret__, 'passkey'),
        priority=pulumi.get(__ret__, 'priority'),
        protocol=pulumi.get(__ret__, 'protocol'),
        ranked_only=pulumi.get(__ret__, 'ranked_only'),
        season_pack_seed_time=pulumi.get(__ret__, 'season_pack_seed_time'),
        seed_ratio=pulumi.get(__ret__, 'seed_ratio'),
        seed_time=pulumi.get(__ret__, 'seed_time'),
        tags=pulumi.get(__ret__, 'tags'),
        username=pulumi.get(__ret__, 'username'))


@_utilities.lift_output_func(get_indexer)
def get_indexer_output(name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIndexerResult]:
    """
    <!-- subcategory:Indexers -->
    Single Indexer.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.Indexers.get_indexer(name="Example")
    ```


    :param str name: Indexer name.
    """
    ...
