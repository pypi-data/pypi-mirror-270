# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetNamingResult',
    'AwaitableGetNamingResult',
    'get_naming',
    'get_naming_output',
]

@pulumi.output_type
class GetNamingResult:
    """
    A collection of values returned by getNaming.
    """
    def __init__(__self__, anime_episode_format=None, colon_replacement_format=None, daily_episode_format=None, id=None, multi_episode_style=None, rename_episodes=None, replace_illegal_characters=None, season_folder_format=None, series_folder_format=None, specials_folder_format=None, standard_episode_format=None):
        if anime_episode_format and not isinstance(anime_episode_format, str):
            raise TypeError("Expected argument 'anime_episode_format' to be a str")
        pulumi.set(__self__, "anime_episode_format", anime_episode_format)
        if colon_replacement_format and not isinstance(colon_replacement_format, int):
            raise TypeError("Expected argument 'colon_replacement_format' to be a int")
        pulumi.set(__self__, "colon_replacement_format", colon_replacement_format)
        if daily_episode_format and not isinstance(daily_episode_format, str):
            raise TypeError("Expected argument 'daily_episode_format' to be a str")
        pulumi.set(__self__, "daily_episode_format", daily_episode_format)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if multi_episode_style and not isinstance(multi_episode_style, int):
            raise TypeError("Expected argument 'multi_episode_style' to be a int")
        pulumi.set(__self__, "multi_episode_style", multi_episode_style)
        if rename_episodes and not isinstance(rename_episodes, bool):
            raise TypeError("Expected argument 'rename_episodes' to be a bool")
        pulumi.set(__self__, "rename_episodes", rename_episodes)
        if replace_illegal_characters and not isinstance(replace_illegal_characters, bool):
            raise TypeError("Expected argument 'replace_illegal_characters' to be a bool")
        pulumi.set(__self__, "replace_illegal_characters", replace_illegal_characters)
        if season_folder_format and not isinstance(season_folder_format, str):
            raise TypeError("Expected argument 'season_folder_format' to be a str")
        pulumi.set(__self__, "season_folder_format", season_folder_format)
        if series_folder_format and not isinstance(series_folder_format, str):
            raise TypeError("Expected argument 'series_folder_format' to be a str")
        pulumi.set(__self__, "series_folder_format", series_folder_format)
        if specials_folder_format and not isinstance(specials_folder_format, str):
            raise TypeError("Expected argument 'specials_folder_format' to be a str")
        pulumi.set(__self__, "specials_folder_format", specials_folder_format)
        if standard_episode_format and not isinstance(standard_episode_format, str):
            raise TypeError("Expected argument 'standard_episode_format' to be a str")
        pulumi.set(__self__, "standard_episode_format", standard_episode_format)

    @property
    @pulumi.getter(name="animeEpisodeFormat")
    def anime_episode_format(self) -> str:
        """
        Anime episode format.
        """
        return pulumi.get(self, "anime_episode_format")

    @property
    @pulumi.getter(name="colonReplacementFormat")
    def colon_replacement_format(self) -> int:
        """
        Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
        """
        return pulumi.get(self, "colon_replacement_format")

    @property
    @pulumi.getter(name="dailyEpisodeFormat")
    def daily_episode_format(self) -> str:
        """
        Daily episode format.
        """
        return pulumi.get(self, "daily_episode_format")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Delay Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="multiEpisodeStyle")
    def multi_episode_style(self) -> int:
        """
        Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
        """
        return pulumi.get(self, "multi_episode_style")

    @property
    @pulumi.getter(name="renameEpisodes")
    def rename_episodes(self) -> bool:
        """
        Sonarr will use the existing file name if false.
        """
        return pulumi.get(self, "rename_episodes")

    @property
    @pulumi.getter(name="replaceIllegalCharacters")
    def replace_illegal_characters(self) -> bool:
        """
        Replace illegal characters. They will be removed if false.
        """
        return pulumi.get(self, "replace_illegal_characters")

    @property
    @pulumi.getter(name="seasonFolderFormat")
    def season_folder_format(self) -> str:
        """
        Season folder format.
        """
        return pulumi.get(self, "season_folder_format")

    @property
    @pulumi.getter(name="seriesFolderFormat")
    def series_folder_format(self) -> str:
        """
        Series folder format.
        """
        return pulumi.get(self, "series_folder_format")

    @property
    @pulumi.getter(name="specialsFolderFormat")
    def specials_folder_format(self) -> str:
        """
        Special folder format.
        """
        return pulumi.get(self, "specials_folder_format")

    @property
    @pulumi.getter(name="standardEpisodeFormat")
    def standard_episode_format(self) -> str:
        """
        Standard episode formatss.
        """
        return pulumi.get(self, "standard_episode_format")


class AwaitableGetNamingResult(GetNamingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamingResult(
            anime_episode_format=self.anime_episode_format,
            colon_replacement_format=self.colon_replacement_format,
            daily_episode_format=self.daily_episode_format,
            id=self.id,
            multi_episode_style=self.multi_episode_style,
            rename_episodes=self.rename_episodes,
            replace_illegal_characters=self.replace_illegal_characters,
            season_folder_format=self.season_folder_format,
            series_folder_format=self.series_folder_format,
            specials_folder_format=self.specials_folder_format,
            standard_episode_format=self.standard_episode_format)


def get_naming(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamingResult:
    """
    <!-- subcategory:Media Management -->
    Naming.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.MediaManagement.get_naming()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarr:MediaManagement/getNaming:getNaming', __args__, opts=opts, typ=GetNamingResult).value

    return AwaitableGetNamingResult(
        anime_episode_format=pulumi.get(__ret__, 'anime_episode_format'),
        colon_replacement_format=pulumi.get(__ret__, 'colon_replacement_format'),
        daily_episode_format=pulumi.get(__ret__, 'daily_episode_format'),
        id=pulumi.get(__ret__, 'id'),
        multi_episode_style=pulumi.get(__ret__, 'multi_episode_style'),
        rename_episodes=pulumi.get(__ret__, 'rename_episodes'),
        replace_illegal_characters=pulumi.get(__ret__, 'replace_illegal_characters'),
        season_folder_format=pulumi.get(__ret__, 'season_folder_format'),
        series_folder_format=pulumi.get(__ret__, 'series_folder_format'),
        specials_folder_format=pulumi.get(__ret__, 'specials_folder_format'),
        standard_episode_format=pulumi.get(__ret__, 'standard_episode_format'))


@_utilities.lift_output_func(get_naming)
def get_naming_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNamingResult]:
    """
    <!-- subcategory:Media Management -->
    Naming.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.MediaManagement.get_naming()
    ```
    """
    ...
