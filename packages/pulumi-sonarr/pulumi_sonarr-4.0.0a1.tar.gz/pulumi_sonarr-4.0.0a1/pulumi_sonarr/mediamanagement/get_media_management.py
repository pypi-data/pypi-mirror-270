# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetMediaManagementResult',
    'AwaitableGetMediaManagementResult',
    'get_media_management',
    'get_media_management_output',
]

@pulumi.output_type
class GetMediaManagementResult:
    """
    A collection of values returned by getMediaManagement.
    """
    def __init__(__self__, chmod_folder=None, chown_group=None, create_empty_folders=None, delete_empty_folders=None, download_propers_repacks=None, enable_media_info=None, episode_title_required=None, extra_file_extensions=None, file_date=None, hardlinks_copy=None, id=None, import_extra_files=None, minimum_free_space=None, recycle_bin_days=None, recycle_bin_path=None, rescan_after_refresh=None, set_permissions=None, skip_free_space_check=None, unmonitor_previous_episodes=None):
        if chmod_folder and not isinstance(chmod_folder, str):
            raise TypeError("Expected argument 'chmod_folder' to be a str")
        pulumi.set(__self__, "chmod_folder", chmod_folder)
        if chown_group and not isinstance(chown_group, str):
            raise TypeError("Expected argument 'chown_group' to be a str")
        pulumi.set(__self__, "chown_group", chown_group)
        if create_empty_folders and not isinstance(create_empty_folders, bool):
            raise TypeError("Expected argument 'create_empty_folders' to be a bool")
        pulumi.set(__self__, "create_empty_folders", create_empty_folders)
        if delete_empty_folders and not isinstance(delete_empty_folders, bool):
            raise TypeError("Expected argument 'delete_empty_folders' to be a bool")
        pulumi.set(__self__, "delete_empty_folders", delete_empty_folders)
        if download_propers_repacks and not isinstance(download_propers_repacks, str):
            raise TypeError("Expected argument 'download_propers_repacks' to be a str")
        pulumi.set(__self__, "download_propers_repacks", download_propers_repacks)
        if enable_media_info and not isinstance(enable_media_info, bool):
            raise TypeError("Expected argument 'enable_media_info' to be a bool")
        pulumi.set(__self__, "enable_media_info", enable_media_info)
        if episode_title_required and not isinstance(episode_title_required, str):
            raise TypeError("Expected argument 'episode_title_required' to be a str")
        pulumi.set(__self__, "episode_title_required", episode_title_required)
        if extra_file_extensions and not isinstance(extra_file_extensions, str):
            raise TypeError("Expected argument 'extra_file_extensions' to be a str")
        pulumi.set(__self__, "extra_file_extensions", extra_file_extensions)
        if file_date and not isinstance(file_date, str):
            raise TypeError("Expected argument 'file_date' to be a str")
        pulumi.set(__self__, "file_date", file_date)
        if hardlinks_copy and not isinstance(hardlinks_copy, bool):
            raise TypeError("Expected argument 'hardlinks_copy' to be a bool")
        pulumi.set(__self__, "hardlinks_copy", hardlinks_copy)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if import_extra_files and not isinstance(import_extra_files, bool):
            raise TypeError("Expected argument 'import_extra_files' to be a bool")
        pulumi.set(__self__, "import_extra_files", import_extra_files)
        if minimum_free_space and not isinstance(minimum_free_space, int):
            raise TypeError("Expected argument 'minimum_free_space' to be a int")
        pulumi.set(__self__, "minimum_free_space", minimum_free_space)
        if recycle_bin_days and not isinstance(recycle_bin_days, int):
            raise TypeError("Expected argument 'recycle_bin_days' to be a int")
        pulumi.set(__self__, "recycle_bin_days", recycle_bin_days)
        if recycle_bin_path and not isinstance(recycle_bin_path, str):
            raise TypeError("Expected argument 'recycle_bin_path' to be a str")
        pulumi.set(__self__, "recycle_bin_path", recycle_bin_path)
        if rescan_after_refresh and not isinstance(rescan_after_refresh, str):
            raise TypeError("Expected argument 'rescan_after_refresh' to be a str")
        pulumi.set(__self__, "rescan_after_refresh", rescan_after_refresh)
        if set_permissions and not isinstance(set_permissions, bool):
            raise TypeError("Expected argument 'set_permissions' to be a bool")
        pulumi.set(__self__, "set_permissions", set_permissions)
        if skip_free_space_check and not isinstance(skip_free_space_check, bool):
            raise TypeError("Expected argument 'skip_free_space_check' to be a bool")
        pulumi.set(__self__, "skip_free_space_check", skip_free_space_check)
        if unmonitor_previous_episodes and not isinstance(unmonitor_previous_episodes, bool):
            raise TypeError("Expected argument 'unmonitor_previous_episodes' to be a bool")
        pulumi.set(__self__, "unmonitor_previous_episodes", unmonitor_previous_episodes)

    @property
    @pulumi.getter(name="chmodFolder")
    def chmod_folder(self) -> str:
        """
        Permission in linux format.
        """
        return pulumi.get(self, "chmod_folder")

    @property
    @pulumi.getter(name="chownGroup")
    def chown_group(self) -> str:
        """
        Group used for permission.
        """
        return pulumi.get(self, "chown_group")

    @property
    @pulumi.getter(name="createEmptyFolders")
    def create_empty_folders(self) -> bool:
        """
        Create empty series directories.
        """
        return pulumi.get(self, "create_empty_folders")

    @property
    @pulumi.getter(name="deleteEmptyFolders")
    def delete_empty_folders(self) -> bool:
        """
        Delete empty series directories.
        """
        return pulumi.get(self, "delete_empty_folders")

    @property
    @pulumi.getter(name="downloadPropersRepacks")
    def download_propers_repacks(self) -> str:
        """
        Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.
        """
        return pulumi.get(self, "download_propers_repacks")

    @property
    @pulumi.getter(name="enableMediaInfo")
    def enable_media_info(self) -> bool:
        """
        Scan files details.
        """
        return pulumi.get(self, "enable_media_info")

    @property
    @pulumi.getter(name="episodeTitleRequired")
    def episode_title_required(self) -> str:
        """
        Episode title requirement policy. valid inputs are: 'always', 'bulkSeasonReleases' and 'never'.
        """
        return pulumi.get(self, "episode_title_required")

    @property
    @pulumi.getter(name="extraFileExtensions")
    def extra_file_extensions(self) -> str:
        """
        Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).
        """
        return pulumi.get(self, "extra_file_extensions")

    @property
    @pulumi.getter(name="fileDate")
    def file_date(self) -> str:
        """
        Define the file date modification. valid inputs are: 'none', 'localAirDate, and 'utcAirDate'.
        """
        return pulumi.get(self, "file_date")

    @property
    @pulumi.getter(name="hardlinksCopy")
    def hardlinks_copy(self) -> bool:
        """
        Use hardlinks instead of copy.
        """
        return pulumi.get(self, "hardlinks_copy")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Delay Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="importExtraFiles")
    def import_extra_files(self) -> bool:
        """
        Import extra files. If enabled it will leverage 'extra*file*extensions'.
        """
        return pulumi.get(self, "import_extra_files")

    @property
    @pulumi.getter(name="minimumFreeSpace")
    def minimum_free_space(self) -> int:
        """
        Minimum free space in MB to allow import.
        """
        return pulumi.get(self, "minimum_free_space")

    @property
    @pulumi.getter(name="recycleBinDays")
    def recycle_bin_days(self) -> int:
        """
        Recyle bin days of retention.
        """
        return pulumi.get(self, "recycle_bin_days")

    @property
    @pulumi.getter(name="recycleBinPath")
    def recycle_bin_path(self) -> str:
        """
        Recycle bin absolute path.
        """
        return pulumi.get(self, "recycle_bin_path")

    @property
    @pulumi.getter(name="rescanAfterRefresh")
    def rescan_after_refresh(self) -> str:
        """
        Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.
        """
        return pulumi.get(self, "rescan_after_refresh")

    @property
    @pulumi.getter(name="setPermissions")
    def set_permissions(self) -> bool:
        """
        Set permission for imported files.
        """
        return pulumi.get(self, "set_permissions")

    @property
    @pulumi.getter(name="skipFreeSpaceCheck")
    def skip_free_space_check(self) -> bool:
        """
        Skip free space check before importing.
        """
        return pulumi.get(self, "skip_free_space_check")

    @property
    @pulumi.getter(name="unmonitorPreviousEpisodes")
    def unmonitor_previous_episodes(self) -> bool:
        """
        Unmonitor deleted files.
        """
        return pulumi.get(self, "unmonitor_previous_episodes")


class AwaitableGetMediaManagementResult(GetMediaManagementResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMediaManagementResult(
            chmod_folder=self.chmod_folder,
            chown_group=self.chown_group,
            create_empty_folders=self.create_empty_folders,
            delete_empty_folders=self.delete_empty_folders,
            download_propers_repacks=self.download_propers_repacks,
            enable_media_info=self.enable_media_info,
            episode_title_required=self.episode_title_required,
            extra_file_extensions=self.extra_file_extensions,
            file_date=self.file_date,
            hardlinks_copy=self.hardlinks_copy,
            id=self.id,
            import_extra_files=self.import_extra_files,
            minimum_free_space=self.minimum_free_space,
            recycle_bin_days=self.recycle_bin_days,
            recycle_bin_path=self.recycle_bin_path,
            rescan_after_refresh=self.rescan_after_refresh,
            set_permissions=self.set_permissions,
            skip_free_space_check=self.skip_free_space_check,
            unmonitor_previous_episodes=self.unmonitor_previous_episodes)


def get_media_management(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMediaManagementResult:
    """
    <!-- subcategory:Media Management -->
    Media Management.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.MediaManagement.get_media_management()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarr:MediaManagement/getMediaManagement:getMediaManagement', __args__, opts=opts, typ=GetMediaManagementResult).value

    return AwaitableGetMediaManagementResult(
        chmod_folder=pulumi.get(__ret__, 'chmod_folder'),
        chown_group=pulumi.get(__ret__, 'chown_group'),
        create_empty_folders=pulumi.get(__ret__, 'create_empty_folders'),
        delete_empty_folders=pulumi.get(__ret__, 'delete_empty_folders'),
        download_propers_repacks=pulumi.get(__ret__, 'download_propers_repacks'),
        enable_media_info=pulumi.get(__ret__, 'enable_media_info'),
        episode_title_required=pulumi.get(__ret__, 'episode_title_required'),
        extra_file_extensions=pulumi.get(__ret__, 'extra_file_extensions'),
        file_date=pulumi.get(__ret__, 'file_date'),
        hardlinks_copy=pulumi.get(__ret__, 'hardlinks_copy'),
        id=pulumi.get(__ret__, 'id'),
        import_extra_files=pulumi.get(__ret__, 'import_extra_files'),
        minimum_free_space=pulumi.get(__ret__, 'minimum_free_space'),
        recycle_bin_days=pulumi.get(__ret__, 'recycle_bin_days'),
        recycle_bin_path=pulumi.get(__ret__, 'recycle_bin_path'),
        rescan_after_refresh=pulumi.get(__ret__, 'rescan_after_refresh'),
        set_permissions=pulumi.get(__ret__, 'set_permissions'),
        skip_free_space_check=pulumi.get(__ret__, 'skip_free_space_check'),
        unmonitor_previous_episodes=pulumi.get(__ret__, 'unmonitor_previous_episodes'))


@_utilities.lift_output_func(get_media_management)
def get_media_management_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMediaManagementResult]:
    """
    <!-- subcategory:Media Management -->
    Media Management.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarr as sonarr

    example = sonarr.MediaManagement.get_media_management()
    ```
    """
    ...
