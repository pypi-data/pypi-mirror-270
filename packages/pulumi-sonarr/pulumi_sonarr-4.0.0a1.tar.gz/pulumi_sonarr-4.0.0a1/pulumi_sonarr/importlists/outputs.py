# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetExclusionsImportListExclusionResult',
    'GetImportListsImportListResult',
]

@pulumi.output_type
class GetExclusionsImportListExclusionResult(dict):
    def __init__(__self__, *,
                 id: int,
                 title: str,
                 tvdb_id: int):
        """
        :param int id: ImportListExclusion ID.
        :param str title: Series to be excluded.
        :param int tvdb_id: Series TVDB ID.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "tvdb_id", tvdb_id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ImportListExclusion ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Series to be excluded.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="tvdbId")
    def tvdb_id(self) -> int:
        """
        Series TVDB ID.
        """
        return pulumi.get(self, "tvdb_id")


@pulumi.output_type
class GetImportListsImportListResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 api_key: str,
                 auth_user: str,
                 base_url: str,
                 config_contract: str,
                 enable_automatic_add: bool,
                 expires: str,
                 genres: str,
                 id: int,
                 implementation: str,
                 language_profile_ids: Sequence[int],
                 limit: int,
                 list_id: str,
                 list_type: int,
                 listname: str,
                 name: str,
                 quality_profile_id: int,
                 quality_profile_ids: Sequence[int],
                 rating: str,
                 refresh_token: str,
                 root_folder_path: str,
                 season_folder: bool,
                 series_type: str,
                 should_monitor: str,
                 tag_ids: Sequence[int],
                 tags: Sequence[int],
                 trakt_additional_parameters: str,
                 trakt_list_type: int,
                 url: str,
                 username: str,
                 years: str):
        """
        :param str access_token: Access token.
        :param str api_key: API key.
        :param str auth_user: Auth User.
        :param str base_url: Base URL.
        :param str config_contract: ImportList configuration template.
        :param bool enable_automatic_add: Enable automatic add flag.
        :param str expires: Expires.
        :param str genres: Genres.
        :param int id: Import List ID.
        :param str implementation: ImportList implementation name.
        :param Sequence[int] language_profile_ids: Language profile IDs.
        :param int limit: Limit.
        :param str list_id: List ID.
        :param int list_type: Simkl list type.
        :param str listname: List name.
        :param str name: Import List name.
        :param int quality_profile_id: Quality profile ID.
        :param Sequence[int] quality_profile_ids: Quality profile IDs.
        :param str rating: Rating.
        :param str refresh_token: Refresh token.
        :param str root_folder_path: Root folder path.
        :param bool season_folder: Season folder flag.
        :param str series_type: Series type.
        :param str should_monitor: Should monitor.
        :param Sequence[int] tag_ids: Tag IDs.
        :param Sequence[int] tags: List of associated tags.
        :param str trakt_additional_parameters: Trakt additional parameters.
        :param int trakt_list_type: Trakt list type.
        :param str url: URL.
        :param str username: Username.
        :param str years: Years.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_user", auth_user)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "enable_automatic_add", enable_automatic_add)
        pulumi.set(__self__, "expires", expires)
        pulumi.set(__self__, "genres", genres)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "language_profile_ids", language_profile_ids)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "list_id", list_id)
        pulumi.set(__self__, "list_type", list_type)
        pulumi.set(__self__, "listname", listname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        pulumi.set(__self__, "quality_profile_ids", quality_profile_ids)
        pulumi.set(__self__, "rating", rating)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        pulumi.set(__self__, "season_folder", season_folder)
        pulumi.set(__self__, "series_type", series_type)
        pulumi.set(__self__, "should_monitor", should_monitor)
        pulumi.set(__self__, "tag_ids", tag_ids)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "trakt_additional_parameters", trakt_additional_parameters)
        pulumi.set(__self__, "trakt_list_type", trakt_list_type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "years", years)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> str:
        """
        Auth User.
        """
        return pulumi.get(self, "auth_user")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        ImportList configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="enableAutomaticAdd")
    def enable_automatic_add(self) -> bool:
        """
        Enable automatic add flag.
        """
        return pulumi.get(self, "enable_automatic_add")

    @property
    @pulumi.getter
    def expires(self) -> str:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def genres(self) -> str:
        """
        Genres.
        """
        return pulumi.get(self, "genres")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Import List ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        ImportList implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="languageProfileIds")
    def language_profile_ids(self) -> Sequence[int]:
        """
        Language profile IDs.
        """
        return pulumi.get(self, "language_profile_ids")

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Limit.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> str:
        """
        List ID.
        """
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> int:
        """
        Simkl list type.
        """
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter
    def listname(self) -> str:
        """
        List name.
        """
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Import List name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> int:
        """
        Quality profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter(name="qualityProfileIds")
    def quality_profile_ids(self) -> Sequence[int]:
        """
        Quality profile IDs.
        """
        return pulumi.get(self, "quality_profile_ids")

    @property
    @pulumi.getter
    def rating(self) -> str:
        """
        Rating.
        """
        return pulumi.get(self, "rating")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        Root folder path.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="seasonFolder")
    def season_folder(self) -> bool:
        """
        Season folder flag.
        """
        return pulumi.get(self, "season_folder")

    @property
    @pulumi.getter(name="seriesType")
    def series_type(self) -> str:
        """
        Series type.
        """
        return pulumi.get(self, "series_type")

    @property
    @pulumi.getter(name="shouldMonitor")
    def should_monitor(self) -> str:
        """
        Should monitor.
        """
        return pulumi.get(self, "should_monitor")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[int]:
        """
        Tag IDs.
        """
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="traktAdditionalParameters")
    def trakt_additional_parameters(self) -> str:
        """
        Trakt additional parameters.
        """
        return pulumi.get(self, "trakt_additional_parameters")

    @property
    @pulumi.getter(name="traktListType")
    def trakt_list_type(self) -> int:
        """
        Trakt list type.
        """
        return pulumi.get(self, "trakt_list_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def years(self) -> str:
        """
        Years.
        """
        return pulumi.get(self, "years")


