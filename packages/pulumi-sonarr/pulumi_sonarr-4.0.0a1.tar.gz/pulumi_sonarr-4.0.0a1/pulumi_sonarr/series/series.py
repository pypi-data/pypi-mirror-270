# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SeriesArgs', 'Series']

@pulumi.input_type
class SeriesArgs:
    def __init__(__self__, *,
                 monitored: pulumi.Input[bool],
                 path: pulumi.Input[str],
                 quality_profile_id: pulumi.Input[int],
                 root_folder_path: pulumi.Input[str],
                 season_folder: pulumi.Input[bool],
                 title: pulumi.Input[str],
                 title_slug: pulumi.Input[str],
                 tvdb_id: pulumi.Input[int],
                 use_scene_numbering: pulumi.Input[bool],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a Series resource.
        :param pulumi.Input[bool] monitored: Monitored flag.
        :param pulumi.Input[str] path: Series Path.
        :param pulumi.Input[int] quality_profile_id: Quality Profile ID.
        :param pulumi.Input[str] root_folder_path: Series Root Folder.
        :param pulumi.Input[bool] season_folder: Season Folder flag.
        :param pulumi.Input[str] title: Series Title.
        :param pulumi.Input[str] title_slug: Series Title in kebab format.
        :param pulumi.Input[int] tvdb_id: TVDB ID.
        :param pulumi.Input[bool] use_scene_numbering: Scene numbering flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        pulumi.set(__self__, "monitored", monitored)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        pulumi.set(__self__, "season_folder", season_folder)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "title_slug", title_slug)
        pulumi.set(__self__, "tvdb_id", tvdb_id)
        pulumi.set(__self__, "use_scene_numbering", use_scene_numbering)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def monitored(self) -> pulumi.Input[bool]:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @monitored.setter
    def monitored(self, value: pulumi.Input[bool]):
        pulumi.set(self, "monitored", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Series Path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> pulumi.Input[int]:
        """
        Quality Profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @quality_profile_id.setter
    def quality_profile_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "quality_profile_id", value)

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> pulumi.Input[str]:
        """
        Series Root Folder.
        """
        return pulumi.get(self, "root_folder_path")

    @root_folder_path.setter
    def root_folder_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "root_folder_path", value)

    @property
    @pulumi.getter(name="seasonFolder")
    def season_folder(self) -> pulumi.Input[bool]:
        """
        Season Folder flag.
        """
        return pulumi.get(self, "season_folder")

    @season_folder.setter
    def season_folder(self, value: pulumi.Input[bool]):
        pulumi.set(self, "season_folder", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Series Title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleSlug")
    def title_slug(self) -> pulumi.Input[str]:
        """
        Series Title in kebab format.
        """
        return pulumi.get(self, "title_slug")

    @title_slug.setter
    def title_slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "title_slug", value)

    @property
    @pulumi.getter(name="tvdbId")
    def tvdb_id(self) -> pulumi.Input[int]:
        """
        TVDB ID.
        """
        return pulumi.get(self, "tvdb_id")

    @tvdb_id.setter
    def tvdb_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "tvdb_id", value)

    @property
    @pulumi.getter(name="useSceneNumbering")
    def use_scene_numbering(self) -> pulumi.Input[bool]:
        """
        Scene numbering flag.
        """
        return pulumi.get(self, "use_scene_numbering")

    @use_scene_numbering.setter
    def use_scene_numbering(self, value: pulumi.Input[bool]):
        pulumi.set(self, "use_scene_numbering", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _SeriesState:
    def __init__(__self__, *,
                 monitored: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 root_folder_path: Optional[pulumi.Input[str]] = None,
                 season_folder: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_slug: Optional[pulumi.Input[str]] = None,
                 tvdb_id: Optional[pulumi.Input[int]] = None,
                 use_scene_numbering: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Series resources.
        :param pulumi.Input[bool] monitored: Monitored flag.
        :param pulumi.Input[str] path: Series Path.
        :param pulumi.Input[int] quality_profile_id: Quality Profile ID.
        :param pulumi.Input[str] root_folder_path: Series Root Folder.
        :param pulumi.Input[bool] season_folder: Season Folder flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] title: Series Title.
        :param pulumi.Input[str] title_slug: Series Title in kebab format.
        :param pulumi.Input[int] tvdb_id: TVDB ID.
        :param pulumi.Input[bool] use_scene_numbering: Scene numbering flag.
        """
        if monitored is not None:
            pulumi.set(__self__, "monitored", monitored)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if quality_profile_id is not None:
            pulumi.set(__self__, "quality_profile_id", quality_profile_id)
        if root_folder_path is not None:
            pulumi.set(__self__, "root_folder_path", root_folder_path)
        if season_folder is not None:
            pulumi.set(__self__, "season_folder", season_folder)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_slug is not None:
            pulumi.set(__self__, "title_slug", title_slug)
        if tvdb_id is not None:
            pulumi.set(__self__, "tvdb_id", tvdb_id)
        if use_scene_numbering is not None:
            pulumi.set(__self__, "use_scene_numbering", use_scene_numbering)

    @property
    @pulumi.getter
    def monitored(self) -> Optional[pulumi.Input[bool]]:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @monitored.setter
    def monitored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Series Path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> Optional[pulumi.Input[int]]:
        """
        Quality Profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @quality_profile_id.setter
    def quality_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_profile_id", value)

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> Optional[pulumi.Input[str]]:
        """
        Series Root Folder.
        """
        return pulumi.get(self, "root_folder_path")

    @root_folder_path.setter
    def root_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_folder_path", value)

    @property
    @pulumi.getter(name="seasonFolder")
    def season_folder(self) -> Optional[pulumi.Input[bool]]:
        """
        Season Folder flag.
        """
        return pulumi.get(self, "season_folder")

    @season_folder.setter
    def season_folder(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "season_folder", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Series Title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleSlug")
    def title_slug(self) -> Optional[pulumi.Input[str]]:
        """
        Series Title in kebab format.
        """
        return pulumi.get(self, "title_slug")

    @title_slug.setter
    def title_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_slug", value)

    @property
    @pulumi.getter(name="tvdbId")
    def tvdb_id(self) -> Optional[pulumi.Input[int]]:
        """
        TVDB ID.
        """
        return pulumi.get(self, "tvdb_id")

    @tvdb_id.setter
    def tvdb_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tvdb_id", value)

    @property
    @pulumi.getter(name="useSceneNumbering")
    def use_scene_numbering(self) -> Optional[pulumi.Input[bool]]:
        """
        Scene numbering flag.
        """
        return pulumi.get(self, "use_scene_numbering")

    @use_scene_numbering.setter
    def use_scene_numbering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_scene_numbering", value)


class Series(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 monitored: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 root_folder_path: Optional[pulumi.Input[str]] = None,
                 season_folder: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_slug: Optional[pulumi.Input[str]] = None,
                 tvdb_id: Optional[pulumi.Input[int]] = None,
                 use_scene_numbering: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        <!-- subcategory:Series -->
        Series resource.
        For more information refer to [Series](https://wiki.servarr.com/sonarr/library#series) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sonarr as sonarr

        example = sonarr.series.Series("example",
            monitored=True,
            path="/tmp/breaking_bad",
            quality_profile_id=1,
            root_folder_path="/tmp/",
            season_folder=True,
            tags=[1],
            title="Breaking Bad",
            title_slug="breaking-bad",
            tvdb_id=81189,
            use_scene_numbering=False)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import sonarr:Series/series:Series example 10
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] monitored: Monitored flag.
        :param pulumi.Input[str] path: Series Path.
        :param pulumi.Input[int] quality_profile_id: Quality Profile ID.
        :param pulumi.Input[str] root_folder_path: Series Root Folder.
        :param pulumi.Input[bool] season_folder: Season Folder flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] title: Series Title.
        :param pulumi.Input[str] title_slug: Series Title in kebab format.
        :param pulumi.Input[int] tvdb_id: TVDB ID.
        :param pulumi.Input[bool] use_scene_numbering: Scene numbering flag.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SeriesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Series -->
        Series resource.
        For more information refer to [Series](https://wiki.servarr.com/sonarr/library#series) documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sonarr as sonarr

        example = sonarr.series.Series("example",
            monitored=True,
            path="/tmp/breaking_bad",
            quality_profile_id=1,
            root_folder_path="/tmp/",
            season_folder=True,
            tags=[1],
            title="Breaking Bad",
            title_slug="breaking-bad",
            tvdb_id=81189,
            use_scene_numbering=False)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import sonarr:Series/series:Series example 10
        ```

        :param str resource_name: The name of the resource.
        :param SeriesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SeriesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 monitored: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 quality_profile_id: Optional[pulumi.Input[int]] = None,
                 root_folder_path: Optional[pulumi.Input[str]] = None,
                 season_folder: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_slug: Optional[pulumi.Input[str]] = None,
                 tvdb_id: Optional[pulumi.Input[int]] = None,
                 use_scene_numbering: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SeriesArgs.__new__(SeriesArgs)

            if monitored is None and not opts.urn:
                raise TypeError("Missing required property 'monitored'")
            __props__.__dict__["monitored"] = monitored
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            if quality_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'quality_profile_id'")
            __props__.__dict__["quality_profile_id"] = quality_profile_id
            if root_folder_path is None and not opts.urn:
                raise TypeError("Missing required property 'root_folder_path'")
            __props__.__dict__["root_folder_path"] = root_folder_path
            if season_folder is None and not opts.urn:
                raise TypeError("Missing required property 'season_folder'")
            __props__.__dict__["season_folder"] = season_folder
            __props__.__dict__["tags"] = tags
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            if title_slug is None and not opts.urn:
                raise TypeError("Missing required property 'title_slug'")
            __props__.__dict__["title_slug"] = title_slug
            if tvdb_id is None and not opts.urn:
                raise TypeError("Missing required property 'tvdb_id'")
            __props__.__dict__["tvdb_id"] = tvdb_id
            if use_scene_numbering is None and not opts.urn:
                raise TypeError("Missing required property 'use_scene_numbering'")
            __props__.__dict__["use_scene_numbering"] = use_scene_numbering
        super(Series, __self__).__init__(
            'sonarr:Series/series:Series',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            monitored: Optional[pulumi.Input[bool]] = None,
            path: Optional[pulumi.Input[str]] = None,
            quality_profile_id: Optional[pulumi.Input[int]] = None,
            root_folder_path: Optional[pulumi.Input[str]] = None,
            season_folder: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            title: Optional[pulumi.Input[str]] = None,
            title_slug: Optional[pulumi.Input[str]] = None,
            tvdb_id: Optional[pulumi.Input[int]] = None,
            use_scene_numbering: Optional[pulumi.Input[bool]] = None) -> 'Series':
        """
        Get an existing Series resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] monitored: Monitored flag.
        :param pulumi.Input[str] path: Series Path.
        :param pulumi.Input[int] quality_profile_id: Quality Profile ID.
        :param pulumi.Input[str] root_folder_path: Series Root Folder.
        :param pulumi.Input[bool] season_folder: Season Folder flag.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] title: Series Title.
        :param pulumi.Input[str] title_slug: Series Title in kebab format.
        :param pulumi.Input[int] tvdb_id: TVDB ID.
        :param pulumi.Input[bool] use_scene_numbering: Scene numbering flag.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SeriesState.__new__(_SeriesState)

        __props__.__dict__["monitored"] = monitored
        __props__.__dict__["path"] = path
        __props__.__dict__["quality_profile_id"] = quality_profile_id
        __props__.__dict__["root_folder_path"] = root_folder_path
        __props__.__dict__["season_folder"] = season_folder
        __props__.__dict__["tags"] = tags
        __props__.__dict__["title"] = title
        __props__.__dict__["title_slug"] = title_slug
        __props__.__dict__["tvdb_id"] = tvdb_id
        __props__.__dict__["use_scene_numbering"] = use_scene_numbering
        return Series(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def monitored(self) -> pulumi.Output[bool]:
        """
        Monitored flag.
        """
        return pulumi.get(self, "monitored")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        Series Path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="qualityProfileId")
    def quality_profile_id(self) -> pulumi.Output[int]:
        """
        Quality Profile ID.
        """
        return pulumi.get(self, "quality_profile_id")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> pulumi.Output[str]:
        """
        Series Root Folder.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="seasonFolder")
    def season_folder(self) -> pulumi.Output[bool]:
        """
        Season Folder flag.
        """
        return pulumi.get(self, "season_folder")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        Series Title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleSlug")
    def title_slug(self) -> pulumi.Output[str]:
        """
        Series Title in kebab format.
        """
        return pulumi.get(self, "title_slug")

    @property
    @pulumi.getter(name="tvdbId")
    def tvdb_id(self) -> pulumi.Output[int]:
        """
        TVDB ID.
        """
        return pulumi.get(self, "tvdb_id")

    @property
    @pulumi.getter(name="useSceneNumbering")
    def use_scene_numbering(self) -> pulumi.Output[bool]:
        """
        Scene numbering flag.
        """
        return pulumi.get(self, "use_scene_numbering")

