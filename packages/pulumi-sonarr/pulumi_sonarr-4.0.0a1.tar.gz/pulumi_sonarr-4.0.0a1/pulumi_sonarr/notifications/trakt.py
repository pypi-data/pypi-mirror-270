# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TraktArgs', 'Trakt']

@pulumi.input_type
class TraktArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_user: pulumi.Input[str],
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_series_add: Optional[pulumi.Input[bool]] = None,
                 on_series_delete: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a Trakt resource.
        :param pulumi.Input[str] access_token: Access Token.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationTrakt name.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_episode_file_delete: On episode file delete flag.
        :param pulumi.Input[bool] on_episode_file_delete_for_upgrade: On episode file delete for upgrade flag.
        :param pulumi.Input[bool] on_series_add: On series add flag.
        :param pulumi.Input[bool] on_series_delete: On series delete flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[str] refresh_token: Access Token.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_user", auth_user)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_download is not None:
            pulumi.set(__self__, "on_download", on_download)
        if on_episode_file_delete is not None:
            pulumi.set(__self__, "on_episode_file_delete", on_episode_file_delete)
        if on_episode_file_delete_for_upgrade is not None:
            pulumi.set(__self__, "on_episode_file_delete_for_upgrade", on_episode_file_delete_for_upgrade)
        if on_series_add is not None:
            pulumi.set(__self__, "on_series_add", on_series_add)
        if on_series_delete is not None:
            pulumi.set(__self__, "on_series_delete", on_series_delete)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        """
        Access Token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> pulumi.Input[str]:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @auth_user.setter
    def auth_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_user", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationTrakt name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> Optional[pulumi.Input[bool]]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @on_download.setter
    def on_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_download", value)

    @property
    @pulumi.getter(name="onEpisodeFileDelete")
    def on_episode_file_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On episode file delete flag.
        """
        return pulumi.get(self, "on_episode_file_delete")

    @on_episode_file_delete.setter
    def on_episode_file_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_episode_file_delete", value)

    @property
    @pulumi.getter(name="onEpisodeFileDeleteForUpgrade")
    def on_episode_file_delete_for_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On episode file delete for upgrade flag.
        """
        return pulumi.get(self, "on_episode_file_delete_for_upgrade")

    @on_episode_file_delete_for_upgrade.setter
    def on_episode_file_delete_for_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_episode_file_delete_for_upgrade", value)

    @property
    @pulumi.getter(name="onSeriesAdd")
    def on_series_add(self) -> Optional[pulumi.Input[bool]]:
        """
        On series add flag.
        """
        return pulumi.get(self, "on_series_add")

    @on_series_add.setter
    def on_series_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_series_add", value)

    @property
    @pulumi.getter(name="onSeriesDelete")
    def on_series_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On series delete flag.
        """
        return pulumi.get(self, "on_series_delete")

    @on_series_delete.setter
    def on_series_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_series_delete", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access Token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _TraktState:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_series_add: Optional[pulumi.Input[bool]] = None,
                 on_series_delete: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering Trakt resources.
        :param pulumi.Input[str] access_token: Access Token.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] expires: expires.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationTrakt name.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_episode_file_delete: On episode file delete flag.
        :param pulumi.Input[bool] on_episode_file_delete_for_upgrade: On episode file delete for upgrade flag.
        :param pulumi.Input[bool] on_series_add: On series add flag.
        :param pulumi.Input[bool] on_series_delete: On series delete flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[str] refresh_token: Access Token.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_user is not None:
            pulumi.set(__self__, "auth_user", auth_user)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_download is not None:
            pulumi.set(__self__, "on_download", on_download)
        if on_episode_file_delete is not None:
            pulumi.set(__self__, "on_episode_file_delete", on_episode_file_delete)
        if on_episode_file_delete_for_upgrade is not None:
            pulumi.set(__self__, "on_episode_file_delete_for_upgrade", on_episode_file_delete_for_upgrade)
        if on_series_add is not None:
            pulumi.set(__self__, "on_series_add", on_series_add)
        if on_series_delete is not None:
            pulumi.set(__self__, "on_series_delete", on_series_delete)
        if on_upgrade is not None:
            pulumi.set(__self__, "on_upgrade", on_upgrade)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access Token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> Optional[pulumi.Input[str]]:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @auth_user.setter
    def auth_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_user", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        """
        expires.
        """
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationTrakt name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> Optional[pulumi.Input[bool]]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @on_download.setter
    def on_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_download", value)

    @property
    @pulumi.getter(name="onEpisodeFileDelete")
    def on_episode_file_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On episode file delete flag.
        """
        return pulumi.get(self, "on_episode_file_delete")

    @on_episode_file_delete.setter
    def on_episode_file_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_episode_file_delete", value)

    @property
    @pulumi.getter(name="onEpisodeFileDeleteForUpgrade")
    def on_episode_file_delete_for_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On episode file delete for upgrade flag.
        """
        return pulumi.get(self, "on_episode_file_delete_for_upgrade")

    @on_episode_file_delete_for_upgrade.setter
    def on_episode_file_delete_for_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_episode_file_delete_for_upgrade", value)

    @property
    @pulumi.getter(name="onSeriesAdd")
    def on_series_add(self) -> Optional[pulumi.Input[bool]]:
        """
        On series add flag.
        """
        return pulumi.get(self, "on_series_add")

    @on_series_add.setter
    def on_series_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_series_add", value)

    @property
    @pulumi.getter(name="onSeriesDelete")
    def on_series_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        On series delete flag.
        """
        return pulumi.get(self, "on_series_delete")

    @on_series_delete.setter
    def on_series_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_series_delete", value)

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @on_upgrade.setter
    def on_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_upgrade", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access Token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)


class Trakt(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_series_add: Optional[pulumi.Input[bool]] = None,
                 on_series_delete: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        <!-- subcategory:Notifications -->
        Notification Trakt resource.
        For more information refer to [Notification](https://wiki.servarr.com/sonarr/settings#connect) and [Trakt](https://wiki.servarr.com/sonarr/supported#trakt).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sonarr as sonarr

        example = sonarr.notifications.Trakt("example",
            access_token="AuthTOKEN",
            auth_user="User",
            include_health_warnings=False,
            on_download=True,
            on_episode_file_delete=False,
            on_episode_file_delete_for_upgrade=True,
            on_series_delete=False,
            on_upgrade=True)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import sonarr:Notifications/trakt:Trakt example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token: Access Token.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationTrakt name.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_episode_file_delete: On episode file delete flag.
        :param pulumi.Input[bool] on_episode_file_delete_for_upgrade: On episode file delete for upgrade flag.
        :param pulumi.Input[bool] on_series_add: On series add flag.
        :param pulumi.Input[bool] on_series_delete: On series delete flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[str] refresh_token: Access Token.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TraktArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Notifications -->
        Notification Trakt resource.
        For more information refer to [Notification](https://wiki.servarr.com/sonarr/settings#connect) and [Trakt](https://wiki.servarr.com/sonarr/supported#trakt).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sonarr as sonarr

        example = sonarr.notifications.Trakt("example",
            access_token="AuthTOKEN",
            auth_user="User",
            include_health_warnings=False,
            on_download=True,
            on_episode_file_delete=False,
            on_episode_file_delete_for_upgrade=True,
            on_series_delete=False,
            on_upgrade=True)
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import sonarr:Notifications/trakt:Trakt example 1
        ```

        :param str resource_name: The name of the resource.
        :param TraktArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TraktArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 auth_user: Optional[pulumi.Input[str]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_download: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
                 on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
                 on_series_add: Optional[pulumi.Input[bool]] = None,
                 on_series_delete: Optional[pulumi.Input[bool]] = None,
                 on_upgrade: Optional[pulumi.Input[bool]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TraktArgs.__new__(TraktArgs)

            if access_token is None and not opts.urn:
                raise TypeError("Missing required property 'access_token'")
            __props__.__dict__["access_token"] = None if access_token is None else pulumi.Output.secret(access_token)
            if auth_user is None and not opts.urn:
                raise TypeError("Missing required property 'auth_user'")
            __props__.__dict__["auth_user"] = auth_user
            __props__.__dict__["include_health_warnings"] = include_health_warnings
            __props__.__dict__["name"] = name
            __props__.__dict__["on_download"] = on_download
            __props__.__dict__["on_episode_file_delete"] = on_episode_file_delete
            __props__.__dict__["on_episode_file_delete_for_upgrade"] = on_episode_file_delete_for_upgrade
            __props__.__dict__["on_series_add"] = on_series_add
            __props__.__dict__["on_series_delete"] = on_series_delete
            __props__.__dict__["on_upgrade"] = on_upgrade
            __props__.__dict__["refresh_token"] = None if refresh_token is None else pulumi.Output.secret(refresh_token)
            __props__.__dict__["tags"] = tags
            __props__.__dict__["expires"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessToken", "refreshToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Trakt, __self__).__init__(
            'sonarr:Notifications/trakt:Trakt',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token: Optional[pulumi.Input[str]] = None,
            auth_user: Optional[pulumi.Input[str]] = None,
            expires: Optional[pulumi.Input[str]] = None,
            include_health_warnings: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            on_download: Optional[pulumi.Input[bool]] = None,
            on_episode_file_delete: Optional[pulumi.Input[bool]] = None,
            on_episode_file_delete_for_upgrade: Optional[pulumi.Input[bool]] = None,
            on_series_add: Optional[pulumi.Input[bool]] = None,
            on_series_delete: Optional[pulumi.Input[bool]] = None,
            on_upgrade: Optional[pulumi.Input[bool]] = None,
            refresh_token: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'Trakt':
        """
        Get an existing Trakt resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token: Access Token.
        :param pulumi.Input[str] auth_user: Auth user.
        :param pulumi.Input[str] expires: expires.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[str] name: NotificationTrakt name.
        :param pulumi.Input[bool] on_download: On download flag.
        :param pulumi.Input[bool] on_episode_file_delete: On episode file delete flag.
        :param pulumi.Input[bool] on_episode_file_delete_for_upgrade: On episode file delete for upgrade flag.
        :param pulumi.Input[bool] on_series_add: On series add flag.
        :param pulumi.Input[bool] on_series_delete: On series delete flag.
        :param pulumi.Input[bool] on_upgrade: On upgrade flag.
        :param pulumi.Input[str] refresh_token: Access Token.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TraktState.__new__(_TraktState)

        __props__.__dict__["access_token"] = access_token
        __props__.__dict__["auth_user"] = auth_user
        __props__.__dict__["expires"] = expires
        __props__.__dict__["include_health_warnings"] = include_health_warnings
        __props__.__dict__["name"] = name
        __props__.__dict__["on_download"] = on_download
        __props__.__dict__["on_episode_file_delete"] = on_episode_file_delete
        __props__.__dict__["on_episode_file_delete_for_upgrade"] = on_episode_file_delete_for_upgrade
        __props__.__dict__["on_series_add"] = on_series_add
        __props__.__dict__["on_series_delete"] = on_series_delete
        __props__.__dict__["on_upgrade"] = on_upgrade
        __props__.__dict__["refresh_token"] = refresh_token
        __props__.__dict__["tags"] = tags
        return Trakt(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[str]:
        """
        Access Token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> pulumi.Output[str]:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @property
    @pulumi.getter
    def expires(self) -> pulumi.Output[str]:
        """
        expires.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> pulumi.Output[bool]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        NotificationTrakt name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onDownload")
    def on_download(self) -> pulumi.Output[bool]:
        """
        On download flag.
        """
        return pulumi.get(self, "on_download")

    @property
    @pulumi.getter(name="onEpisodeFileDelete")
    def on_episode_file_delete(self) -> pulumi.Output[bool]:
        """
        On episode file delete flag.
        """
        return pulumi.get(self, "on_episode_file_delete")

    @property
    @pulumi.getter(name="onEpisodeFileDeleteForUpgrade")
    def on_episode_file_delete_for_upgrade(self) -> pulumi.Output[bool]:
        """
        On episode file delete for upgrade flag.
        """
        return pulumi.get(self, "on_episode_file_delete_for_upgrade")

    @property
    @pulumi.getter(name="onSeriesAdd")
    def on_series_add(self) -> pulumi.Output[bool]:
        """
        On series add flag.
        """
        return pulumi.get(self, "on_series_add")

    @property
    @pulumi.getter(name="onSeriesDelete")
    def on_series_delete(self) -> pulumi.Output[bool]:
        """
        On series delete flag.
        """
        return pulumi.get(self, "on_series_delete")

    @property
    @pulumi.getter(name="onUpgrade")
    def on_upgrade(self) -> pulumi.Output[bool]:
        """
        On upgrade flag.
        """
        return pulumi.get(self, "on_upgrade")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Output[str]:
        """
        Access Token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

