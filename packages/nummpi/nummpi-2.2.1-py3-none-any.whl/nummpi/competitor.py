# -*- coding: utf-8 -*-
"""sma_9_competitor_prac_exam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GUb9yHFwhxNCV2EzLhfEexNBzluhHJWj
"""

# !pip install rake_nltk

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from rake_nltk import Rake
from nltk.sentiment import SentimentIntensityAnalyzer

# Read data from CSV file
df = pd.read_csv('/content/drive/MyDrive/SMA_datasets_prac_exam/brand_data.csv')

# Preprocessing and keyword extraction using RAKE
r = Rake()
stop_words = set(stopwords.words('english'))

# Extract keywords for all posts
df['keywords'] = df['text'].apply(lambda x: r.extract_keywords_from_text(x) or r.get_ranked_phrases())

# Determine if a post mentions the brand or a competitor
brand_keywords = []
competitor_keywords = []

for idx, row in df.iterrows():
    for keyword in row['keywords']:
        if 'brand' in keyword.lower():
            brand_keywords.append(keyword)
        else:
            competitor_keywords.append(keyword)

# Get the top keywords for brand and competitors
brand_keyword_counts = Counter(brand_keywords).most_common(10)
competitor_keyword_counts = Counter(competitor_keywords).most_common(10)

# Bar plot for the top 10 keywords for brand and competitors
plt.figure(figsize=(10, 6))
brand_keywords, brand_counts = zip(*brand_keyword_counts)
competitor_keywords, competitor_counts = zip(*competitor_keyword_counts)

plt.bar(brand_keywords, brand_counts, color='blue', alpha=0.7, label='Brand')
plt.bar(competitor_keywords, competitor_counts, color='red', alpha=0.7, label='Competitors')
plt.xlabel('Keywords')
plt.ylabel('Frequency')
plt.title('Top Keywords for Brand vs Competitors')
plt.legend()
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Sentiment Analysis
sia = SentimentIntensityAnalyzer()
df['sentiment'] = df['text'].apply(lambda x: sia.polarity_scores(x)['compound'])

# Plot sentiment distribution for competitors
plt.figure(figsize=(10, 6))
sns.histplot(df, x='sentiment',  multiple='stack', binwidth=0.2, palette='coolwarm')
plt.xlabel("Sentiment")
plt.ylabel("Frequency")
plt.title("Sentiment Distribution by Competitors")
plt.show()