# coding: utf-8

"""
    Data Repository API

    <details><summary>This document defines the REST API for the Terra Data Repository.</summary> <p> **Status: design in progress** There are a few top-level endpoints (besides some used by swagger):  * / - generated by swagger: swagger API page that provides this documentation and a live UI for submitting REST requests  * /status - provides the operational status of the service  * /configuration - provides the basic configuration and information about the service  * /api - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The API endpoints are organized by interface. Each interface is separately versioned. <p> **Notes on Naming** <p> All of the reference items are suffixed with \\\"Model\\\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes. </details>   # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from data_repo_client.configuration import Configuration


class SnapshotAccessRequestResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'dataset_id': 'str',
        'snapshot_name': 'str',
        'snapshot_research_purpose': 'str',
        'snapshot_specification': 'SnapshotBuilderRequest',
        'created_by': 'str',
        'status': 'SnapshotAccessRequestStatus',
        'created_date': 'str',
        'updated_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'dataset_id': 'datasetId',
        'snapshot_name': 'snapshotName',
        'snapshot_research_purpose': 'snapshotResearchPurpose',
        'snapshot_specification': 'snapshotSpecification',
        'created_by': 'createdBy',
        'status': 'status',
        'created_date': 'createdDate',
        'updated_date': 'updatedDate'
    }

    def __init__(self, id=None, dataset_id=None, snapshot_name=None, snapshot_research_purpose=None, snapshot_specification=None, created_by=None, status=None, created_date=None, updated_date=None, local_vars_configuration=None):  # noqa: E501
        """SnapshotAccessRequestResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._dataset_id = None
        self._snapshot_name = None
        self._snapshot_research_purpose = None
        self._snapshot_specification = None
        self._created_by = None
        self._status = None
        self._created_date = None
        self._updated_date = None
        self.discriminator = None

        self.id = id
        self.dataset_id = dataset_id
        self.snapshot_name = snapshot_name
        self.snapshot_research_purpose = snapshot_research_purpose
        self.snapshot_specification = snapshot_specification
        self.created_by = created_by
        self.status = status
        self.created_date = created_date
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def id(self):
        """Gets the id of this SnapshotAccessRequestResponse.  # noqa: E501

        Unique identifier for a dataset, snapshot, etc.   # noqa: E501

        :return: The id of this SnapshotAccessRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SnapshotAccessRequestResponse.

        Unique identifier for a dataset, snapshot, etc.   # noqa: E501

        :param id: The id of this SnapshotAccessRequestResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this SnapshotAccessRequestResponse.  # noqa: E501

        Unique identifier for a dataset, snapshot, etc.   # noqa: E501

        :return: The dataset_id of this SnapshotAccessRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this SnapshotAccessRequestResponse.

        Unique identifier for a dataset, snapshot, etc.   # noqa: E501

        :param dataset_id: The dataset_id of this SnapshotAccessRequestResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this SnapshotAccessRequestResponse.  # noqa: E501


        :return: The snapshot_name of this SnapshotAccessRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this SnapshotAccessRequestResponse.


        :param snapshot_name: The snapshot_name of this SnapshotAccessRequestResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and snapshot_name is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_name`, must not be `None`")  # noqa: E501

        self._snapshot_name = snapshot_name

    @property
    def snapshot_research_purpose(self):
        """Gets the snapshot_research_purpose of this SnapshotAccessRequestResponse.  # noqa: E501


        :return: The snapshot_research_purpose of this SnapshotAccessRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_research_purpose

    @snapshot_research_purpose.setter
    def snapshot_research_purpose(self, snapshot_research_purpose):
        """Sets the snapshot_research_purpose of this SnapshotAccessRequestResponse.


        :param snapshot_research_purpose: The snapshot_research_purpose of this SnapshotAccessRequestResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and snapshot_research_purpose is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_research_purpose`, must not be `None`")  # noqa: E501

        self._snapshot_research_purpose = snapshot_research_purpose

    @property
    def snapshot_specification(self):
        """Gets the snapshot_specification of this SnapshotAccessRequestResponse.  # noqa: E501


        :return: The snapshot_specification of this SnapshotAccessRequestResponse.  # noqa: E501
        :rtype: SnapshotBuilderRequest
        """
        return self._snapshot_specification

    @snapshot_specification.setter
    def snapshot_specification(self, snapshot_specification):
        """Sets the snapshot_specification of this SnapshotAccessRequestResponse.


        :param snapshot_specification: The snapshot_specification of this SnapshotAccessRequestResponse.  # noqa: E501
        :type: SnapshotBuilderRequest
        """
        if self.local_vars_configuration.client_side_validation and snapshot_specification is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_specification`, must not be `None`")  # noqa: E501

        self._snapshot_specification = snapshot_specification

    @property
    def created_by(self):
        """Gets the created_by of this SnapshotAccessRequestResponse.  # noqa: E501


        :return: The created_by of this SnapshotAccessRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SnapshotAccessRequestResponse.


        :param created_by: The created_by of this SnapshotAccessRequestResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def status(self):
        """Gets the status of this SnapshotAccessRequestResponse.  # noqa: E501


        :return: The status of this SnapshotAccessRequestResponse.  # noqa: E501
        :rtype: SnapshotAccessRequestStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SnapshotAccessRequestResponse.


        :param status: The status of this SnapshotAccessRequestResponse.  # noqa: E501
        :type: SnapshotAccessRequestStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def created_date(self):
        """Gets the created_date of this SnapshotAccessRequestResponse.  # noqa: E501


        :return: The created_date of this SnapshotAccessRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SnapshotAccessRequestResponse.


        :param created_date: The created_date of this SnapshotAccessRequestResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and created_date is None:  # noqa: E501
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this SnapshotAccessRequestResponse.  # noqa: E501


        :return: The updated_date of this SnapshotAccessRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this SnapshotAccessRequestResponse.


        :param updated_date: The updated_date of this SnapshotAccessRequestResponse.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotAccessRequestResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotAccessRequestResponse):
            return True

        return self.to_dict() != other.to_dict()
