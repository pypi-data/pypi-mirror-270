Metadata-Version: 2.3
Name: basic_data_structure
Version: 0.0.3
Summary: Implementation of basic sata structures in Python
Project-URL: Homepage, https://github.com/mishaga/basic_data_structure
Project-URL: Issues, https://github.com/mishaga/basic_data_structure/issues
Author-email: Mikhail Shagov <mishaga@me.com>
License-File: LICENSE
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# Basic Data Structure

Implementation of basic sata structures in Python

Including:
1. Linked lists
2. Binary trees

## Example for linked list

```python
from basic_data_structure import ListNode


def generate_list(size: int) -> ListNode | None:
    """Generate linked list of N nodes.

    0 → 1 → 2 → 3 → ... → N
    """
    assert size >= 0
    dummy = ListNode(None)
    pointer = dummy
    for i in range(size):
        pointer.next = ListNode(i)
        pointer = pointer.next
    return dummy.next


def print_list(head: ListNode | None) -> None:
    while head:
        print(head.value, end=' → ' if head.next else '\n')
        head = head.next


def main() -> None:
    print_list(head=generate_list(5))


if __name__ == '__main__':
    main()
```

## Example for binary tree

```python
from typing import Generator

from basic_data_structure import TreeNode


def generate_tree() -> TreeNode:
    """Generate binary tree.

                 8
          ┌──────┴───────┐
          4              12
      ┌───┴───┐       ┌───┴───┐
      2       6       10      14
    ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐
    1   3   5   7   9   11  13  15
    """
    return TreeNode(
        8,
        left=TreeNode(
            4,
            left=TreeNode(
                2,
                left=TreeNode(1),
                right=TreeNode(3),
            ),
            right=TreeNode(
                6,
                left=TreeNode(5),
                right=TreeNode(7),
            ),
        ),
        right=TreeNode(
            12,
            left=TreeNode(
                10,
                left=TreeNode(9),
                right=TreeNode(11),
            ),
            right=TreeNode(
                14,
                left=TreeNode(13),
                right=TreeNode(15),
            ),
        ),
    )


def dfs(root: TreeNode | None) -> Generator[int, None, None]:
    """Depth-first search."""
    if root:
        if root.left:
            yield from dfs(root.left)

        yield root.value

        if root.right:
            yield from dfs(root.right)


def main():
    print('Depth-first search (DFS)')
    for data in dfs(root=generate_tree()):
        print(data, end=' ')


if __name__ == '__main__':
    main()
```
