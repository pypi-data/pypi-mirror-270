{"version":3,"file":"lib_index_js.4bc07777a9b2fca832f2.js","mappings":";;;;;;;;;;;;;;;AAAA;AACuD;AACvD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO,EAAE,UAAU;AACnD,iCAAiC,MAAM;AACvC;AACA;AACA,wBAAwB,OAAO,EAAE,YAAY,IAAI,kBAAkB,IAAI,MAAM;AAC7E;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACuD;AACkB;AAC5B;AAC7C;AACqF;AACtB;AACI;AACJ;AACb;AAClD;AACA;AACA;AACA,YAAY,iCAAiC;AAC7C;AACA;AACA;AACA;AACA,QAAQ,oEAAQ;AAChB;AACA;AACA;AACA,QAAQ,oEAAQ;AAChB;AACA,uBAAuB,kEAAM;AAC7B;AACA,QAAQ,oEAAQ;AAChB;AACA,sBAAsB,kEAAM;AAC5B,oEAAoE;AACpE,QAAQ,oEAAQ;AAChB;AACA,6BAA6B,kEAAM;AACnC;AACA,QAAQ,oEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAQ;AAChC;AACA;AACA;AACA;AACA,gBAAgB,qEAAS;AACzB;AACA;AACA,gBAAgB,qEAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB,EAAE,8BAA8B;AACtF;AACA;AACA,QAAQ,kEAAM;AACd,QAAQ,qEAAS;AACjB;AACA;AACA,QAAQ,qEAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB,EAAE,yEAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,+BAA+B;AACzD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,mCAAmC;AAC7D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qFAAqF,uBAAuB;AAC5G,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,wCAAwC,wDAAwD;AAChG;AACA;AACA,mEAAmE,OAAO;AAC1E,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sEAAsE,OAAO;AAC7E,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,WAAW;AACvC,mDAAmD,MAAM;AACzD;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,8BAA8B,kCAAkC;AAChE;AACA;AACA,+BAA+B,MAAM;AACrC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK,mBAAmB,qEAAS;AAC5F,SAAS;AACT,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAiB;AACrC;AACA,aAAa;AACb,8BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,uBAAuB;AAC7F;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab-tpt/./lib/admonitions.js","webpack://jupyterlab-tpt/./lib/index.js"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { NotebookActions } from '@jupyterlab/notebook';\nconst FENCE = '````';\n/* works on the active cell */\nexport const toggle_admonition = (notebook, admonition) => {\n    const activeCell = notebook === null || notebook === void 0 ? void 0 : notebook.activeCell;\n    if (activeCell === undefined) {\n        return;\n    }\n    const model = activeCell === null || activeCell === void 0 ? void 0 : activeCell.model;\n    if (model === undefined) {\n        return;\n    }\n    NotebookActions.changeCellType(notebook, 'markdown');\n    let cell_source = model.sharedModel.getSource();\n    // remove trailing newlines\n    while (cell_source.endsWith('\\n')) {\n        cell_source = cell_source.slice(0, -1);\n    }\n    // does it start with an admonition?\n    const turning_off = cell_source.startsWith(FENCE);\n    console.debug('admonition: turning_off', turning_off);\n    // a function that removes any initial white line, and any trailing white line\n    // a line is considered white if it is empty or only contains whitespace\n    const tidy = (dirty) => {\n        const lines = dirty.split('\\n');\n        while (lines.length !== 0 && lines[0].match(/^\\s*$/)) {\n            lines.shift();\n        }\n        while (lines.length !== 0 && lines[lines.length - 1].match(/^\\s*$/)) {\n            lines.pop();\n        }\n        return lines.join('\\n');\n    };\n    let new_source;\n    if (turning_off) {\n        new_source = tidy(cell_source\n            .replace(RegExp(`^${FENCE} *{[a-zA-Z]+}`), '')\n            .replace(RegExp(`\\n${FENCE}$`), ''));\n    }\n    else {\n        new_source = `${FENCE}{${admonition}}\\n${tidy(cell_source)}\\n${FENCE}`;\n    }\n    model.sharedModel.setSource(new_source);\n};\n","/*\n * for attaching keybindings later on, see\n * https://towardsdatascience.com/how-to-customize-jupyterlab-keyboard-shortcuts-72321f73753d\n */\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { INotebookTracker, NotebookActions } from '@jupyterlab/notebook';\nimport { CodeCell } from '@jupyterlab/cells';\n// md_clean may be broken\nimport { md_get, md_unset, md_insert, md_remove, } from 'jupyterlab-celltagsclasses';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { Scope, apply_on_cells } from 'jupyterlab-celltagsclasses';\nimport selectedCellsCss from '../style/selected_cells.raw.css';\nimport { toggle_admonition } from './admonitions';\nconst PLUGIN_ID = 'jupyterlab-tpt:plugin';\n// metadata\n// md_clean may be broken\n// import { md_set, , md_insert, md_remove } from 'jupyterlab-celltagsclasses'\nconst clean_cell_metadata = (cell) => {\n    console.log('Cleaning metadata for cell', cell);\n    const editable = cell.model.getMetadata('editable');\n    if (editable === true) {\n        md_unset(cell, 'editable');\n    }\n    const tags = cell.model.getMetadata('tags');\n    if ((tags === null || tags === void 0 ? void 0 : tags.length) === 0) {\n        md_unset(cell, 'tags');\n    }\n    const slide_type = md_get(cell, 'slideshow.slide_type');\n    if (slide_type === '') {\n        md_unset(cell, 'slideshow.slide_type');\n    }\n    const slideshow = md_get(cell, 'slideshow');\n    if (slideshow !== undefined && JSON.stringify(slideshow) === '{}') {\n        md_unset(cell, 'slideshow');\n    }\n    const user_expressions = md_get(cell, 'user_expressions');\n    if ((user_expressions === null || user_expressions === void 0 ? void 0 : user_expressions.length) === 0) {\n        md_unset(cell, 'user_expressions');\n    }\n};\n// cells that have this in their code\nconst NEEDLE = 'tools.sample_from';\nconst set_remove_input_needle = (cell, hidden) => {\n    // ignore text cells\n    if (cell instanceof CodeCell) {\n        // need to access the cell model\n        const model = cell.model;\n        if (model.sharedModel.getSource().toLowerCase().indexOf(NEEDLE) !== -1) {\n            if (hidden) {\n                md_remove(cell, 'tags', 'remove-input');\n            }\n            else {\n                md_insert(cell, 'tags', 'remove-input');\n            }\n        }\n    }\n};\n// use depth=0 to remove\nconst make_text_and_insert_section = (notebook, depth) => {\n    // console.log(\"make_text_and_insert_section\", depth)\n    NotebookActions.changeCellType(notebook, 'markdown');\n    const activeCell = notebook === null || notebook === void 0 ? void 0 : notebook.activeCell;\n    if (activeCell === undefined) {\n        return;\n    }\n    const model = activeCell === null || activeCell === void 0 ? void 0 : activeCell.model;\n    if (model === undefined) {\n        return;\n    }\n    // remove starting #'s if any\n    for (let i = 4; i > 0; i--) {\n        model.sharedModel.setSource(model.sharedModel.getSource().replace('#'.repeat(i) + ' ', ''));\n    }\n    if (depth === 0) {\n        return;\n    }\n    model.sharedModel.setSource(`${'#'.repeat(depth)} ${model.sharedModel.getSource()}`);\n};\nconst toggle_tag = (cell, tag) => {\n    if (md_get(cell, 'tags', tag)) {\n        md_remove(cell, 'tags', tag);\n    }\n    else {\n        md_insert(cell, 'tags', tag);\n    }\n};\n/**\n * Initialization data for the jupyterlab-tpt extension.\n */\nconst plugin = {\n    id: 'jupyterlab-tpt:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, INotebookTracker, ISettingRegistry],\n    activate: (app, palette, notebookTracker, settingRegistry) => {\n        console.log('JupyterLab extension jupyterlab-tpt is activating');\n        // console.log('ICommandPalette', palette)\n        // console.log('INotebookTracker', notebookTracker)\n        // the addCommand would accept the following\n        // isEnabled: () => true,\n        // isVisible: () => true,\n        // iconClass: 'some-css-icon-class',\n        // also we could pass args to execute, but in the hide-input case\n        // it does not work well as we need distinct labels depending on the args\n        // https://lumino.readthedocs.io/en/1.x/api/commands/interfaces/commandregistry.ikeybindingoptions.html\n        // The supported modifiers are: Accel, Alt, Cmd, Ctrl, and Shift. The Accel\n        // modifier is translated to Cmd on Mac and Ctrl on all other platforms. The\n        // Cmd modifier is ignored on non-Mac platforms.\n        // Alt is option on mac\n        let [outline_selected_cells] = [false];\n        let command;\n        command = 'metadata:clean-selected';\n        app.commands.addCommand(command, {\n            label: 'clean metadata for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, clean_cell_metadata)\n        });\n        palette.addItem({ command, category: 'metadata' });\n        app.commands.addKeyBinding({\n            command,\n            keys: ['Alt Cmd 7'],\n            selector: '.jp-Notebook'\n        });\n        command = 'metadata:clean-all';\n        app.commands.addCommand(command, {\n            label: 'clean metadata for all cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.All, clean_cell_metadata)\n        });\n        palette.addItem({ command, category: 'courselevels' });\n        app.commands.addKeyBinding({\n            command,\n            keys: ['Ctrl Alt 7'],\n            selector: '.jp-Notebook'\n        });\n        // Option-Command-9 = toggle (hide-input) on all selected cells\n        // Ctrl-Alt-9 = show (wrt hide-input) on all selected cells\n        command = 'convenience:show-settings';\n        app.commands.addCommand(command, {\n            label: 'show settings',\n            execute: () => console.log(`Current settings: outline_selected_cells = ${outline_selected_cells}`)\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        // app.commands.addKeyBinding({ command, keys: ['Alt Cmd 7'], selector: '.jp-Notebook' })\n        command = 'convenience:hide-input-all-samples';\n        app.commands.addCommand(command, {\n            label: `remove input for all code cells that contain ${NEEDLE}`,\n            execute: () => apply_on_cells(notebookTracker, Scope.All, cell => set_remove_input_needle(cell, true))\n        });\n        palette.addItem({ command, category: 'convenience' });\n        app.commands.addKeyBinding({\n            command,\n            keys: ['Alt Cmd 8'],\n            selector: '.jp-Notebook'\n        });\n        command = 'convenience:show-input-all-samples';\n        app.commands.addCommand(command, {\n            label: `reinstate input for all code cells that contain ${NEEDLE}`,\n            execute: () => apply_on_cells(notebookTracker, Scope.All, cell => set_remove_input_needle(cell, false))\n        });\n        palette.addItem({ command, category: 'convenience' });\n        app.commands.addKeyBinding({\n            command,\n            keys: ['Ctrl Alt 8'],\n            selector: '.jp-Notebook'\n        });\n        // Ctrl-0 to Ctrl-4 to set markdown sections\n        for (let depth = 0; depth < 5; depth++) {\n            command = `convenience:section-level-${depth}`;\n            app.commands.addCommand(command, {\n                label: `active cell becomes section level ${depth}`,\n                execute: () => {\n                    var _a;\n                    const notebook = (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                    if (notebook === undefined) {\n                        return;\n                    }\n                    make_text_and_insert_section(notebook, depth);\n                }\n            });\n            palette.addItem({ command, category: 'convenience' });\n            app.commands.addKeyBinding({\n                command,\n                keys: [`Ctrl ${depth}`],\n                selector: '.jp-Notebook'\n            });\n        }\n        // render-all-cells - unrender-all-cells (markdown actually)\n        const unrender_markdown = (cell) => {\n            if (cell.model.type !== 'markdown') {\n                return;\n            }\n            cell.rendered = false;\n        };\n        command = 'notebook:unrender-all-markdown';\n        app.commands.addCommand(command, {\n            label: 'unrender all markdown cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.All, unrender_markdown)\n        });\n        palette.addItem({ command, category: 'convenience' });\n        // control-e means end of ine if in edit mode\n        app.commands.addKeyBinding({\n            command,\n            keys: ['Ctrl E'],\n            selector: '.jp-Notebook.jp-mod-commandMode'\n        });\n        app.commands.addKeyBinding({\n            command: 'notebook:render-all-markdown',\n            keys: ['Ctrl W'],\n            selector: '.jp-Notebook'\n        });\n        // this is actually lowercase u and d, would need an explicit Shift otherwise\n        app.commands.addKeyBinding({\n            command: 'notebook:move-cell-up',\n            keys: ['U'],\n            selector: '.jp-Notebook.jp-mod-commandMode'\n        });\n        app.commands.addKeyBinding({\n            command: 'notebook:move-cell-down',\n            keys: ['D'],\n            selector: '.jp-Notebook.jp-mod-commandMode'\n        });\n        command = 'convenience:toggle-raises-exception';\n        app.commands.addCommand(command, {\n            label: 'toggle raises-exception for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, cell => toggle_tag(cell, 'raises-exception'))\n        });\n        palette.addItem({ command, category: 'convenience' });\n        app.commands.addKeyBinding({\n            command,\n            keys: ['Alt Cmd 6'],\n            selector: '.jp-Notebook'\n        });\n        command = 'convenience:set-raises-exception';\n        app.commands.addCommand(command, {\n            label: 'set raises-exception for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, cell => md_insert(cell, 'tags', 'raises-exception'))\n        });\n        palette.addItem({ command, category: 'convenience' });\n        app.commands.addKeyBinding({\n            command,\n            keys: ['Ctrl Alt 6'],\n            selector: '.jp-Notebook'\n        });\n        const apply_outline_selected_cells = (outline_selected_cells) => {\n            const id = 'outline-selected-cells-style';\n            const present = document.getElementById(id);\n            // already good\n            if ((outline_selected_cells && present) ||\n                (!outline_selected_cells && !present)) {\n                return;\n            }\n            // need to inject\n            if (outline_selected_cells) {\n                console.log('injecting css for outlining selection');\n                const inject_css = (css_text, id) => {\n                    const style = document.createElement('style');\n                    style.setAttribute('type', 'text/css');\n                    style.id = id;\n                    style.appendChild(document.createTextNode(css_text));\n                    document.body.appendChild(style);\n                };\n                inject_css(selectedCellsCss, id);\n            }\n            else {\n                console.log('removing css for outlining selection');\n                present === null || present === void 0 ? void 0 : present.remove();\n            }\n        };\n        // admonitions\n        for (const [name, key] of [\n            ['admonition', 'Ctrl A'],\n            ['tip', 'Ctrl T'],\n            ['note', 'Ctrl N'],\n            ['attention', null],\n            ['caution', null],\n            ['danger', null],\n            ['error', null],\n            ['hint', null],\n            ['important', null],\n            ['seealso', null],\n            ['warning', null]\n        ]) {\n            // need to cast because name is typed as string | null ?!?\n            const admonition = name;\n            command = 'admonition:toggle';\n            let label = 'toggle admonition';\n            if (admonition !== 'admonition') {\n                command += `-${admonition}`;\n                label += ` ${admonition}`;\n            }\n            app.commands.addCommand(command, {\n                label,\n                execute: () => {\n                    var _a;\n                    const notebook = (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                    if (notebook === undefined) {\n                        return;\n                    }\n                    toggle_admonition(notebook, admonition);\n                }\n            });\n            palette.addItem({ command, category: 'admonition' });\n            if (key !== null) {\n                app.commands.addKeyBinding({\n                    command,\n                    keys: ['Ctrl \\\\', key],\n                    selector: '.jp-Notebook'\n                });\n            }\n        }\n        function loadSetting(setting) {\n            // Read the settings and convert to the correct type\n            outline_selected_cells = setting.get('outline_selected_cells')\n                .composite;\n            console.log(`tpt extension, outline_selected is read as ${outline_selected_cells}`);\n            apply_outline_selected_cells(outline_selected_cells);\n        }\n        Promise.all([app.restored, settingRegistry.load(PLUGIN_ID)]).then(([_, setting]) => {\n            loadSetting(setting);\n            setting.changed.connect(loadSetting);\n        });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}