{"version":3,"file":"lib_index_js.4ceee5cc1c43b2ae02fc.js","mappings":"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","sources":["webpack://jupyterlab-tpt/./src/admonitions.ts","webpack://jupyterlab-tpt/./src/index.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\n\nimport { Notebook, NotebookActions } from '@jupyterlab/notebook'\n\nconst FENCE = '````'\n\n/* works on the active cell */\nexport const toggle_admonition = (\n  notebook: Notebook,\n  admonition: string\n): void => {\n  const activeCell = notebook?.activeCell\n  if (activeCell === undefined) {\n    return\n  }\n  const model = activeCell?.model\n  if (model === undefined) {\n    return\n  }\n\n  NotebookActions.changeCellType(notebook, 'markdown')\n\n  let cell_source = model.sharedModel.getSource()\n  // remove trailing newlines\n  while (cell_source.endsWith('\\n')) {\n    cell_source = cell_source.slice(0, -1)\n  }\n  // does it start with an admonition?\n  const turning_off = cell_source.startsWith(FENCE)\n\n  console.debug('admonition: turning_off', turning_off)\n\n  // a function that removes any initial white line, and any trailing white line\n  // a line is considered white if it is empty or only contains whitespace\n  const tidy = (dirty: string): string => {\n    const lines = dirty.split('\\n')\n    while (lines.length !== 0 && lines[0].match(/^\\s*$/)) {\n      lines.shift()\n    }\n    while (lines.length !== 0 && lines[lines.length - 1].match(/^\\s*$/)) {\n      lines.pop()\n    }\n    return lines.join('\\n')\n  }\n\n  let new_source: string\n  if (turning_off) {\n    new_source = tidy(\n      cell_source\n        .replace(RegExp(`^${FENCE} *{[a-zA-Z]+}`), '')\n        .replace(RegExp(`\\n${FENCE}$`), '')\n    )\n  } else {\n    new_source = `${FENCE}{${admonition}}\\n${tidy(cell_source)}\\n${FENCE}`\n  }\n\n  model.sharedModel.setSource(new_source)\n}\n","/*\n * for attaching keybindings later on, see\n * https://towardsdatascience.com/how-to-customize-jupyterlab-keyboard-shortcuts-72321f73753d\n */\n\n/* eslint-disable prettier/prettier */\n\nimport { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application'\n\nimport { ICommandPalette } from '@jupyterlab/apputils'\n\nimport {\n  INotebookTracker,\n  Notebook,\n  NotebookActions\n} from '@jupyterlab/notebook'\n\nimport { CodeCell, MarkdownCell, Cell } from '@jupyterlab/cells'\n\n// md_clean may be broken\nimport {\n  md_get,\n  md_insert,\n  md_remove\n} from 'jupyterlab-celltagsclasses'\nimport { ISettingRegistry } from '@jupyterlab/settingregistry'\n\nimport { Scope, apply_on_cells } from 'jupyterlab-celltagsclasses'\n\nimport selectedCellsCss from '../style/selected_cells.raw.css'\n\nimport { toggle_admonition } from './admonitions'\n\nconst PLUGIN_ID = 'jupyterlab-tpt:plugin'\n\n// regarding hide-input, forget about the nbclassic behaviour\n// we will just run once hideinput-to-hidecell\n// and be done with it\n\n// cells that have this in their code\nconst NEEDLE = 'tools.sample_from'\n\nconst set_remove_input_needle = (cell: Cell, hidden: boolean) => {\n  // ignore text cells\n  if (cell instanceof CodeCell) {\n    // need to access the cell model\n    const model = cell.model\n    if (model.sharedModel.getSource().toLowerCase().indexOf(NEEDLE) !== -1) {\n      if (hidden) {\n        md_remove(cell, 'tags', 'remove-input')\n      } else {\n        md_insert(cell, 'tags', 'remove-input')\n      }\n    }\n  }\n}\n\n// use depth=0 to remove\nconst make_text_and_insert_section = (notebook: Notebook, depth: number) => {\n  // console.log(\"make_text_and_insert_section\", depth)\n  NotebookActions.changeCellType(notebook, 'markdown')\n  const activeCell = notebook?.activeCell\n  if (activeCell === undefined) {\n    return\n  }\n  const model = activeCell?.model\n  if (model === undefined) {\n    return\n  }\n  // remove starting #'s if any\n  for (let i = 4; i > 0; i--) {\n    model.sharedModel.setSource(\n      model.sharedModel.getSource().replace('#'.repeat(i) + ' ', '')\n    )\n  }\n  if (depth === 0) {\n    return\n  }\n  model.sharedModel.setSource(\n    `${'#'.repeat(depth)} ${model.sharedModel.getSource()}`\n  )\n}\n\nconst toggle_tag = (cell: Cell, tag: string) => {\n  if (md_get(cell, 'tags', tag)) {\n    md_remove(cell, 'tags', tag)\n  } else {\n    md_insert(cell, 'tags', tag)\n  }\n}\n/**\n * Initialization data for the jupyterlab-tpt extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-tpt:plugin',\n  autoStart: true,\n  requires: [ICommandPalette, INotebookTracker, ISettingRegistry],\n  activate: (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    notebookTracker: INotebookTracker,\n    settingRegistry: ISettingRegistry\n  ) => {\n    console.log('JupyterLab extension jupyterlab-tpt is activating')\n    // console.log('ICommandPalette', palette)\n    // console.log('INotebookTracker', notebookTracker)\n\n    // the addCommand would accept the following\n    // isEnabled: () => true,\n    // isVisible: () => true,\n    // iconClass: 'some-css-icon-class',\n    // also we could pass args to execute, but in the hide-input case\n    // it does not work well as we need distinct labels depending on the args\n\n    // https://lumino.readthedocs.io/en/1.x/api/commands/interfaces/commandregistry.ikeybindingoptions.html\n    // The supported modifiers are: Accel, Alt, Cmd, Ctrl, and Shift. The Accel\n    // modifier is translated to Cmd on Mac and Ctrl on all other platforms. The\n    // Cmd modifier is ignored on non-Mac platforms.\n    // Alt is option on mac\n\n    let [outline_selected_cells] = [false]\n\n    let command\n\n    // Option-Command-9 = toggle (hide-input) on all selected cells\n    // Ctrl-Alt-9 = show (wrt hide-input) on all selected cells\n    command = 'convenience:show-settings'\n    app.commands.addCommand(command, {\n      label: 'show settings',\n      execute: () =>\n        console.log(\n          `Current settings: outline_selected_cells = ${outline_selected_cells}`\n        )\n    })\n    palette.addItem({ command, category: 'Convenience' })\n    // app.commands.addKeyBinding({ command, keys: ['Alt Cmd 7'], selector: '.jp-Notebook' })\n\n    command = 'convenience:hide-input-all-samples'\n    app.commands.addCommand(command, {\n      label: `remove input for all code cells that contain ${NEEDLE}`,\n      execute: () =>\n        apply_on_cells(notebookTracker, Scope.All, cell =>\n          set_remove_input_needle(cell, true)\n        )\n    })\n    palette.addItem({ command, category: 'convenience' })\n    app.commands.addKeyBinding({\n      command,\n      keys: ['Alt Cmd 8'],\n      selector: '.jp-Notebook'\n    })\n\n    command = 'convenience:show-input-all-samples'\n    app.commands.addCommand(command, {\n      label: `reinstate input for all code cells that contain ${NEEDLE}`,\n      execute: () =>\n        apply_on_cells(notebookTracker, Scope.All, cell =>\n          set_remove_input_needle(cell, false)\n        )\n    })\n    palette.addItem({ command, category: 'convenience' })\n    app.commands.addKeyBinding({\n      command,\n      keys: ['Ctrl Alt 8'],\n      selector: '.jp-Notebook'\n    })\n\n    // Ctrl-0 to Ctrl-4 to set markdown sections\n    for (let depth = 0; depth < 5; depth++) {\n      command = `convenience:section-level-${depth}`\n      app.commands.addCommand(command, {\n        label: `active cell becomes section level ${depth}`,\n        execute: () => {\n          const notebook = notebookTracker.currentWidget?.content\n          if (notebook === undefined) {\n            return\n          }\n          make_text_and_insert_section(notebook, depth)\n        }\n      })\n      palette.addItem({ command, category: 'convenience' })\n      app.commands.addKeyBinding({\n        command,\n        keys: [`Ctrl ${depth}`],\n        selector: '.jp-Notebook'\n      })\n    }\n\n    // render-all-cells - unrender-all-cells (markdown actually)\n\n    const unrender_markdown = (cell: Cell) => {\n      if (cell.model.type !== 'markdown') {\n        return\n      }\n      (cell as MarkdownCell).rendered = false\n    }\n    command = 'notebook:unrender-all-markdown'\n    app.commands.addCommand(command, {\n      label: 'unrender all markdown cells',\n      execute: () =>\n        apply_on_cells(notebookTracker, Scope.All, unrender_markdown)\n    })\n    palette.addItem({ command, category: 'convenience' })\n    // control-e means end of ine if in edit mode\n    app.commands.addKeyBinding({\n      command,\n      keys: ['Ctrl E'],\n      selector: '.jp-Notebook.jp-mod-commandMode'\n    })\n\n    app.commands.addKeyBinding({\n      command: 'notebook:render-all-markdown',\n      keys: ['Ctrl W'],\n      selector: '.jp-Notebook'\n    })\n\n    // this is actually lowercase u and d, would need an explicit Shift otherwise\n    app.commands.addKeyBinding({\n      command: 'notebook:move-cell-up',\n      keys: ['U'],\n      selector: '.jp-Notebook.jp-mod-commandMode'\n    })\n    app.commands.addKeyBinding({\n      command: 'notebook:move-cell-down',\n      keys: ['D'],\n      selector: '.jp-Notebook.jp-mod-commandMode'\n    })\n\n    command = 'convenience:toggle-raises-exception'\n    app.commands.addCommand(command, {\n      label: 'toggle raises-exception for all selected cells',\n      execute: () =>\n        apply_on_cells(notebookTracker, Scope.Multiple, cell =>\n          toggle_tag(cell, 'raises-exception')\n        )\n    })\n    palette.addItem({ command, category: 'convenience' })\n    app.commands.addKeyBinding({\n      command,\n      keys: ['Alt Cmd 6'],\n      selector: '.jp-Notebook'\n    })\n\n    command = 'convenience:set-raises-exception'\n    app.commands.addCommand(command, {\n      label: 'set raises-exception for all selected cells',\n      execute: () =>\n        apply_on_cells(notebookTracker, Scope.Multiple, cell =>\n          md_insert(cell, 'tags', 'raises-exception')\n        )\n    })\n    palette.addItem({ command, category: 'convenience' })\n    app.commands.addKeyBinding({\n      command,\n      keys: ['Ctrl Alt 6'],\n      selector: '.jp-Notebook'\n    })\n\n    const apply_outline_selected_cells = (outline_selected_cells: boolean) => {\n      const id = 'outline-selected-cells-style'\n      const present = document.getElementById(id)\n      // already good\n      if (\n        (outline_selected_cells && present) ||\n        (!outline_selected_cells && !present)\n      ) {\n        return\n      }\n      // need to inject\n      if (outline_selected_cells) {\n        console.log('injecting css for outlining selection')\n        const inject_css = (css_text: string, id: string) => {\n          const style = document.createElement('style')\n          style.setAttribute('type', 'text/css')\n          style.id = id\n          style.appendChild(document.createTextNode(css_text))\n          document.body.appendChild(style)\n        }\n        inject_css(selectedCellsCss, id)\n      } else {\n        console.log('removing css for outlining selection')\n        present?.remove()\n      }\n    }\n\n    // admonitions\n    for (const [name, key] of [\n      ['admonition', 'Ctrl A'],\n      ['tip', 'Ctrl T'],\n      ['note', 'Ctrl N'],\n      ['attention', null],\n      ['caution', null],\n      ['danger', null],\n      ['error', null],\n      ['hint', null],\n      ['important', null],\n      ['seealso', null],\n      ['warning', null]\n    ]) {\n      // need to cast because name is typed as string | null ?!?\n      const admonition = name as string\n      command = 'admonition:toggle'\n      let label = 'toggle admonition'\n      if (admonition !== 'admonition') {\n        command += `-${admonition}`\n        label += ` ${admonition}`\n      }\n      app.commands.addCommand(command, {\n        label,\n        execute: () => {\n          const notebook = notebookTracker.currentWidget?.content\n          if (notebook === undefined) {\n            return\n          }\n          toggle_admonition(notebook, admonition)\n        }\n      })\n      palette.addItem({ command, category: 'admonition' })\n      if (key !== null) {\n        app.commands.addKeyBinding({\n          command,\n          keys: ['Ctrl \\\\', key],\n          selector: '.jp-Notebook'\n        })\n      }\n    }\n\n    function loadSetting(setting: ISettingRegistry.ISettings): void {\n      // Read the settings and convert to the correct type\n      outline_selected_cells = setting.get('outline_selected_cells')\n        .composite as boolean\n\n      console.log(\n        `tpt extension, outline_selected is read as ${outline_selected_cells}`\n      )\n      apply_outline_selected_cells(outline_selected_cells)\n    }\n\n    Promise.all([app.restored, settingRegistry.load(PLUGIN_ID)]).then(\n      ([_, setting]) => {\n        loadSetting(setting)\n        setting.changed.connect(loadSetting)\n      }\n    )\n  }\n}\n\nexport default plugin\n"],"names":[],"sourceRoot":""}