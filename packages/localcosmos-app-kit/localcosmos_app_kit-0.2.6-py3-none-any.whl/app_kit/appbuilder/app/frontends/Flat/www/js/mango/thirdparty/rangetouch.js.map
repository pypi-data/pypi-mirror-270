{"version":3,"sources":["src/js/rangetouch.js","src/js/config.js","src/js/utils/is.js","src/js/utils/numbers.js","src/js/utils/css.js","src/js/utils/events.js"],"names":["global","factory","exports","module","define","amd","RangeTouch","this","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","defaults","addCSS","thumbWidth","watch","getConstructor","input","constructor","instanceOf","isNullOrUndefined","isObject","isString","String","isArray","Array","isNodeList","NodeList","is","nullOrUndefined","object","number","Number","isNaN","string","boolean","Boolean","function","Function","array","nodeList","element","Element","event","Event","empty","keys","round","step","places","value","match","concat","Math","max","getDecimalPlaces","parseFloat","toFixed","a","options","instance","Constructor","TypeError","_classCallCheck","document","querySelector","rangeTouch","config","assign","init","staticProps","arguments","targets","from","querySelectorAll","filter","MutationObserver","mutations","forEach","mutation","addedNodes","node","selector","includes","call","matches","observe","body","childList","subtree","map","t","get","documentElement","protoProps","enabled","style","userSelect","webKitUserSelect","touchAction","listeners","toggle","b","method","type","set","percent","touch","changedTouches","min","getAttribute","clientRect","getBoundingClientRect","width","clientX","left","disabled","preventDefault","dispatchEvent","trigger","prototype"],"mappings":"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","file":"rangetouch.js","sourcesContent":["// ==========================================================================\n// rangetouch.js v2.0.0\n// Making <input type=\"range\"> work on touch devices\n// https://github.com/sampotts/rangetouch\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './config';\nimport { matches } from './utils/css';\nimport { trigger } from './utils/events';\nimport is from './utils/is';\nimport { round } from './utils/numbers';\n\nclass RangeTouch {\n    /**\n     * Setup a new instance\n     * @param {String|Element} target\n     * @param {Object} options\n     */\n    constructor(target, options) {\n        if (is.element(target)) {\n            // An Element is passed, use it directly\n            this.element = target;\n        } else if (is.string(target)) {\n            // A CSS Selector is passed, fetch it from the DOM\n            this.element = document.querySelector(target);\n        }\n\n        if (!is.element(this.element) || !is.empty(this.element.rangeTouch)) {\n            return;\n        }\n\n        this.config = Object.assign({}, defaults, options);\n\n        this.init();\n    }\n\n    static get enabled() {\n        return 'ontouchstart' in document.documentElement;\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {String|Element|NodeList|Array} target\n     * @param {Object} options\n     */\n    static setup(target, options = {}) {\n        let targets = null;\n\n        if (is.empty(target) || is.string(target)) {\n            targets = Array.from(document.querySelectorAll(is.string(target) ? target : 'input[type=\"range\"]'));\n        } else if (is.element(target)) {\n            targets = [target];\n        } else if (is.nodeList(target)) {\n            targets = Array.from(target);\n        } else if (is.array(target)) {\n            targets = target.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        const config = Object.assign({}, defaults, options);\n\n        if (is.string(target) && config.watch) {\n            // Create an observer instance\n            const observer = new MutationObserver(mutations => {\n                Array.from(mutations).forEach(mutation => {\n                    Array.from(mutation.addedNodes).forEach(node => {\n                        if (!is.element(node) || !matches(node, target)) {\n                            return;\n                        }\n\n                        // eslint-disable-next-line no-unused-vars\n                        const range = new RangeTouch(node, config);\n                    });\n                });\n            });\n\n            // Pass in the target node, as well as the observer options\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        }\n\n        return targets.map(t => new RangeTouch(t, options));\n    }\n\n    init() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        // Add useful CSS\n        if (this.config.addCSS) {\n            // TODO: Restore original values on destroy\n            this.element.style.userSelect = 'none';\n            this.element.style.webKitUserSelect = 'none';\n            this.element.style.touchAction = 'manipulation';\n        }\n\n        this.listeners(true);\n\n        this.element.rangeTouch = this;\n    }\n\n    destroy() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        this.listeners(false);\n\n        this.element.rangeTouch = null;\n    }\n\n    listeners(toggle) {\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\n\n        // Listen for events\n        ['touchstart', 'touchmove', 'touchend'].forEach(type => {\n            this.element[method](type, event => this.set(event), false);\n        });\n    }\n\n    /**\n     * Get the value based on touch position\n     * @param {Event} event\n     */\n    get(event) {\n        if (!RangeTouch.enabled || !is.event(event)) {\n            return null;\n        }\n\n        const input = event.target;\n        const touch = event.changedTouches[0];\n        const min = parseFloat(input.getAttribute('min')) || 0;\n        const max = parseFloat(input.getAttribute('max')) || 100;\n        const step = parseFloat(input.getAttribute('step')) || 1;\n        const delta = max - min;\n\n        // Calculate percentage\n        let percent;\n        const clientRect = input.getBoundingClientRect();\n        const thumbWidth = ((100 / clientRect.width) * (this.config.thumbWidth / 2)) / 100;\n\n        // Determine left percentage\n        percent = (100 / clientRect.width) * (touch.clientX - clientRect.left);\n\n        // Don't allow outside bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Factor in the thumb offset\n        if (percent < 50) {\n            percent -= (100 - percent * 2) * thumbWidth;\n        } else if (percent > 50) {\n            percent += (percent - 50) * 2 * thumbWidth;\n        }\n\n        // Find the closest step to the mouse position\n        return min + round(delta * (percent / 100), step);\n    }\n\n    /**\n     * Update range value based on position\n     * @param {Event} event\n     */\n    set(event) {\n        if (!RangeTouch.enabled || !is.event(event) || event.target.disabled) {\n            return;\n        }\n\n        // Prevent text highlight on iOS\n        event.preventDefault();\n\n        // Set value\n        event.target.value = this.get(event);\n\n        // Trigger event\n        trigger(event.target, event.type === 'touchend' ? 'change' : 'input');\n    }\n}\n\nexport default RangeTouch;\n","const defaults = {\n    addCSS: true, // Add CSS to the element to improve usability (required here or in your CSS!)\n    thumbWidth: 15, // The width of the thumb handle\n    watch: true, // Watch for new elements that match a string target\n};\n\nexport default defaults;","// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isArray = input => Array.isArray(input);\nconst isNodeList = input => instanceOf(input, NodeList);\nconst isElement = input => instanceOf(input, Element);\nconst isEvent = input => instanceOf(input, Event);\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nexport default {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty,\n};\n","// Get the number of decimal places\nexport function getDecimalPlaces(value) {\n    const match = `${value}`.match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n    if (!match) {\n        return 0;\n    }\n\n    return Math.max(\n        0,\n        // Number of digits right of decimal point.\n        (match[1] ? match[1].length : 0) -\n            // Adjust for scientific notation.\n            (match[2] ? +match[2] : 0),\n    );\n}\n\n// Round to the nearest step\nexport function round(number, step) {\n    if (step < 1) {\n        const places = getDecimalPlaces(step);\n        return parseFloat(number.toFixed(places));\n    }\n    return Math.round(number / step) * step;\n}\n\nexport default {};\n","// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return matches.call(element, selector);\n}\n\nexport default {};\n","// Trigger event\nexport function trigger(element, type) {\n    if (!element || !type) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new Event(type);\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n\nexport default {};\n"]}