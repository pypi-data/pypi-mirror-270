# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NtfyArgs', 'Ntfy']

@pulumi.input_type
class NtfyArgs:
    def __init__(__self__, *,
                 topics: pulumi.Input[Sequence[pulumi.Input[str]]],
                 access_token: Optional[pulumi.Input[str]] = None,
                 click_url: Optional[pulumi.Input[str]] = None,
                 field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 include_manual_grabs: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ntfy resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: Topics.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] click_url: Click URL.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_tags: Tags and emojis.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[bool] include_manual_grabs: Include manual grab flag.
        :param pulumi.Input[str] name: NotificationNtfy name.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_grab: On release grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[int] priority: Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.
        :param pulumi.Input[str] server_url: Server URL.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[str] username: Username.
        """
        pulumi.set(__self__, "topics", topics)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if click_url is not None:
            pulumi.set(__self__, "click_url", click_url)
        if field_tags is not None:
            pulumi.set(__self__, "field_tags", field_tags)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if include_manual_grabs is not None:
            pulumi.set(__self__, "include_manual_grabs", include_manual_grabs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_application_update is not None:
            pulumi.set(__self__, "on_application_update", on_application_update)
        if on_grab is not None:
            pulumi.set(__self__, "on_grab", on_grab)
        if on_health_issue is not None:
            pulumi.set(__self__, "on_health_issue", on_health_issue)
        if on_health_restored is not None:
            pulumi.set(__self__, "on_health_restored", on_health_restored)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def topics(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Topics.
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "topics", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clickUrl")
    def click_url(self) -> Optional[pulumi.Input[str]]:
        """
        Click URL.
        """
        return pulumi.get(self, "click_url")

    @click_url.setter
    def click_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "click_url", value)

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags and emojis.
        """
        return pulumi.get(self, "field_tags")

    @field_tags.setter
    def field_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "field_tags", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter(name="includeManualGrabs")
    def include_manual_grabs(self) -> Optional[pulumi.Input[bool]]:
        """
        Include manual grab flag.
        """
        return pulumi.get(self, "include_manual_grabs")

    @include_manual_grabs.setter
    def include_manual_grabs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_manual_grabs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationNtfy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> Optional[pulumi.Input[bool]]:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @on_application_update.setter
    def on_application_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_application_update", value)

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> Optional[pulumi.Input[bool]]:
        """
        On release grab flag.
        """
        return pulumi.get(self, "on_grab")

    @on_grab.setter
    def on_grab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_grab", value)

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> Optional[pulumi.Input[bool]]:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @on_health_issue.setter
    def on_health_issue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_issue", value)

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> Optional[pulumi.Input[bool]]:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @on_health_restored.setter
    def on_health_restored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_restored", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        """
        Server URL.
        """
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _NtfyState:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 click_url: Optional[pulumi.Input[str]] = None,
                 field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 include_manual_grabs: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ntfy resources.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] click_url: Click URL.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_tags: Tags and emojis.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[bool] include_manual_grabs: Include manual grab flag.
        :param pulumi.Input[str] name: NotificationNtfy name.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_grab: On release grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[int] priority: Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.
        :param pulumi.Input[str] server_url: Server URL.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: Topics.
        :param pulumi.Input[str] username: Username.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if click_url is not None:
            pulumi.set(__self__, "click_url", click_url)
        if field_tags is not None:
            pulumi.set(__self__, "field_tags", field_tags)
        if include_health_warnings is not None:
            pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        if include_manual_grabs is not None:
            pulumi.set(__self__, "include_manual_grabs", include_manual_grabs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_application_update is not None:
            pulumi.set(__self__, "on_application_update", on_application_update)
        if on_grab is not None:
            pulumi.set(__self__, "on_grab", on_grab)
        if on_health_issue is not None:
            pulumi.set(__self__, "on_health_issue", on_health_issue)
        if on_health_restored is not None:
            pulumi.set(__self__, "on_health_restored", on_health_restored)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clickUrl")
    def click_url(self) -> Optional[pulumi.Input[str]]:
        """
        Click URL.
        """
        return pulumi.get(self, "click_url")

    @click_url.setter
    def click_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "click_url", value)

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags and emojis.
        """
        return pulumi.get(self, "field_tags")

    @field_tags.setter
    def field_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "field_tags", value)

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @include_health_warnings.setter
    def include_health_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_health_warnings", value)

    @property
    @pulumi.getter(name="includeManualGrabs")
    def include_manual_grabs(self) -> Optional[pulumi.Input[bool]]:
        """
        Include manual grab flag.
        """
        return pulumi.get(self, "include_manual_grabs")

    @include_manual_grabs.setter
    def include_manual_grabs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_manual_grabs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NotificationNtfy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> Optional[pulumi.Input[bool]]:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @on_application_update.setter
    def on_application_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_application_update", value)

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> Optional[pulumi.Input[bool]]:
        """
        On release grab flag.
        """
        return pulumi.get(self, "on_grab")

    @on_grab.setter
    def on_grab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_grab", value)

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> Optional[pulumi.Input[bool]]:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @on_health_issue.setter
    def on_health_issue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_issue", value)

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> Optional[pulumi.Input[bool]]:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @on_health_restored.setter
    def on_health_restored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_health_restored", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        """
        Server URL.
        """
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def topics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Topics.
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topics", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Ntfy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 click_url: Optional[pulumi.Input[str]] = None,
                 field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 include_manual_grabs: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        <!-- subcategory:Notifications -->Notification Ntfy resource.
        For more information refer to [Notification](https://wiki.servarr.com/prowlarr/settings#connect) and [Ntfy](https://wiki.servarr.com/prowlarr/supported#ntfy).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prowlarr as prowlarr

        example = prowlarr.notifications.Ntfy("example",
            field_tags=[
                "warning",
                "skull",
            ],
            include_health_warnings=False,
            on_application_update=False,
            on_health_issue=False,
            password="Pass",
            priority=1,
            server_url="https://ntfy.sh",
            topics=[
                "Topic1234",
                "Topic4321",
            ],
            username="User")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import prowlarr:Notifications/ntfy:Ntfy example 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] click_url: Click URL.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_tags: Tags and emojis.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[bool] include_manual_grabs: Include manual grab flag.
        :param pulumi.Input[str] name: NotificationNtfy name.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_grab: On release grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[int] priority: Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.
        :param pulumi.Input[str] server_url: Server URL.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: Topics.
        :param pulumi.Input[str] username: Username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NtfyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        <!-- subcategory:Notifications -->Notification Ntfy resource.
        For more information refer to [Notification](https://wiki.servarr.com/prowlarr/settings#connect) and [Ntfy](https://wiki.servarr.com/prowlarr/supported#ntfy).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prowlarr as prowlarr

        example = prowlarr.notifications.Ntfy("example",
            field_tags=[
                "warning",
                "skull",
            ],
            include_health_warnings=False,
            on_application_update=False,
            on_health_issue=False,
            password="Pass",
            priority=1,
            server_url="https://ntfy.sh",
            topics=[
                "Topic1234",
                "Topic4321",
            ],
            username="User")
        ```

        ## Import

        import using the API/UI ID

        ```sh
         $ pulumi import prowlarr:Notifications/ntfy:Ntfy example 1
        ```

        :param str resource_name: The name of the resource.
        :param NtfyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NtfyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 click_url: Optional[pulumi.Input[str]] = None,
                 field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_health_warnings: Optional[pulumi.Input[bool]] = None,
                 include_manual_grabs: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_application_update: Optional[pulumi.Input[bool]] = None,
                 on_grab: Optional[pulumi.Input[bool]] = None,
                 on_health_issue: Optional[pulumi.Input[bool]] = None,
                 on_health_restored: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NtfyArgs.__new__(NtfyArgs)

            __props__.__dict__["access_token"] = None if access_token is None else pulumi.Output.secret(access_token)
            __props__.__dict__["click_url"] = click_url
            __props__.__dict__["field_tags"] = field_tags
            __props__.__dict__["include_health_warnings"] = include_health_warnings
            __props__.__dict__["include_manual_grabs"] = include_manual_grabs
            __props__.__dict__["name"] = name
            __props__.__dict__["on_application_update"] = on_application_update
            __props__.__dict__["on_grab"] = on_grab
            __props__.__dict__["on_health_issue"] = on_health_issue
            __props__.__dict__["on_health_restored"] = on_health_restored
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["priority"] = priority
            __props__.__dict__["server_url"] = server_url
            __props__.__dict__["tags"] = tags
            if topics is None and not opts.urn:
                raise TypeError("Missing required property 'topics'")
            __props__.__dict__["topics"] = topics
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessToken", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Ntfy, __self__).__init__(
            'prowlarr:Notifications/ntfy:Ntfy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token: Optional[pulumi.Input[str]] = None,
            click_url: Optional[pulumi.Input[str]] = None,
            field_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            include_health_warnings: Optional[pulumi.Input[bool]] = None,
            include_manual_grabs: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            on_application_update: Optional[pulumi.Input[bool]] = None,
            on_grab: Optional[pulumi.Input[bool]] = None,
            on_health_issue: Optional[pulumi.Input[bool]] = None,
            on_health_restored: Optional[pulumi.Input[bool]] = None,
            password: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            server_url: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'Ntfy':
        """
        Get an existing Ntfy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token: Access token.
        :param pulumi.Input[str] click_url: Click URL.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_tags: Tags and emojis.
        :param pulumi.Input[bool] include_health_warnings: Include health warnings.
        :param pulumi.Input[bool] include_manual_grabs: Include manual grab flag.
        :param pulumi.Input[str] name: NotificationNtfy name.
        :param pulumi.Input[bool] on_application_update: On application update flag.
        :param pulumi.Input[bool] on_grab: On release grab flag.
        :param pulumi.Input[bool] on_health_issue: On health issue flag.
        :param pulumi.Input[bool] on_health_restored: On health restored flag.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[int] priority: Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.
        :param pulumi.Input[str] server_url: Server URL.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tags: List of associated tags.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: Topics.
        :param pulumi.Input[str] username: Username.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NtfyState.__new__(_NtfyState)

        __props__.__dict__["access_token"] = access_token
        __props__.__dict__["click_url"] = click_url
        __props__.__dict__["field_tags"] = field_tags
        __props__.__dict__["include_health_warnings"] = include_health_warnings
        __props__.__dict__["include_manual_grabs"] = include_manual_grabs
        __props__.__dict__["name"] = name
        __props__.__dict__["on_application_update"] = on_application_update
        __props__.__dict__["on_grab"] = on_grab
        __props__.__dict__["on_health_issue"] = on_health_issue
        __props__.__dict__["on_health_restored"] = on_health_restored
        __props__.__dict__["password"] = password
        __props__.__dict__["priority"] = priority
        __props__.__dict__["server_url"] = server_url
        __props__.__dict__["tags"] = tags
        __props__.__dict__["topics"] = topics
        __props__.__dict__["username"] = username
        return Ntfy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[str]:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clickUrl")
    def click_url(self) -> pulumi.Output[str]:
        """
        Click URL.
        """
        return pulumi.get(self, "click_url")

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> pulumi.Output[Sequence[str]]:
        """
        Tags and emojis.
        """
        return pulumi.get(self, "field_tags")

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> pulumi.Output[bool]:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @property
    @pulumi.getter(name="includeManualGrabs")
    def include_manual_grabs(self) -> pulumi.Output[bool]:
        """
        Include manual grab flag.
        """
        return pulumi.get(self, "include_manual_grabs")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        NotificationNtfy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> pulumi.Output[bool]:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> pulumi.Output[bool]:
        """
        On release grab flag.
        """
        return pulumi.get(self, "on_grab")

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> pulumi.Output[bool]:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> pulumi.Output[bool]:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> pulumi.Output[str]:
        """
        Server URL.
        """
        return pulumi.get(self, "server_url")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[int]]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def topics(self) -> pulumi.Output[Sequence[str]]:
        """
        Topics.
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username.
        """
        return pulumi.get(self, "username")

