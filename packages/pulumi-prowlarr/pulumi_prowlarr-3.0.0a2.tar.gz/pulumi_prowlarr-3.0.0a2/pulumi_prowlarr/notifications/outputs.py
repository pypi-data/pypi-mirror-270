# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetNotificationsNotificationResult',
]

@pulumi.output_type
class GetNotificationsNotificationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 access_token_secret: str,
                 always_update: bool,
                 api_key: str,
                 app_token: str,
                 arguments: str,
                 auth_password: str,
                 auth_token: str,
                 auth_user: str,
                 auth_username: str,
                 author: str,
                 avatar: str,
                 base_url: str,
                 bccs: Sequence[str],
                 bot_token: str,
                 ccs: Sequence[str],
                 channel: str,
                 channel_tags: Sequence[str],
                 chat_id: str,
                 clean_library: bool,
                 click_url: str,
                 config_contract: str,
                 configuration_key: str,
                 consumer_key: str,
                 consumer_secret: str,
                 device_ids: Sequence[int],
                 device_names: str,
                 devices: Sequence[str],
                 direct_message: bool,
                 display_time: int,
                 event: str,
                 expire: int,
                 expires: str,
                 field_tags: Sequence[str],
                 from_: str,
                 grab_fields: Sequence[int],
                 host: str,
                 icon: str,
                 id: int,
                 implementation: str,
                 include_health_warnings: bool,
                 include_manual_grabs: bool,
                 instance_name: str,
                 key: str,
                 map_from: str,
                 map_to: str,
                 mention: str,
                 method: int,
                 name: str,
                 notification_type: int,
                 notify: bool,
                 on_application_update: bool,
                 on_grab: bool,
                 on_health_issue: bool,
                 on_health_restored: bool,
                 password: str,
                 path: str,
                 port: int,
                 priority: int,
                 receiver_id: str,
                 recipients: Sequence[str],
                 refresh_token: str,
                 retry: int,
                 send_silently: bool,
                 sender_domain: str,
                 sender_id: str,
                 sender_number: str,
                 server: str,
                 server_url: str,
                 sign_in: str,
                 sound: str,
                 stateless_urls: str,
                 tags: Sequence[int],
                 token: str,
                 topic_id: str,
                 topics: Sequence[str],
                 tos: Sequence[str],
                 update_library: bool,
                 url: str,
                 use_encryption: int,
                 use_eu_endpoint: bool,
                 use_ssl: bool,
                 user_key: str,
                 username: str,
                 web_hook_url: str):
        """
        :param str access_token: Access token.
        :param str access_token_secret: Access token secret.
        :param bool always_update: Always update flag.
        :param str api_key: API key.
        :param str app_token: App token.
        :param str arguments: Arguments.
        :param str auth_password: Auth password.
        :param str auth_token: Auth token.
        :param str auth_user: Auth user.
        :param str auth_username: Auth username.
        :param str author: Author.
        :param str avatar: Avatar.
        :param str base_url: Base URL.
        :param Sequence[str] bccs: Bcc.
        :param str bot_token: Bot token.
        :param Sequence[str] ccs: Cc.
        :param str channel: Channel.
        :param Sequence[str] channel_tags: Channel tags.
        :param str chat_id: Chat ID.
        :param bool clean_library: Clean library flag.
        :param str click_url: Click URL.
        :param str config_contract: Notification configuration template.
        :param str configuration_key: Configuration key.
        :param str consumer_key: Consumer key.
        :param str consumer_secret: Consumer secret.
        :param Sequence[int] device_ids: Device IDs.
        :param str device_names: Device names.
        :param Sequence[str] devices: Devices.
        :param bool direct_message: Direct message flag.
        :param int display_time: Display time.
        :param str event: Event.
        :param int expire: Expire.
        :param str expires: Expires.
        :param Sequence[str] field_tags: Devices.
        :param str from_: From.
        :param Sequence[int] grab_fields: Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.
        :param str host: Host.
        :param str icon: Icon.
        :param int id: Notification ID.
        :param str implementation: Notification implementation name.
        :param bool include_health_warnings: Include health warnings.
        :param bool include_manual_grabs: Include manual grab flag.
        :param str instance_name: Instance name.
        :param str key: Key.
        :param str map_from: Map From.
        :param str map_to: Map To.
        :param str mention: Mention.
        :param int method: Method. `1` POST, `2` PUT.
        :param str name: Notification name.
        :param int notification_type: Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
        :param bool notify: Notify flag.
        :param bool on_application_update: On application update flag.
        :param bool on_grab: On release grab flag.
        :param bool on_health_issue: On health issue flag.
        :param bool on_health_restored: On health restored flag.
        :param str password: password.
        :param str path: Path.
        :param int port: Port.
        :param int priority: Priority.
        :param str receiver_id: Receiver ID.
        :param Sequence[str] recipients: Recipients.
        :param str refresh_token: Refresh token.
        :param int retry: Retry.
        :param bool send_silently: Add silently flag.
        :param str sender_domain: Sender domain.
        :param str sender_id: Sender ID.
        :param str sender_number: Sender Number.
        :param str server: server.
        :param str server_url: Server url.
        :param str sign_in: Sign in.
        :param str sound: Sound.
        :param str stateless_urls: Comma separated stateless URLs.
        :param Sequence[int] tags: List of associated tags.
        :param str token: Token.
        :param str topic_id: Topic ID.
        :param Sequence[str] topics: Devices.
        :param Sequence[str] tos: To.
        :param bool update_library: Update library flag.
        :param str url: URL.
        :param int use_encryption: Use Encryption. `0` Preferred, `1` Always, `2` Never.
        :param bool use_eu_endpoint: Use EU endpoint flag.
        :param bool use_ssl: Use SSL flag.
        :param str user_key: User key.
        :param str username: Username.
        :param str web_hook_url: Web hook url.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "access_token_secret", access_token_secret)
        pulumi.set(__self__, "always_update", always_update)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "app_token", app_token)
        pulumi.set(__self__, "arguments", arguments)
        pulumi.set(__self__, "auth_password", auth_password)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "auth_user", auth_user)
        pulumi.set(__self__, "auth_username", auth_username)
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "avatar", avatar)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "bccs", bccs)
        pulumi.set(__self__, "bot_token", bot_token)
        pulumi.set(__self__, "ccs", ccs)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "channel_tags", channel_tags)
        pulumi.set(__self__, "chat_id", chat_id)
        pulumi.set(__self__, "clean_library", clean_library)
        pulumi.set(__self__, "click_url", click_url)
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "configuration_key", configuration_key)
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "device_ids", device_ids)
        pulumi.set(__self__, "device_names", device_names)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "direct_message", direct_message)
        pulumi.set(__self__, "display_time", display_time)
        pulumi.set(__self__, "event", event)
        pulumi.set(__self__, "expire", expire)
        pulumi.set(__self__, "expires", expires)
        pulumi.set(__self__, "field_tags", field_tags)
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "grab_fields", grab_fields)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "icon", icon)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "include_health_warnings", include_health_warnings)
        pulumi.set(__self__, "include_manual_grabs", include_manual_grabs)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "map_from", map_from)
        pulumi.set(__self__, "map_to", map_to)
        pulumi.set(__self__, "mention", mention)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notification_type", notification_type)
        pulumi.set(__self__, "notify", notify)
        pulumi.set(__self__, "on_application_update", on_application_update)
        pulumi.set(__self__, "on_grab", on_grab)
        pulumi.set(__self__, "on_health_issue", on_health_issue)
        pulumi.set(__self__, "on_health_restored", on_health_restored)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "receiver_id", receiver_id)
        pulumi.set(__self__, "recipients", recipients)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "retry", retry)
        pulumi.set(__self__, "send_silently", send_silently)
        pulumi.set(__self__, "sender_domain", sender_domain)
        pulumi.set(__self__, "sender_id", sender_id)
        pulumi.set(__self__, "sender_number", sender_number)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "server_url", server_url)
        pulumi.set(__self__, "sign_in", sign_in)
        pulumi.set(__self__, "sound", sound)
        pulumi.set(__self__, "stateless_urls", stateless_urls)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "topic_id", topic_id)
        pulumi.set(__self__, "topics", topics)
        pulumi.set(__self__, "tos", tos)
        pulumi.set(__self__, "update_library", update_library)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "use_encryption", use_encryption)
        pulumi.set(__self__, "use_eu_endpoint", use_eu_endpoint)
        pulumi.set(__self__, "use_ssl", use_ssl)
        pulumi.set(__self__, "user_key", user_key)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "web_hook_url", web_hook_url)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accessTokenSecret")
    def access_token_secret(self) -> str:
        """
        Access token secret.
        """
        return pulumi.get(self, "access_token_secret")

    @property
    @pulumi.getter(name="alwaysUpdate")
    def always_update(self) -> bool:
        """
        Always update flag.
        """
        return pulumi.get(self, "always_update")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> str:
        """
        App token.
        """
        return pulumi.get(self, "app_token")

    @property
    @pulumi.getter
    def arguments(self) -> str:
        """
        Arguments.
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> str:
        """
        Auth password.
        """
        return pulumi.get(self, "auth_password")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        """
        Auth token.
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="authUser")
    def auth_user(self) -> str:
        """
        Auth user.
        """
        return pulumi.get(self, "auth_user")

    @property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> str:
        """
        Auth username.
        """
        return pulumi.get(self, "auth_username")

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        Author.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def avatar(self) -> str:
        """
        Avatar.
        """
        return pulumi.get(self, "avatar")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter
    def bccs(self) -> Sequence[str]:
        """
        Bcc.
        """
        return pulumi.get(self, "bccs")

    @property
    @pulumi.getter(name="botToken")
    def bot_token(self) -> str:
        """
        Bot token.
        """
        return pulumi.get(self, "bot_token")

    @property
    @pulumi.getter
    def ccs(self) -> Sequence[str]:
        """
        Cc.
        """
        return pulumi.get(self, "ccs")

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        Channel.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelTags")
    def channel_tags(self) -> Sequence[str]:
        """
        Channel tags.
        """
        return pulumi.get(self, "channel_tags")

    @property
    @pulumi.getter(name="chatId")
    def chat_id(self) -> str:
        """
        Chat ID.
        """
        return pulumi.get(self, "chat_id")

    @property
    @pulumi.getter(name="cleanLibrary")
    def clean_library(self) -> bool:
        """
        Clean library flag.
        """
        return pulumi.get(self, "clean_library")

    @property
    @pulumi.getter(name="clickUrl")
    def click_url(self) -> str:
        """
        Click URL.
        """
        return pulumi.get(self, "click_url")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Notification configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter(name="configurationKey")
    def configuration_key(self) -> str:
        """
        Configuration key.
        """
        return pulumi.get(self, "configuration_key")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        """
        Consumer key.
        """
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        """
        Consumer secret.
        """
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> Sequence[int]:
        """
        Device IDs.
        """
        return pulumi.get(self, "device_ids")

    @property
    @pulumi.getter(name="deviceNames")
    def device_names(self) -> str:
        """
        Device names.
        """
        return pulumi.get(self, "device_names")

    @property
    @pulumi.getter
    def devices(self) -> Sequence[str]:
        """
        Devices.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="directMessage")
    def direct_message(self) -> bool:
        """
        Direct message flag.
        """
        return pulumi.get(self, "direct_message")

    @property
    @pulumi.getter(name="displayTime")
    def display_time(self) -> int:
        """
        Display time.
        """
        return pulumi.get(self, "display_time")

    @property
    @pulumi.getter
    def event(self) -> str:
        """
        Event.
        """
        return pulumi.get(self, "event")

    @property
    @pulumi.getter
    def expire(self) -> int:
        """
        Expire.
        """
        return pulumi.get(self, "expire")

    @property
    @pulumi.getter
    def expires(self) -> str:
        """
        Expires.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Sequence[str]:
        """
        Devices.
        """
        return pulumi.get(self, "field_tags")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        From.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="grabFields")
    def grab_fields(self) -> Sequence[int]:
        """
        Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.
        """
        return pulumi.get(self, "grab_fields")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def icon(self) -> str:
        """
        Icon.
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Notification ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Notification implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="includeHealthWarnings")
    def include_health_warnings(self) -> bool:
        """
        Include health warnings.
        """
        return pulumi.get(self, "include_health_warnings")

    @property
    @pulumi.getter(name="includeManualGrabs")
    def include_manual_grabs(self) -> bool:
        """
        Include manual grab flag.
        """
        return pulumi.get(self, "include_manual_grabs")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="mapFrom")
    def map_from(self) -> str:
        """
        Map From.
        """
        return pulumi.get(self, "map_from")

    @property
    @pulumi.getter(name="mapTo")
    def map_to(self) -> str:
        """
        Map To.
        """
        return pulumi.get(self, "map_to")

    @property
    @pulumi.getter
    def mention(self) -> str:
        """
        Mention.
        """
        return pulumi.get(self, "mention")

    @property
    @pulumi.getter
    def method(self) -> int:
        """
        Method. `1` POST, `2` PUT.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Notification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> int:
        """
        Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
        """
        return pulumi.get(self, "notification_type")

    @property
    @pulumi.getter
    def notify(self) -> bool:
        """
        Notify flag.
        """
        return pulumi.get(self, "notify")

    @property
    @pulumi.getter(name="onApplicationUpdate")
    def on_application_update(self) -> bool:
        """
        On application update flag.
        """
        return pulumi.get(self, "on_application_update")

    @property
    @pulumi.getter(name="onGrab")
    def on_grab(self) -> bool:
        """
        On release grab flag.
        """
        return pulumi.get(self, "on_grab")

    @property
    @pulumi.getter(name="onHealthIssue")
    def on_health_issue(self) -> bool:
        """
        On health issue flag.
        """
        return pulumi.get(self, "on_health_issue")

    @property
    @pulumi.getter(name="onHealthRestored")
    def on_health_restored(self) -> bool:
        """
        On health restored flag.
        """
        return pulumi.get(self, "on_health_restored")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="receiverId")
    def receiver_id(self) -> str:
        """
        Receiver ID.
        """
        return pulumi.get(self, "receiver_id")

    @property
    @pulumi.getter
    def recipients(self) -> Sequence[str]:
        """
        Recipients.
        """
        return pulumi.get(self, "recipients")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        """
        Refresh token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter
    def retry(self) -> int:
        """
        Retry.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="sendSilently")
    def send_silently(self) -> bool:
        """
        Add silently flag.
        """
        return pulumi.get(self, "send_silently")

    @property
    @pulumi.getter(name="senderDomain")
    def sender_domain(self) -> str:
        """
        Sender domain.
        """
        return pulumi.get(self, "sender_domain")

    @property
    @pulumi.getter(name="senderId")
    def sender_id(self) -> str:
        """
        Sender ID.
        """
        return pulumi.get(self, "sender_id")

    @property
    @pulumi.getter(name="senderNumber")
    def sender_number(self) -> str:
        """
        Sender Number.
        """
        return pulumi.get(self, "sender_number")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> str:
        """
        Server url.
        """
        return pulumi.get(self, "server_url")

    @property
    @pulumi.getter(name="signIn")
    def sign_in(self) -> str:
        """
        Sign in.
        """
        return pulumi.get(self, "sign_in")

    @property
    @pulumi.getter
    def sound(self) -> str:
        """
        Sound.
        """
        return pulumi.get(self, "sound")

    @property
    @pulumi.getter(name="statelessUrls")
    def stateless_urls(self) -> str:
        """
        Comma separated stateless URLs.
        """
        return pulumi.get(self, "stateless_urls")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        Token.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        Topic ID.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter
    def topics(self) -> Sequence[str]:
        """
        Devices.
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter
    def tos(self) -> Sequence[str]:
        """
        To.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="updateLibrary")
    def update_library(self) -> bool:
        """
        Update library flag.
        """
        return pulumi.get(self, "update_library")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="useEncryption")
    def use_encryption(self) -> int:
        """
        Use Encryption. `0` Preferred, `1` Always, `2` Never.
        """
        return pulumi.get(self, "use_encryption")

    @property
    @pulumi.getter(name="useEuEndpoint")
    def use_eu_endpoint(self) -> bool:
        """
        Use EU endpoint flag.
        """
        return pulumi.get(self, "use_eu_endpoint")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> bool:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter(name="userKey")
    def user_key(self) -> str:
        """
        User key.
        """
        return pulumi.get(self, "user_key")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="webHookUrl")
    def web_hook_url(self) -> str:
        """
        Web hook url.
        """
        return pulumi.get(self, "web_hook_url")


