# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetHostResult',
    'AwaitableGetHostResult',
    'get_host',
    'get_host_output',
]

@pulumi.output_type
class GetHostResult:
    """
    A collection of values returned by getHost.
    """
    def __init__(__self__, application_url=None, authentication=None, backup=None, bind_address=None, id=None, instance_name=None, launch_browser=None, logging=None, port=None, proxy=None, ssl=None, update=None, url_base=None):
        if application_url and not isinstance(application_url, str):
            raise TypeError("Expected argument 'application_url' to be a str")
        pulumi.set(__self__, "application_url", application_url)
        if authentication and not isinstance(authentication, dict):
            raise TypeError("Expected argument 'authentication' to be a dict")
        pulumi.set(__self__, "authentication", authentication)
        if backup and not isinstance(backup, dict):
            raise TypeError("Expected argument 'backup' to be a dict")
        pulumi.set(__self__, "backup", backup)
        if bind_address and not isinstance(bind_address, str):
            raise TypeError("Expected argument 'bind_address' to be a str")
        pulumi.set(__self__, "bind_address", bind_address)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if launch_browser and not isinstance(launch_browser, bool):
            raise TypeError("Expected argument 'launch_browser' to be a bool")
        pulumi.set(__self__, "launch_browser", launch_browser)
        if logging and not isinstance(logging, dict):
            raise TypeError("Expected argument 'logging' to be a dict")
        pulumi.set(__self__, "logging", logging)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if proxy and not isinstance(proxy, dict):
            raise TypeError("Expected argument 'proxy' to be a dict")
        pulumi.set(__self__, "proxy", proxy)
        if ssl and not isinstance(ssl, dict):
            raise TypeError("Expected argument 'ssl' to be a dict")
        pulumi.set(__self__, "ssl", ssl)
        if update and not isinstance(update, dict):
            raise TypeError("Expected argument 'update' to be a dict")
        pulumi.set(__self__, "update", update)
        if url_base and not isinstance(url_base, str):
            raise TypeError("Expected argument 'url_base' to be a str")
        pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="applicationUrl")
    def application_url(self) -> str:
        """
        Application URL.
        """
        return pulumi.get(self, "application_url")

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetHostAuthenticationResult':
        """
        Authentication configuration.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def backup(self) -> 'outputs.GetHostBackupResult':
        """
        Backup configuration.
        """
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter(name="bindAddress")
    def bind_address(self) -> str:
        """
        Bind address.
        """
        return pulumi.get(self, "bind_address")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Host ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="launchBrowser")
    def launch_browser(self) -> bool:
        """
        Launch browser flag.
        """
        return pulumi.get(self, "launch_browser")

    @property
    @pulumi.getter
    def logging(self) -> 'outputs.GetHostLoggingResult':
        """
        Logging configuration.
        """
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        TCP port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def proxy(self) -> 'outputs.GetHostProxyResult':
        """
        Proxy configuration.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def ssl(self) -> 'outputs.GetHostSslResult':
        """
        Backup configuration.
        """
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter
    def update(self) -> 'outputs.GetHostUpdateResult':
        """
        Update configuration.
        """
        return pulumi.get(self, "update")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        """
        URL base.
        """
        return pulumi.get(self, "url_base")


class AwaitableGetHostResult(GetHostResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostResult(
            application_url=self.application_url,
            authentication=self.authentication,
            backup=self.backup,
            bind_address=self.bind_address,
            id=self.id,
            instance_name=self.instance_name,
            launch_browser=self.launch_browser,
            logging=self.logging,
            port=self.port,
            proxy=self.proxy,
            ssl=self.ssl,
            update=self.update,
            url_base=self.url_base)


def get_host(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostResult:
    """
    <!-- subcategory:System -->Host.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    example = prowlarr.System.get_host()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('prowlarr:System/getHost:getHost', __args__, opts=opts, typ=GetHostResult).value

    return AwaitableGetHostResult(
        application_url=pulumi.get(__ret__, 'application_url'),
        authentication=pulumi.get(__ret__, 'authentication'),
        backup=pulumi.get(__ret__, 'backup'),
        bind_address=pulumi.get(__ret__, 'bind_address'),
        id=pulumi.get(__ret__, 'id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        launch_browser=pulumi.get(__ret__, 'launch_browser'),
        logging=pulumi.get(__ret__, 'logging'),
        port=pulumi.get(__ret__, 'port'),
        proxy=pulumi.get(__ret__, 'proxy'),
        ssl=pulumi.get(__ret__, 'ssl'),
        update=pulumi.get(__ret__, 'update'),
        url_base=pulumi.get(__ret__, 'url_base'))


@_utilities.lift_output_func(get_host)
def get_host_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHostResult]:
    """
    <!-- subcategory:System -->Host.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    example = prowlarr.System.get_host()
    ```
    """
    ...
