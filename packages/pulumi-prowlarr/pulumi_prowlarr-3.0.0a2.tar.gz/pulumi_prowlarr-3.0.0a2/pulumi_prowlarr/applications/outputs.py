# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetApplicationsApplicationResult',
    'GetSyncProfilesSyncProfileResult',
]

@pulumi.output_type
class GetApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 anime_sync_categories: Sequence[int],
                 api_key: str,
                 base_url: str,
                 config_contract: str,
                 id: int,
                 implementation: str,
                 name: str,
                 prowlarr_url: str,
                 sync_categories: Sequence[int],
                 sync_level: str,
                 tags: Sequence[int]):
        """
        :param Sequence[int] anime_sync_categories: Anime sync categories.
        :param str api_key: API key.
        :param str base_url: Base URL.
        :param str config_contract: Application configuration template.
        :param int id: Application ID.
        :param str implementation: Application implementation name.
        :param str name: Application name.
        :param str prowlarr_url: Prowlarr URL.
        :param Sequence[int] sync_categories: Sync categories.
        :param str sync_level: Sync level.
        :param Sequence[int] tags: List of associated tags.
        """
        pulumi.set(__self__, "anime_sync_categories", anime_sync_categories)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "prowlarr_url", prowlarr_url)
        pulumi.set(__self__, "sync_categories", sync_categories)
        pulumi.set(__self__, "sync_level", sync_level)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="animeSyncCategories")
    def anime_sync_categories(self) -> Sequence[int]:
        """
        Anime sync categories.
        """
        return pulumi.get(self, "anime_sync_categories")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Application configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Application ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Application implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Application name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="prowlarrUrl")
    def prowlarr_url(self) -> str:
        """
        Prowlarr URL.
        """
        return pulumi.get(self, "prowlarr_url")

    @property
    @pulumi.getter(name="syncCategories")
    def sync_categories(self) -> Sequence[int]:
        """
        Sync categories.
        """
        return pulumi.get(self, "sync_categories")

    @property
    @pulumi.getter(name="syncLevel")
    def sync_level(self) -> str:
        """
        Sync level.
        """
        return pulumi.get(self, "sync_level")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSyncProfilesSyncProfileResult(dict):
    def __init__(__self__, *,
                 enable_automatic_search: bool,
                 enable_interactive_search: bool,
                 enable_rss: bool,
                 id: int,
                 minimum_seeders: int,
                 name: str):
        """
        :param bool enable_automatic_search: Enable automatic search flag.
        :param bool enable_interactive_search: Enable interactive search flag.
        :param bool enable_rss: Enable RSS flag.
        :param int id: Sync Profile ID.
        :param int minimum_seeders: Minimum seeders.
        :param str name: Name.
        """
        pulumi.set(__self__, "enable_automatic_search", enable_automatic_search)
        pulumi.set(__self__, "enable_interactive_search", enable_interactive_search)
        pulumi.set(__self__, "enable_rss", enable_rss)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "minimum_seeders", minimum_seeders)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="enableAutomaticSearch")
    def enable_automatic_search(self) -> bool:
        """
        Enable automatic search flag.
        """
        return pulumi.get(self, "enable_automatic_search")

    @property
    @pulumi.getter(name="enableInteractiveSearch")
    def enable_interactive_search(self) -> bool:
        """
        Enable interactive search flag.
        """
        return pulumi.get(self, "enable_interactive_search")

    @property
    @pulumi.getter(name="enableRss")
    def enable_rss(self) -> bool:
        """
        Enable RSS flag.
        """
        return pulumi.get(self, "enable_rss")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Sync Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="minimumSeeders")
    def minimum_seeders(self) -> int:
        """
        Minimum seeders.
        """
        return pulumi.get(self, "minimum_seeders")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")


