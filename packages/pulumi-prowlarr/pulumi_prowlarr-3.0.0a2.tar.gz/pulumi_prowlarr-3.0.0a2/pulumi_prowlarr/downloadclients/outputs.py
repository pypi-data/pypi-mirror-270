# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'Aria2Category',
    'DelugeCategory',
    'DownloadClientCategory',
    'FloodCategory',
    'FreeboxCategory',
    'HadoukenCategory',
    'NzbgetCategory',
    'NzbvortexCategory',
    'PneumaticCategory',
    'QbittorrentCategory',
    'RtorrentCategory',
    'SabnzbdCategory',
    'TorrentBlackholeCategory',
    'TorrentDownloadStationCategory',
    'TransmissionCategory',
    'UsenetBlackholeCategory',
    'UsenetDownloadStationCategory',
    'UtorrentCategory',
    'VuzeCategory',
    'GetDownloadClientCategoryResult',
    'GetDownloadClientsDownloadClientResult',
    'GetDownloadClientsDownloadClientCategoryResult',
]

@pulumi.output_type
class Aria2Category(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DelugeCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DownloadClientCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FloodCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FreeboxCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class HadoukenCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NzbgetCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NzbvortexCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PneumaticCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class QbittorrentCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RtorrentCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SabnzbdCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TorrentBlackholeCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TorrentDownloadStationCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TransmissionCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UsenetBlackholeCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UsenetDownloadStationCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UtorrentCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VuzeCategory(dict):
    def __init__(__self__, *,
                 categories: Optional[Sequence[int]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[int]]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDownloadClientCategoryResult(dict):
    def __init__(__self__, *,
                 categories: Sequence[int],
                 name: str):
        """
        :param Sequence[int] categories: List of categories.
        :param str name: Name of client category.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Sequence[int]:
        """
        List of categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDownloadClientsDownloadClientResult(dict):
    def __init__(__self__, *,
                 add_paused: bool,
                 add_stopped: bool,
                 additional_tags: Sequence[int],
                 api_key: str,
                 api_url: str,
                 app_id: str,
                 app_token: str,
                 categories: Sequence['outputs.GetDownloadClientsDownloadClientCategoryResult'],
                 category: str,
                 config_contract: str,
                 destination: str,
                 destination_directory: str,
                 directory: str,
                 enable: bool,
                 field_tags: Sequence[str],
                 host: str,
                 id: int,
                 implementation: str,
                 initial_state: int,
                 intial_state: int,
                 item_priority: int,
                 magnet_file_extension: str,
                 name: str,
                 nzb_folder: str,
                 password: str,
                 port: int,
                 post_im_tags: Sequence[str],
                 priority: int,
                 protocol: str,
                 read_only: bool,
                 rpc_path: str,
                 save_magnet_files: bool,
                 secret_token: str,
                 start_on_add: bool,
                 station_directory: str,
                 strm_folder: str,
                 tags: Sequence[int],
                 torrent_folder: str,
                 tv_imported_category: str,
                 url_base: str,
                 use_ssl: bool,
                 username: str):
        """
        :param bool add_paused: Add paused flag.
        :param bool add_stopped: Add stopped flag.
        :param Sequence[int] additional_tags: Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.
        :param str api_key: API key.
        :param str api_url: API URL.
        :param str app_id: App ID.
        :param str app_token: App Token.
        :param Sequence['GetDownloadClientsDownloadClientCategoryArgs'] categories: List of mapped categories.
        :param str category: Category.
        :param str config_contract: DownloadClient configuration template.
        :param str destination: Destination.
        :param str destination_directory: Movie directory.
        :param str directory: Directory.
        :param bool enable: Enable flag.
        :param Sequence[str] field_tags: Field tags.
        :param str host: host.
        :param int id: Download Client ID.
        :param str implementation: DownloadClient implementation name.
        :param int initial_state: Initial state. `0` Start, `1` ForceStart, `2` Pause.
        :param int intial_state: Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.
        :param int item_priority: Priority. `0` Last, `1` First.
        :param str magnet_file_extension: Magnet file extension.
        :param str name: Download Client name.
        :param str nzb_folder: NZB folder.
        :param str password: Password.
        :param int port: Port.
        :param Sequence[str] post_im_tags: Post import tags.
        :param int priority: Priority.
        :param str protocol: Protocol. Valid values are 'usenet' and 'torrent'.
        :param bool read_only: Read only flag.
        :param str rpc_path: RPC path.
        :param bool save_magnet_files: Save magnet files flag.
        :param str secret_token: Secret token.
        :param bool start_on_add: Start on add flag.
        :param str station_directory: Directory.
        :param str strm_folder: STRM folder.
        :param Sequence[int] tags: List of associated tags.
        :param str torrent_folder: Torrent folder.
        :param str tv_imported_category: TV imported category.
        :param str url_base: Base URL.
        :param bool use_ssl: Use SSL flag.
        :param str username: Username.
        """
        pulumi.set(__self__, "add_paused", add_paused)
        pulumi.set(__self__, "add_stopped", add_stopped)
        pulumi.set(__self__, "additional_tags", additional_tags)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_url", api_url)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_token", app_token)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "destination_directory", destination_directory)
        pulumi.set(__self__, "directory", directory)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "field_tags", field_tags)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "initial_state", initial_state)
        pulumi.set(__self__, "intial_state", intial_state)
        pulumi.set(__self__, "item_priority", item_priority)
        pulumi.set(__self__, "magnet_file_extension", magnet_file_extension)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nzb_folder", nzb_folder)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_im_tags", post_im_tags)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "rpc_path", rpc_path)
        pulumi.set(__self__, "save_magnet_files", save_magnet_files)
        pulumi.set(__self__, "secret_token", secret_token)
        pulumi.set(__self__, "start_on_add", start_on_add)
        pulumi.set(__self__, "station_directory", station_directory)
        pulumi.set(__self__, "strm_folder", strm_folder)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "torrent_folder", torrent_folder)
        pulumi.set(__self__, "tv_imported_category", tv_imported_category)
        pulumi.set(__self__, "url_base", url_base)
        pulumi.set(__self__, "use_ssl", use_ssl)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="addPaused")
    def add_paused(self) -> bool:
        """
        Add paused flag.
        """
        return pulumi.get(self, "add_paused")

    @property
    @pulumi.getter(name="addStopped")
    def add_stopped(self) -> bool:
        """
        Add stopped flag.
        """
        return pulumi.get(self, "add_stopped")

    @property
    @pulumi.getter(name="additionalTags")
    def additional_tags(self) -> Sequence[int]:
        """
        Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.
        """
        return pulumi.get(self, "additional_tags")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> str:
        """
        API URL.
        """
        return pulumi.get(self, "api_url")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App ID.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> str:
        """
        App Token.
        """
        return pulumi.get(self, "app_token")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetDownloadClientsDownloadClientCategoryResult']:
        """
        List of mapped categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        DownloadClient configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Destination.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationDirectory")
    def destination_directory(self) -> str:
        """
        Movie directory.
        """
        return pulumi.get(self, "destination_directory")

    @property
    @pulumi.getter
    def directory(self) -> str:
        """
        Directory.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Sequence[str]:
        """
        Field tags.
        """
        return pulumi.get(self, "field_tags")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Download Client ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        DownloadClient implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="initialState")
    def initial_state(self) -> int:
        """
        Initial state. `0` Start, `1` ForceStart, `2` Pause.
        """
        return pulumi.get(self, "initial_state")

    @property
    @pulumi.getter(name="intialState")
    def intial_state(self) -> int:
        """
        Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.
        """
        return pulumi.get(self, "intial_state")

    @property
    @pulumi.getter(name="itemPriority")
    def item_priority(self) -> int:
        """
        Priority. `0` Last, `1` First.
        """
        return pulumi.get(self, "item_priority")

    @property
    @pulumi.getter(name="magnetFileExtension")
    def magnet_file_extension(self) -> str:
        """
        Magnet file extension.
        """
        return pulumi.get(self, "magnet_file_extension")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Download Client name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nzbFolder")
    def nzb_folder(self) -> str:
        """
        NZB folder.
        """
        return pulumi.get(self, "nzb_folder")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="postImTags")
    def post_im_tags(self) -> Sequence[str]:
        """
        Post import tags.
        """
        return pulumi.get(self, "post_im_tags")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol. Valid values are 'usenet' and 'torrent'.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Read only flag.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="rpcPath")
    def rpc_path(self) -> str:
        """
        RPC path.
        """
        return pulumi.get(self, "rpc_path")

    @property
    @pulumi.getter(name="saveMagnetFiles")
    def save_magnet_files(self) -> bool:
        """
        Save magnet files flag.
        """
        return pulumi.get(self, "save_magnet_files")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> str:
        """
        Secret token.
        """
        return pulumi.get(self, "secret_token")

    @property
    @pulumi.getter(name="startOnAdd")
    def start_on_add(self) -> bool:
        """
        Start on add flag.
        """
        return pulumi.get(self, "start_on_add")

    @property
    @pulumi.getter(name="stationDirectory")
    def station_directory(self) -> str:
        """
        Directory.
        """
        return pulumi.get(self, "station_directory")

    @property
    @pulumi.getter(name="strmFolder")
    def strm_folder(self) -> str:
        """
        STRM folder.
        """
        return pulumi.get(self, "strm_folder")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="torrentFolder")
    def torrent_folder(self) -> str:
        """
        Torrent folder.
        """
        return pulumi.get(self, "torrent_folder")

    @property
    @pulumi.getter(name="tvImportedCategory")
    def tv_imported_category(self) -> str:
        """
        TV imported category.
        """
        return pulumi.get(self, "tv_imported_category")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "url_base")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> bool:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDownloadClientsDownloadClientCategoryResult(dict):
    def __init__(__self__, *,
                 categories: Sequence[int],
                 name: str):
        """
        :param Sequence[int] categories: List of mapped categories.
        :param str name: Name of client category.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Sequence[int]:
        """
        List of mapped categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of client category.
        """
        return pulumi.get(self, "name")


