# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetIndexerResult',
    'AwaitableGetIndexerResult',
    'get_indexer',
    'get_indexer_output',
]

@pulumi.output_type
class GetIndexerResult:
    """
    A collection of values returned by getIndexer.
    """
    def __init__(__self__, app_profile_id=None, config_contract=None, enable=None, fields=None, id=None, implementation=None, language=None, name=None, priority=None, privacy=None, protocol=None, tags=None):
        if app_profile_id and not isinstance(app_profile_id, int):
            raise TypeError("Expected argument 'app_profile_id' to be a int")
        pulumi.set(__self__, "app_profile_id", app_profile_id)
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if enable and not isinstance(enable, bool):
            raise TypeError("Expected argument 'enable' to be a bool")
        pulumi.set(__self__, "enable", enable)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if language and not isinstance(language, str):
            raise TypeError("Expected argument 'language' to be a str")
        pulumi.set(__self__, "language", language)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if privacy and not isinstance(privacy, str):
            raise TypeError("Expected argument 'privacy' to be a str")
        pulumi.set(__self__, "privacy", privacy)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="appProfileId")
    def app_profile_id(self) -> int:
        """
        Application profile ID.
        """
        return pulumi.get(self, "app_profile_id")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Indexer configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable RSS flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetIndexerFieldResult']:
        """
        Set of configuration fields.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Indexer ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Indexer implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def language(self) -> str:
        """
        Language.
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Indexer name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def privacy(self) -> str:
        """
        Privacy.
        """
        return pulumi.get(self, "privacy")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol. Valid values are 'usenet' and 'torrent'.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetIndexerResult(GetIndexerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIndexerResult(
            app_profile_id=self.app_profile_id,
            config_contract=self.config_contract,
            enable=self.enable,
            fields=self.fields,
            id=self.id,
            implementation=self.implementation,
            language=self.language,
            name=self.name,
            priority=self.priority,
            privacy=self.privacy,
            protocol=self.protocol,
            tags=self.tags)


def get_indexer(name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIndexerResult:
    """
    <!-- subcategory:Indexers -->Single Indexer.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    test = prowlarr.Indexers.get_indexer(name="Example")
    ```


    :param str name: Field name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('prowlarr:Indexers/getIndexer:getIndexer', __args__, opts=opts, typ=GetIndexerResult).value

    return AwaitableGetIndexerResult(
        app_profile_id=pulumi.get(__ret__, 'app_profile_id'),
        config_contract=pulumi.get(__ret__, 'config_contract'),
        enable=pulumi.get(__ret__, 'enable'),
        fields=pulumi.get(__ret__, 'fields'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        language=pulumi.get(__ret__, 'language'),
        name=pulumi.get(__ret__, 'name'),
        priority=pulumi.get(__ret__, 'priority'),
        privacy=pulumi.get(__ret__, 'privacy'),
        protocol=pulumi.get(__ret__, 'protocol'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_indexer)
def get_indexer_output(name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIndexerResult]:
    """
    <!-- subcategory:Indexers -->Single Indexer.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    test = prowlarr.Indexers.get_indexer(name="Example")
    ```


    :param str name: Field name.
    """
    ...
