# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'IndexerFieldArgs',
]

@pulumi.input_type
class IndexerFieldArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 bool_value: Optional[pulumi.Input[bool]] = None,
                 number_value: Optional[pulumi.Input[float]] = None,
                 sensitive_value: Optional[pulumi.Input[str]] = None,
                 set_values: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 text_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Field name.
               It must contain the whole field name comprehensive of its prefix (e.g. `baseSettings.`).
        :param pulumi.Input[bool] bool_value: Bool value. Only one value must be filled out.
        :param pulumi.Input[float] number_value: Number value. Only one value must be filled out.
        :param pulumi.Input[str] sensitive_value: Sensitive string value. Only one value must be filled out. This must be used instead of `text_value`, for sensitive fields.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] set_values: Set value. Only one value must be filled out.
        :param pulumi.Input[str] text_value: Text value. Only one value must be filled out.
        """
        pulumi.set(__self__, "name", name)
        if bool_value is not None:
            pulumi.set(__self__, "bool_value", bool_value)
        if number_value is not None:
            pulumi.set(__self__, "number_value", number_value)
        if sensitive_value is not None:
            pulumi.set(__self__, "sensitive_value", sensitive_value)
        if set_values is not None:
            pulumi.set(__self__, "set_values", set_values)
        if text_value is not None:
            pulumi.set(__self__, "text_value", text_value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Field name.
        It must contain the whole field name comprehensive of its prefix (e.g. `baseSettings.`).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="boolValue")
    def bool_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool value. Only one value must be filled out.
        """
        return pulumi.get(self, "bool_value")

    @bool_value.setter
    def bool_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bool_value", value)

    @property
    @pulumi.getter(name="numberValue")
    def number_value(self) -> Optional[pulumi.Input[float]]:
        """
        Number value. Only one value must be filled out.
        """
        return pulumi.get(self, "number_value")

    @number_value.setter
    def number_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "number_value", value)

    @property
    @pulumi.getter(name="sensitiveValue")
    def sensitive_value(self) -> Optional[pulumi.Input[str]]:
        """
        Sensitive string value. Only one value must be filled out. This must be used instead of `text_value`, for sensitive fields.
        """
        return pulumi.get(self, "sensitive_value")

    @sensitive_value.setter
    def sensitive_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sensitive_value", value)

    @property
    @pulumi.getter(name="setValues")
    def set_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Set value. Only one value must be filled out.
        """
        return pulumi.get(self, "set_values")

    @set_values.setter
    def set_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "set_values", value)

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> Optional[pulumi.Input[str]]:
        """
        Text value. Only one value must be filled out.
        """
        return pulumi.get(self, "text_value")

    @text_value.setter
    def text_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_value", value)


