# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'IndexerField',
    'GetIndexerFieldResult',
    'GetIndexersIndexerResult',
    'GetIndexersIndexerFieldResult',
    'GetProxiesIndexerProxyResult',
    'GetSchemaFieldResult',
]

@pulumi.output_type
class IndexerField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "boolValue":
            suggest = "bool_value"
        elif key == "numberValue":
            suggest = "number_value"
        elif key == "sensitiveValue":
            suggest = "sensitive_value"
        elif key == "setValues":
            suggest = "set_values"
        elif key == "textValue":
            suggest = "text_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexerField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexerField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexerField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 bool_value: Optional[bool] = None,
                 number_value: Optional[float] = None,
                 sensitive_value: Optional[str] = None,
                 set_values: Optional[Sequence[int]] = None,
                 text_value: Optional[str] = None):
        """
        :param str name: Field name.
               It must contain the whole field name comprehensive of its prefix (e.g. `baseSettings.`).
        :param bool bool_value: Bool value. Only one value must be filled out.
        :param float number_value: Number value. Only one value must be filled out.
        :param str sensitive_value: Sensitive string value. Only one value must be filled out. This must be used instead of `text_value`, for sensitive fields.
        :param Sequence[int] set_values: Set value. Only one value must be filled out.
        :param str text_value: Text value. Only one value must be filled out.
        """
        pulumi.set(__self__, "name", name)
        if bool_value is not None:
            pulumi.set(__self__, "bool_value", bool_value)
        if number_value is not None:
            pulumi.set(__self__, "number_value", number_value)
        if sensitive_value is not None:
            pulumi.set(__self__, "sensitive_value", sensitive_value)
        if set_values is not None:
            pulumi.set(__self__, "set_values", set_values)
        if text_value is not None:
            pulumi.set(__self__, "text_value", text_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field name.
        It must contain the whole field name comprehensive of its prefix (e.g. `baseSettings.`).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="boolValue")
    def bool_value(self) -> Optional[bool]:
        """
        Bool value. Only one value must be filled out.
        """
        return pulumi.get(self, "bool_value")

    @property
    @pulumi.getter(name="numberValue")
    def number_value(self) -> Optional[float]:
        """
        Number value. Only one value must be filled out.
        """
        return pulumi.get(self, "number_value")

    @property
    @pulumi.getter(name="sensitiveValue")
    def sensitive_value(self) -> Optional[str]:
        """
        Sensitive string value. Only one value must be filled out. This must be used instead of `text_value`, for sensitive fields.
        """
        return pulumi.get(self, "sensitive_value")

    @property
    @pulumi.getter(name="setValues")
    def set_values(self) -> Optional[Sequence[int]]:
        """
        Set value. Only one value must be filled out.
        """
        return pulumi.get(self, "set_values")

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> Optional[str]:
        """
        Text value. Only one value must be filled out.
        """
        return pulumi.get(self, "text_value")


@pulumi.output_type
class GetIndexerFieldResult(dict):
    def __init__(__self__, *,
                 bool_value: bool,
                 name: str,
                 number_value: float,
                 sensitive_value: str,
                 set_values: Sequence[int],
                 text_value: str):
        """
        :param bool bool_value: Bool value.
        :param str name: Field name.
        :param float number_value: Number value.
        :param str sensitive_value: Sensitive string value.
        :param Sequence[int] set_values: Set value.
        :param str text_value: Text value.
        """
        pulumi.set(__self__, "bool_value", bool_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number_value", number_value)
        pulumi.set(__self__, "sensitive_value", sensitive_value)
        pulumi.set(__self__, "set_values", set_values)
        pulumi.set(__self__, "text_value", text_value)

    @property
    @pulumi.getter(name="boolValue")
    def bool_value(self) -> bool:
        """
        Bool value.
        """
        return pulumi.get(self, "bool_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberValue")
    def number_value(self) -> float:
        """
        Number value.
        """
        return pulumi.get(self, "number_value")

    @property
    @pulumi.getter(name="sensitiveValue")
    def sensitive_value(self) -> str:
        """
        Sensitive string value.
        """
        return pulumi.get(self, "sensitive_value")

    @property
    @pulumi.getter(name="setValues")
    def set_values(self) -> Sequence[int]:
        """
        Set value.
        """
        return pulumi.get(self, "set_values")

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> str:
        """
        Text value.
        """
        return pulumi.get(self, "text_value")


@pulumi.output_type
class GetIndexersIndexerResult(dict):
    def __init__(__self__, *,
                 app_profile_id: int,
                 config_contract: str,
                 enable: bool,
                 fields: Sequence['outputs.GetIndexersIndexerFieldResult'],
                 id: int,
                 implementation: str,
                 language: str,
                 name: str,
                 priority: int,
                 privacy: str,
                 protocol: str,
                 tags: Sequence[int]):
        """
        :param int app_profile_id: Application profile ID.
        :param str config_contract: Indexer configuration template.
        :param bool enable: Enable RSS flag.
        :param Sequence['GetIndexersIndexerFieldArgs'] fields: Set of configuration fields.
        :param int id: Indexer ID.
        :param str implementation: Indexer implementation name.
        :param str language: Language.
        :param str name: Indexer name.
        :param int priority: Priority.
        :param str privacy: Privacy.
        :param str protocol: Protocol. Valid values are 'usenet' and 'torrent'.
        :param Sequence[int] tags: List of associated tags.
        """
        pulumi.set(__self__, "app_profile_id", app_profile_id)
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "privacy", privacy)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="appProfileId")
    def app_profile_id(self) -> int:
        """
        Application profile ID.
        """
        return pulumi.get(self, "app_profile_id")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        Indexer configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable RSS flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetIndexersIndexerFieldResult']:
        """
        Set of configuration fields.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Indexer ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        Indexer implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def language(self) -> str:
        """
        Language.
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Indexer name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def privacy(self) -> str:
        """
        Privacy.
        """
        return pulumi.get(self, "privacy")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol. Valid values are 'usenet' and 'torrent'.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetIndexersIndexerFieldResult(dict):
    def __init__(__self__, *,
                 bool_value: bool,
                 name: str,
                 number_value: float,
                 sensitive_value: str,
                 set_values: Sequence[int],
                 text_value: str):
        """
        :param bool bool_value: Bool value.
        :param str name: Field name.
        :param float number_value: Number value.
        :param str sensitive_value: Sensitive string value.
        :param Sequence[int] set_values: Set value.
        :param str text_value: Text value.
        """
        pulumi.set(__self__, "bool_value", bool_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number_value", number_value)
        pulumi.set(__self__, "sensitive_value", sensitive_value)
        pulumi.set(__self__, "set_values", set_values)
        pulumi.set(__self__, "text_value", text_value)

    @property
    @pulumi.getter(name="boolValue")
    def bool_value(self) -> bool:
        """
        Bool value.
        """
        return pulumi.get(self, "bool_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberValue")
    def number_value(self) -> float:
        """
        Number value.
        """
        return pulumi.get(self, "number_value")

    @property
    @pulumi.getter(name="sensitiveValue")
    def sensitive_value(self) -> str:
        """
        Sensitive string value.
        """
        return pulumi.get(self, "sensitive_value")

    @property
    @pulumi.getter(name="setValues")
    def set_values(self) -> Sequence[int]:
        """
        Set value.
        """
        return pulumi.get(self, "set_values")

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> str:
        """
        Text value.
        """
        return pulumi.get(self, "text_value")


@pulumi.output_type
class GetProxiesIndexerProxyResult(dict):
    def __init__(__self__, *,
                 config_contract: str,
                 host: str,
                 id: int,
                 implementation: str,
                 name: str,
                 password: str,
                 port: int,
                 request_timeout: int,
                 tags: Sequence[int],
                 username: str):
        """
        :param str config_contract: IndexerProxy configuration template.
        :param str host: host.
        :param int id: Indexer Proxy ID.
        :param str implementation: IndexerProxy implementation name.
        :param str name: Indexer Proxy name.
        :param str password: Password.
        :param int port: Port.
        :param int request_timeout: Request timeout.
        :param Sequence[int] tags: List of associated tags.
        :param str username: Username.
        """
        pulumi.set(__self__, "config_contract", config_contract)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "implementation", implementation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "request_timeout", request_timeout)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        IndexerProxy configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Indexer Proxy ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        IndexerProxy implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Indexer Proxy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> int:
        """
        Request timeout.
        """
        return pulumi.get(self, "request_timeout")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSchemaFieldResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 type: str):
        """
        :param str description: Field description.
        :param str name: Field name.
        :param str type: Field type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Field description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Field type.
        """
        return pulumi.get(self, "type")


