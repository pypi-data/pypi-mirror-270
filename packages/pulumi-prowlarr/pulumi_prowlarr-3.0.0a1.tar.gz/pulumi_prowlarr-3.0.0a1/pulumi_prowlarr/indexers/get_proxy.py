# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetProxyResult',
    'AwaitableGetProxyResult',
    'get_proxy',
    'get_proxy_output',
]

@pulumi.output_type
class GetProxyResult:
    """
    A collection of values returned by getProxy.
    """
    def __init__(__self__, config_contract=None, host=None, id=None, implementation=None, name=None, password=None, port=None, request_timeout=None, tags=None, username=None):
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if request_timeout and not isinstance(request_timeout, int):
            raise TypeError("Expected argument 'request_timeout' to be a int")
        pulumi.set(__self__, "request_timeout", request_timeout)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        IndexerProxy configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Indexer Proxy ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        IndexerProxy implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Indexer Proxy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> int:
        """
        Request timeout.
        """
        return pulumi.get(self, "request_timeout")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")


class AwaitableGetProxyResult(GetProxyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProxyResult(
            config_contract=self.config_contract,
            host=self.host,
            id=self.id,
            implementation=self.implementation,
            name=self.name,
            password=self.password,
            port=self.port,
            request_timeout=self.request_timeout,
            tags=self.tags,
            username=self.username)


def get_proxy(name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProxyResult:
    """
    <!-- subcategory:Indexer Proxies -->Single Indexer Proxy.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    test = prowlarr.Indexers.get_proxy(name="Example")
    ```


    :param str name: Indexer Proxy name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('prowlarr:Indexers/getProxy:getProxy', __args__, opts=opts, typ=GetProxyResult).value

    return AwaitableGetProxyResult(
        config_contract=pulumi.get(__ret__, 'config_contract'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        port=pulumi.get(__ret__, 'port'),
        request_timeout=pulumi.get(__ret__, 'request_timeout'),
        tags=pulumi.get(__ret__, 'tags'),
        username=pulumi.get(__ret__, 'username'))


@_utilities.lift_output_func(get_proxy)
def get_proxy_output(name: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProxyResult]:
    """
    <!-- subcategory:Indexer Proxies -->Single Indexer Proxy.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    test = prowlarr.Indexers.get_proxy(name="Example")
    ```


    :param str name: Indexer Proxy name.
    """
    ...
