# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSyncProfileResult',
    'AwaitableGetSyncProfileResult',
    'get_sync_profile',
    'get_sync_profile_output',
]

@pulumi.output_type
class GetSyncProfileResult:
    """
    A collection of values returned by getSyncProfile.
    """
    def __init__(__self__, enable_automatic_search=None, enable_interactive_search=None, enable_rss=None, id=None, minimum_seeders=None, name=None):
        if enable_automatic_search and not isinstance(enable_automatic_search, bool):
            raise TypeError("Expected argument 'enable_automatic_search' to be a bool")
        pulumi.set(__self__, "enable_automatic_search", enable_automatic_search)
        if enable_interactive_search and not isinstance(enable_interactive_search, bool):
            raise TypeError("Expected argument 'enable_interactive_search' to be a bool")
        pulumi.set(__self__, "enable_interactive_search", enable_interactive_search)
        if enable_rss and not isinstance(enable_rss, bool):
            raise TypeError("Expected argument 'enable_rss' to be a bool")
        pulumi.set(__self__, "enable_rss", enable_rss)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if minimum_seeders and not isinstance(minimum_seeders, int):
            raise TypeError("Expected argument 'minimum_seeders' to be a int")
        pulumi.set(__self__, "minimum_seeders", minimum_seeders)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="enableAutomaticSearch")
    def enable_automatic_search(self) -> bool:
        """
        Enable automatic search flag.
        """
        return pulumi.get(self, "enable_automatic_search")

    @property
    @pulumi.getter(name="enableInteractiveSearch")
    def enable_interactive_search(self) -> bool:
        """
        Enable interactive search flag.
        """
        return pulumi.get(self, "enable_interactive_search")

    @property
    @pulumi.getter(name="enableRss")
    def enable_rss(self) -> bool:
        """
        Enable RSS flag.
        """
        return pulumi.get(self, "enable_rss")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Sync Profile ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="minimumSeeders")
    def minimum_seeders(self) -> int:
        """
        Minimum seeders.
        """
        return pulumi.get(self, "minimum_seeders")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")


class AwaitableGetSyncProfileResult(GetSyncProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSyncProfileResult(
            enable_automatic_search=self.enable_automatic_search,
            enable_interactive_search=self.enable_interactive_search,
            enable_rss=self.enable_rss,
            id=self.id,
            minimum_seeders=self.minimum_seeders,
            name=self.name)


def get_sync_profile(name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSyncProfileResult:
    """
    <!-- subcategory:Applications -->Single Sync Profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    test = prowlarr.Applications.get_sync_profile(name="Example")
    ```


    :param str name: Name.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('prowlarr:Applications/getSyncProfile:getSyncProfile', __args__, opts=opts, typ=GetSyncProfileResult).value

    return AwaitableGetSyncProfileResult(
        enable_automatic_search=pulumi.get(__ret__, 'enable_automatic_search'),
        enable_interactive_search=pulumi.get(__ret__, 'enable_interactive_search'),
        enable_rss=pulumi.get(__ret__, 'enable_rss'),
        id=pulumi.get(__ret__, 'id'),
        minimum_seeders=pulumi.get(__ret__, 'minimum_seeders'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_sync_profile)
def get_sync_profile_output(name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSyncProfileResult]:
    """
    <!-- subcategory:Applications -->Single Sync Profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    test = prowlarr.Applications.get_sync_profile(name="Example")
    ```


    :param str name: Name.
    """
    ...
