# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDownloadClientResult',
    'AwaitableGetDownloadClientResult',
    'get_download_client',
    'get_download_client_output',
]

@pulumi.output_type
class GetDownloadClientResult:
    """
    A collection of values returned by getDownloadClient.
    """
    def __init__(__self__, add_paused=None, add_stopped=None, additional_tags=None, api_key=None, api_url=None, app_id=None, app_token=None, categories=None, category=None, config_contract=None, destination=None, destination_directory=None, directory=None, enable=None, field_tags=None, host=None, id=None, implementation=None, initial_state=None, intial_state=None, item_priority=None, magnet_file_extension=None, name=None, nzb_folder=None, password=None, port=None, post_im_tags=None, priority=None, protocol=None, read_only=None, rpc_path=None, save_magnet_files=None, secret_token=None, start_on_add=None, station_directory=None, strm_folder=None, tags=None, torrent_folder=None, tv_imported_category=None, url_base=None, use_ssl=None, username=None):
        if add_paused and not isinstance(add_paused, bool):
            raise TypeError("Expected argument 'add_paused' to be a bool")
        pulumi.set(__self__, "add_paused", add_paused)
        if add_stopped and not isinstance(add_stopped, bool):
            raise TypeError("Expected argument 'add_stopped' to be a bool")
        pulumi.set(__self__, "add_stopped", add_stopped)
        if additional_tags and not isinstance(additional_tags, list):
            raise TypeError("Expected argument 'additional_tags' to be a list")
        pulumi.set(__self__, "additional_tags", additional_tags)
        if api_key and not isinstance(api_key, str):
            raise TypeError("Expected argument 'api_key' to be a str")
        pulumi.set(__self__, "api_key", api_key)
        if api_url and not isinstance(api_url, str):
            raise TypeError("Expected argument 'api_url' to be a str")
        pulumi.set(__self__, "api_url", api_url)
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        pulumi.set(__self__, "app_id", app_id)
        if app_token and not isinstance(app_token, str):
            raise TypeError("Expected argument 'app_token' to be a str")
        pulumi.set(__self__, "app_token", app_token)
        if categories and not isinstance(categories, list):
            raise TypeError("Expected argument 'categories' to be a list")
        pulumi.set(__self__, "categories", categories)
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if config_contract and not isinstance(config_contract, str):
            raise TypeError("Expected argument 'config_contract' to be a str")
        pulumi.set(__self__, "config_contract", config_contract)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if destination_directory and not isinstance(destination_directory, str):
            raise TypeError("Expected argument 'destination_directory' to be a str")
        pulumi.set(__self__, "destination_directory", destination_directory)
        if directory and not isinstance(directory, str):
            raise TypeError("Expected argument 'directory' to be a str")
        pulumi.set(__self__, "directory", directory)
        if enable and not isinstance(enable, bool):
            raise TypeError("Expected argument 'enable' to be a bool")
        pulumi.set(__self__, "enable", enable)
        if field_tags and not isinstance(field_tags, list):
            raise TypeError("Expected argument 'field_tags' to be a list")
        pulumi.set(__self__, "field_tags", field_tags)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if implementation and not isinstance(implementation, str):
            raise TypeError("Expected argument 'implementation' to be a str")
        pulumi.set(__self__, "implementation", implementation)
        if initial_state and not isinstance(initial_state, int):
            raise TypeError("Expected argument 'initial_state' to be a int")
        pulumi.set(__self__, "initial_state", initial_state)
        if intial_state and not isinstance(intial_state, int):
            raise TypeError("Expected argument 'intial_state' to be a int")
        pulumi.set(__self__, "intial_state", intial_state)
        if item_priority and not isinstance(item_priority, int):
            raise TypeError("Expected argument 'item_priority' to be a int")
        pulumi.set(__self__, "item_priority", item_priority)
        if magnet_file_extension and not isinstance(magnet_file_extension, str):
            raise TypeError("Expected argument 'magnet_file_extension' to be a str")
        pulumi.set(__self__, "magnet_file_extension", magnet_file_extension)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nzb_folder and not isinstance(nzb_folder, str):
            raise TypeError("Expected argument 'nzb_folder' to be a str")
        pulumi.set(__self__, "nzb_folder", nzb_folder)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if post_im_tags and not isinstance(post_im_tags, list):
            raise TypeError("Expected argument 'post_im_tags' to be a list")
        pulumi.set(__self__, "post_im_tags", post_im_tags)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if read_only and not isinstance(read_only, bool):
            raise TypeError("Expected argument 'read_only' to be a bool")
        pulumi.set(__self__, "read_only", read_only)
        if rpc_path and not isinstance(rpc_path, str):
            raise TypeError("Expected argument 'rpc_path' to be a str")
        pulumi.set(__self__, "rpc_path", rpc_path)
        if save_magnet_files and not isinstance(save_magnet_files, bool):
            raise TypeError("Expected argument 'save_magnet_files' to be a bool")
        pulumi.set(__self__, "save_magnet_files", save_magnet_files)
        if secret_token and not isinstance(secret_token, str):
            raise TypeError("Expected argument 'secret_token' to be a str")
        pulumi.set(__self__, "secret_token", secret_token)
        if start_on_add and not isinstance(start_on_add, bool):
            raise TypeError("Expected argument 'start_on_add' to be a bool")
        pulumi.set(__self__, "start_on_add", start_on_add)
        if station_directory and not isinstance(station_directory, str):
            raise TypeError("Expected argument 'station_directory' to be a str")
        pulumi.set(__self__, "station_directory", station_directory)
        if strm_folder and not isinstance(strm_folder, str):
            raise TypeError("Expected argument 'strm_folder' to be a str")
        pulumi.set(__self__, "strm_folder", strm_folder)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if torrent_folder and not isinstance(torrent_folder, str):
            raise TypeError("Expected argument 'torrent_folder' to be a str")
        pulumi.set(__self__, "torrent_folder", torrent_folder)
        if tv_imported_category and not isinstance(tv_imported_category, str):
            raise TypeError("Expected argument 'tv_imported_category' to be a str")
        pulumi.set(__self__, "tv_imported_category", tv_imported_category)
        if url_base and not isinstance(url_base, str):
            raise TypeError("Expected argument 'url_base' to be a str")
        pulumi.set(__self__, "url_base", url_base)
        if use_ssl and not isinstance(use_ssl, bool):
            raise TypeError("Expected argument 'use_ssl' to be a bool")
        pulumi.set(__self__, "use_ssl", use_ssl)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="addPaused")
    def add_paused(self) -> bool:
        """
        Add paused flag.
        """
        return pulumi.get(self, "add_paused")

    @property
    @pulumi.getter(name="addStopped")
    def add_stopped(self) -> bool:
        """
        Add stopped flag.
        """
        return pulumi.get(self, "add_stopped")

    @property
    @pulumi.getter(name="additionalTags")
    def additional_tags(self) -> Sequence[int]:
        """
        Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.
        """
        return pulumi.get(self, "additional_tags")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> str:
        """
        API URL.
        """
        return pulumi.get(self, "api_url")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App ID.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> str:
        """
        App Token.
        """
        return pulumi.get(self, "app_token")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetDownloadClientCategoryResult']:
        """
        List of mapped categories.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="configContract")
    def config_contract(self) -> str:
        """
        DownloadClient configuration template.
        """
        return pulumi.get(self, "config_contract")

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Destination.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationDirectory")
    def destination_directory(self) -> str:
        """
        Movie directory.
        """
        return pulumi.get(self, "destination_directory")

    @property
    @pulumi.getter
    def directory(self) -> str:
        """
        Directory.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable flag.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="fieldTags")
    def field_tags(self) -> Sequence[str]:
        """
        Field tags.
        """
        return pulumi.get(self, "field_tags")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Download Client ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def implementation(self) -> str:
        """
        DownloadClient implementation name.
        """
        return pulumi.get(self, "implementation")

    @property
    @pulumi.getter(name="initialState")
    def initial_state(self) -> int:
        """
        Initial state. `0` Start, `1` ForceStart, `2` Pause.
        """
        return pulumi.get(self, "initial_state")

    @property
    @pulumi.getter(name="intialState")
    def intial_state(self) -> int:
        """
        Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.
        """
        return pulumi.get(self, "intial_state")

    @property
    @pulumi.getter(name="itemPriority")
    def item_priority(self) -> int:
        """
        Priority. `0` Last, `1` First.
        """
        return pulumi.get(self, "item_priority")

    @property
    @pulumi.getter(name="magnetFileExtension")
    def magnet_file_extension(self) -> str:
        """
        Magnet file extension.
        """
        return pulumi.get(self, "magnet_file_extension")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Download Client name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nzbFolder")
    def nzb_folder(self) -> str:
        """
        NZB folder.
        """
        return pulumi.get(self, "nzb_folder")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="postImTags")
    def post_im_tags(self) -> Sequence[str]:
        """
        Post import tags.
        """
        return pulumi.get(self, "post_im_tags")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol. Valid values are 'usenet' and 'torrent'.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Read only flag.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="rpcPath")
    def rpc_path(self) -> str:
        """
        RPC path.
        """
        return pulumi.get(self, "rpc_path")

    @property
    @pulumi.getter(name="saveMagnetFiles")
    def save_magnet_files(self) -> bool:
        """
        Save magnet files flag.
        """
        return pulumi.get(self, "save_magnet_files")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> str:
        """
        Secret token.
        """
        return pulumi.get(self, "secret_token")

    @property
    @pulumi.getter(name="startOnAdd")
    def start_on_add(self) -> bool:
        """
        Start on add flag.
        """
        return pulumi.get(self, "start_on_add")

    @property
    @pulumi.getter(name="stationDirectory")
    def station_directory(self) -> str:
        """
        Directory.
        """
        return pulumi.get(self, "station_directory")

    @property
    @pulumi.getter(name="strmFolder")
    def strm_folder(self) -> str:
        """
        STRM folder.
        """
        return pulumi.get(self, "strm_folder")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[int]:
        """
        List of associated tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="torrentFolder")
    def torrent_folder(self) -> str:
        """
        Torrent folder.
        """
        return pulumi.get(self, "torrent_folder")

    @property
    @pulumi.getter(name="tvImportedCategory")
    def tv_imported_category(self) -> str:
        """
        TV imported category.
        """
        return pulumi.get(self, "tv_imported_category")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        """
        Base URL.
        """
        return pulumi.get(self, "url_base")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> bool:
        """
        Use SSL flag.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")


class AwaitableGetDownloadClientResult(GetDownloadClientResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDownloadClientResult(
            add_paused=self.add_paused,
            add_stopped=self.add_stopped,
            additional_tags=self.additional_tags,
            api_key=self.api_key,
            api_url=self.api_url,
            app_id=self.app_id,
            app_token=self.app_token,
            categories=self.categories,
            category=self.category,
            config_contract=self.config_contract,
            destination=self.destination,
            destination_directory=self.destination_directory,
            directory=self.directory,
            enable=self.enable,
            field_tags=self.field_tags,
            host=self.host,
            id=self.id,
            implementation=self.implementation,
            initial_state=self.initial_state,
            intial_state=self.intial_state,
            item_priority=self.item_priority,
            magnet_file_extension=self.magnet_file_extension,
            name=self.name,
            nzb_folder=self.nzb_folder,
            password=self.password,
            port=self.port,
            post_im_tags=self.post_im_tags,
            priority=self.priority,
            protocol=self.protocol,
            read_only=self.read_only,
            rpc_path=self.rpc_path,
            save_magnet_files=self.save_magnet_files,
            secret_token=self.secret_token,
            start_on_add=self.start_on_add,
            station_directory=self.station_directory,
            strm_folder=self.strm_folder,
            tags=self.tags,
            torrent_folder=self.torrent_folder,
            tv_imported_category=self.tv_imported_category,
            url_base=self.url_base,
            use_ssl=self.use_ssl,
            username=self.username)


def get_download_client(name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDownloadClientResult:
    """
    <!-- subcategory:Download Clients -->Single Download Client.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    test = prowlarr.DownloadClients.get_download_client(name="Example")
    ```


    :param str name: Name of client category.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('prowlarr:DownloadClients/getDownloadClient:getDownloadClient', __args__, opts=opts, typ=GetDownloadClientResult).value

    return AwaitableGetDownloadClientResult(
        add_paused=pulumi.get(__ret__, 'add_paused'),
        add_stopped=pulumi.get(__ret__, 'add_stopped'),
        additional_tags=pulumi.get(__ret__, 'additional_tags'),
        api_key=pulumi.get(__ret__, 'api_key'),
        api_url=pulumi.get(__ret__, 'api_url'),
        app_id=pulumi.get(__ret__, 'app_id'),
        app_token=pulumi.get(__ret__, 'app_token'),
        categories=pulumi.get(__ret__, 'categories'),
        category=pulumi.get(__ret__, 'category'),
        config_contract=pulumi.get(__ret__, 'config_contract'),
        destination=pulumi.get(__ret__, 'destination'),
        destination_directory=pulumi.get(__ret__, 'destination_directory'),
        directory=pulumi.get(__ret__, 'directory'),
        enable=pulumi.get(__ret__, 'enable'),
        field_tags=pulumi.get(__ret__, 'field_tags'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        implementation=pulumi.get(__ret__, 'implementation'),
        initial_state=pulumi.get(__ret__, 'initial_state'),
        intial_state=pulumi.get(__ret__, 'intial_state'),
        item_priority=pulumi.get(__ret__, 'item_priority'),
        magnet_file_extension=pulumi.get(__ret__, 'magnet_file_extension'),
        name=pulumi.get(__ret__, 'name'),
        nzb_folder=pulumi.get(__ret__, 'nzb_folder'),
        password=pulumi.get(__ret__, 'password'),
        port=pulumi.get(__ret__, 'port'),
        post_im_tags=pulumi.get(__ret__, 'post_im_tags'),
        priority=pulumi.get(__ret__, 'priority'),
        protocol=pulumi.get(__ret__, 'protocol'),
        read_only=pulumi.get(__ret__, 'read_only'),
        rpc_path=pulumi.get(__ret__, 'rpc_path'),
        save_magnet_files=pulumi.get(__ret__, 'save_magnet_files'),
        secret_token=pulumi.get(__ret__, 'secret_token'),
        start_on_add=pulumi.get(__ret__, 'start_on_add'),
        station_directory=pulumi.get(__ret__, 'station_directory'),
        strm_folder=pulumi.get(__ret__, 'strm_folder'),
        tags=pulumi.get(__ret__, 'tags'),
        torrent_folder=pulumi.get(__ret__, 'torrent_folder'),
        tv_imported_category=pulumi.get(__ret__, 'tv_imported_category'),
        url_base=pulumi.get(__ret__, 'url_base'),
        use_ssl=pulumi.get(__ret__, 'use_ssl'),
        username=pulumi.get(__ret__, 'username'))


@_utilities.lift_output_func(get_download_client)
def get_download_client_output(name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDownloadClientResult]:
    """
    <!-- subcategory:Download Clients -->Single Download Client.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prowlarr as prowlarr

    test = prowlarr.DownloadClients.get_download_client(name="Example")
    ```


    :param str name: Name of client category.
    """
    ...
